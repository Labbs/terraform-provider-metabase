{
  "paths": {
    "/action/": {
      "get": {
        "summary": "GET /action/",
        "parameters": [
          {
            "name": "model-id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /action/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "database_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "dataset_query": {
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "error_handle": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {
                        "description": "must be a valid json-query, something like '.item.title'"
                      }
                    ]
                  },
                  "kind": {
                    "description": "Unsupported implicit action kind",
                    "type": "string"
                  },
                  "model_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "parameter_mappings": {
                    "type": "object"
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": null
                    }
                  },
                  "response_handle": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {
                        "description": "must be a valid json-query, something like '.item.title'"
                      }
                    ]
                  },
                  "template": {
                    "type": "object"
                  },
                  "type": {
                    "description": "Unsupported action type",
                    "type": "string"
                  },
                  "visualization_settings": {
                    "type": "object"
                  }
                },
                "required": [
                  "name",
                  "model_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/action/public": {
      "get": {
        "summary": "GET /action/public",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/action/{action-id}": {
      "delete": {
        "summary": "DELETE /action/{action-id}",
        "parameters": [
          {
            "name": "action-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /action/{action-id}",
        "parameters": [
          {
            "name": "action-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/action/{action-id}/execute": {
      "get": {
        "summary": "GET /action/{action-id}/execute",
        "parameters": [
          {
            "name": "action-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/action/{id}": {
      "put": {
        "summary": "PUT /action/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "object"
                  }
                },
                "required": [
                  "action"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/action/{id}/execute": {
      "post": {
        "summary": "POST /action/{id}/execute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parameters": {
                    "type": "object"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/action/{id}/public_link": {
      "delete": {
        "summary": "DELETE /action/{id}/public_link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /action/{id}/public_link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/activity/most_recently_viewed_dashboard": {
      "get": {
        "summary": "GET /activity/most_recently_viewed_dashboard",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/activity/popular_items": {
      "get": {
        "summary": "GET /activity/popular_items",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/activity/recent_views": {
      "get": {
        "summary": "GET /activity/recent_views",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/activity/recents": {
      "get": {
        "summary": "GET /activity/recents",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /activity/recents",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "context": {
                    "type": "string"
                  },
                  "model": {
                    "type": "string"
                  },
                  "model_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "model",
                  "model_id",
                  "context"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/alert/": {
      "get": {
        "summary": "GET /alert/",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /alert/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "alert_above_goal": {
                    "type": "boolean"
                  },
                  "alert_condition": {
                    "type": "string"
                  },
                  "alert_first_only": {
                    "type": "boolean"
                  },
                  "card": {
                    "description": "value must be a map with the keys `include_csv`, `include_xls`, and `dashboard_card_id`.",
                    "type": "object"
                  },
                  "channels": {}
                },
                "required": [
                  "alert_condition",
                  "alert_first_only",
                  "card",
                  "channels"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/alert/question/{id}": {
      "get": {
        "summary": "GET /alert/question/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/alert/{id}": {
      "get": {
        "summary": "GET /alert/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /alert/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "alert_above_goal": {
                    "type": "boolean"
                  },
                  "alert_condition": {
                    "type": "string"
                  },
                  "alert_first_only": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "card": {
                    "description": "value must be a map with the keys `include_csv`, `include_xls`, and `dashboard_card_id`.",
                    "type": "object"
                  },
                  "channels": {}
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/alert/{id}/subscription": {
      "delete": {
        "summary": "DELETE /alert/{id}/subscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api-key/": {
      "get": {
        "summary": "GET /api-key/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /api-key/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "group_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "group_id",
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api-key/count": {
      "get": {
        "summary": "GET /api-key/count",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api-key/{id}": {
      "delete": {
        "summary": "DELETE /api-key/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /api-key/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "group_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api-key/{id}/regenerate": {
      "put": {
        "summary": "PUT /api-key/{id}/regenerate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/database/{id}/candidates": {
      "get": {
        "summary": "GET /automagic-dashboards/database/{id}/candidates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}": {
      "get": {
        "summary": "GET /automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}",
        "parameters": [
          {
            "name": "model-index-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pk-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}",
        "parameters": [
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "const": "all"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "cell-query",
            "in": "path",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "cell-query",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "comparison-entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "segment",
                "adhoc",
                "table"
              ],
              "type": "string"
            }
          },
          {
            "name": "comparison-entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "dashboard-template",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "cell-query",
            "in": "path",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "dashboard-template",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "cell-query",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "comparison-entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "segment",
                "adhoc",
                "table"
              ],
              "type": "string"
            }
          },
          {
            "name": "comparison-entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
        "parameters": [
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "comparison-entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "segment",
                "adhoc",
                "table"
              ],
              "type": "string"
            }
          },
          {
            "name": "comparison-entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "dashboard-template",
            "in": "path",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}": {
      "get": {
        "summary": "GET /automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "adhoc",
                "transform",
                "table",
                "question",
                "field",
                "segment",
                "metric",
                "model"
              ],
              "type": "string"
            }
          },
          {
            "name": "entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "show",
            "in": "query",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "all"
                  ],
                  "type": "string"
                },
                {
                  "minimum": 0,
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "dashboard-template",
            "in": "path",
            "required": true,
            "schema": {}
          },
          {
            "name": "comparison-entity",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "segment",
                "adhoc",
                "table"
              ],
              "type": "string"
            }
          },
          {
            "name": "comparison-entity-id-or-query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/bookmark/": {
      "get": {
        "summary": "GET /bookmark/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/bookmark/ordering": {
      "put": {
        "summary": "PUT /bookmark/ordering",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "orderings": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "item_id": {
                          "description": "value must be an integer greater than zero.",
                          "type": "integer"
                        },
                        "type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "item_id"
                      ]
                    }
                  }
                },
                "required": [
                  "orderings"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/bookmark/{model}/{id}": {
      "delete": {
        "summary": "DELETE /bookmark/{model}/{id}",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "card",
                "dashboard",
                "collection"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /bookmark/{model}/{id}",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "card",
                "dashboard",
                "collection"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cache/": {
      "delete": {
        "summary": "DELETE /cache/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "model_id": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  }
                },
                "required": [
                  "model",
                  "model_id"
                ],
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /cache/",
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "required": true,
            "schema": {
              "items": {
                "enum": [
                  "root",
                  "database",
                  "dashboard",
                  "question"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "collection",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /cache/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "model_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "strategy": {
                    "allOf": [
                      {
                        "type": "object"
                      },
                      {}
                    ]
                  }
                },
                "required": [
                  "model",
                  "model_id",
                  "strategy"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/cache/invalidate": {
      "post": {
        "summary": "POST /cache/invalidate",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "schema": {
              "const": "overrides"
            }
          },
          {
            "name": "database",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 0,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "dashboard",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 0,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "question",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 0,
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/": {
      "get": {
        "summary": "GET /card/",
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "schema": {
              "enum": [
                "archived",
                "table",
                "using_model",
                "bookmarked",
                "using_segment",
                "all",
                "mine",
                "using_metric",
                "database"
              ],
              "type": "string"
            }
          },
          {
            "name": "model_id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /card/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "dataset_query": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "description": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "display": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parameter_mappings": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "card_id": {
                          "description": "value must be an integer greater than zero.",
                          "type": "integer"
                        },
                        "parameter_id": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "target": {}
                      },
                      "required": [
                        "parameter_id",
                        "target"
                      ]
                    }
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "default": {},
                        "id": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "sectionId": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "type": {},
                        "values_source_config": {
                          "type": "object"
                        },
                        "values_source_type": {}
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "result_metadata": {
                    "$ref": "#/components/schemas/metabase_analyze_query_results_ResultsMetadata"
                  },
                  "type": {
                    "$ref": "#/components/schemas/metabase_api_card_card_type"
                  },
                  "visualization_settings": {
                    "description": "Value must be a map.",
                    "type": "object"
                  }
                },
                "required": [
                  "visualization_settings",
                  "name",
                  "dataset_query",
                  "display"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/collections": {
      "post": {
        "summary": "POST /card/collections",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "card_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "card_ids"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/embeddable": {
      "get": {
        "summary": "GET /card/embeddable",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/from-csv": {
      "post": {
        "summary": "POST /card/from-csv",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/pivot/{card-id}/query": {
      "post": {
        "summary": "POST /card/pivot/{card-id}/query",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ignore_cache": {
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/public": {
      "get": {
        "summary": "GET /card/public",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/related": {
      "post": {
        "summary": "POST /card/related",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/params/{param-key}/search/{query}": {
      "get": {
        "summary": "GET /card/{card-id}/params/{param-key}/search/{query}",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "param-key",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/params/{param-key}/values": {
      "get": {
        "summary": "GET /card/{card-id}/params/{param-key}/values",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "param-key",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/persist": {
      "post": {
        "summary": "POST /card/{card-id}/persist",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/public_link": {
      "delete": {
        "summary": "DELETE /card/{card-id}/public_link",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /card/{card-id}/public_link",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/query": {
      "post": {
        "summary": "POST /card/{card-id}/query",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_preview": {
                    "type": "boolean"
                  },
                  "dashboard_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "ignore_cache": {
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/query/{export-format}": {
      "post": {
        "summary": "POST /card/{card-id}/query/{export-format}",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "export-format",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "csv",
                "api",
                "xlsx",
                "json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format_rows": {
                    "type": "boolean"
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid JSON string."
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/refresh": {
      "post": {
        "summary": "POST /card/{card-id}/refresh",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{card-id}/unpersist": {
      "post": {
        "summary": "POST /card/{card-id}/unpersist",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{id}": {
      "delete": {
        "summary": "DELETE /card/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /card/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "ignore_view",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "context",
            "in": "query",
            "schema": {
              "enum": [
                "collection"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /card/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_preview": {
                    "type": "boolean"
                  },
                  "dataset_query": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "display": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "embedding_params": {
                    "description": "value must be a valid embedding params map."
                  },
                  "enable_embedding": {
                    "type": "boolean"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "default": {},
                        "id": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "sectionId": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "type": {},
                        "values_source_config": {
                          "type": "object"
                        },
                        "values_source_type": {}
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "result_metadata": {
                    "$ref": "#/components/schemas/metabase_analyze_query_results_ResultsMetadata"
                  },
                  "type": {
                    "$ref": "#/components/schemas/metabase_api_card_card_type"
                  },
                  "visualization_settings": {
                    "description": "Value must be a map.",
                    "type": "object"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/card/{id}/copy": {
      "post": {
        "summary": "POST /card/{id}/copy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{id}/query_metadata": {
      "get": {
        "summary": "GET /card/{id}/query_metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{id}/related": {
      "get": {
        "summary": "GET /card/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{id}/series": {
      "get": {
        "summary": "GET /card/{id}/series",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "last_cursor",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "exclude_ids",
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/card/{id}/timelines": {
      "get": {
        "summary": "GET /card/{id}/timelines",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "const": "events"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "description": "value must be a valid date string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "description": "value must be a valid date string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cloud-migration/": {
      "get": {
        "summary": "GET /cloud-migration/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /cloud-migration/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cloud-migration/cancel": {
      "put": {
        "summary": "PUT /cloud-migration/cancel",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/": {
      "get": {
        "summary": "GET /collection/",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "exclude-other-user-collections",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "personal-only",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /collection/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "authority_level": {
                    "type": "string"
                  },
                  "description": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "namespace": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parent_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/collection/graph": {
      "get": {
        "summary": "GET /collection/graph",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /collection/graph",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "groups": {
                    "type": "object"
                  },
                  "namespace": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "revision": {
                    "description": "value must be an integer.",
                    "type": "integer"
                  },
                  "skip_graph": {
                    "description": "value must be a valid boolean string ('true' or 'false')."
                  }
                },
                "required": [
                  "revision",
                  "groups"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/collection/root": {
      "get": {
        "summary": "GET /collection/root",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/root/items": {
      "get": {
        "summary": "GET /collection/root/items",
        "parameters": [
          {
            "name": "models",
            "in": "query",
            "schema": {
              "items": {
                "enum": [
                  "dashboard",
                  "dataset",
                  "no_models",
                  "timeline",
                  "snippet",
                  "collection",
                  "pulse",
                  "card"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "pinned_state",
            "in": "query",
            "schema": {
              "enum": [
                "is_not_pinned",
                "is_pinned",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort_column",
            "in": "query",
            "schema": {
              "enum": [
                "model",
                "name",
                "last_edited_by",
                "last_edited_at"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/root/timelines": {
      "get": {
        "summary": "GET /collection/root/timelines",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "schema": {
              "const": "events"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/tree": {
      "get": {
        "summary": "GET /collection/tree",
        "parameters": [
          {
            "name": "exclude-archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude-other-user-collections",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "shallow",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "collection-id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/{id}": {
      "get": {
        "summary": "GET /collection/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /collection/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "description": "value must be a valid boolean string ('true' or 'false')."
                  },
                  "authority_level": {
                    "type": "string"
                  },
                  "description": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parent_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/collection/{id}/items": {
      "get": {
        "summary": "GET /collection/{id}/items",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "models",
            "in": "query",
            "schema": {
              "items": {
                "enum": [
                  "dashboard",
                  "dataset",
                  "no_models",
                  "timeline",
                  "snippet",
                  "collection",
                  "pulse",
                  "card"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "pinned_state",
            "in": "query",
            "schema": {
              "enum": [
                "is_not_pinned",
                "is_pinned",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort_column",
            "in": "query",
            "schema": {
              "enum": [
                "model",
                "name",
                "last_edited_by",
                "last_edited_at"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/collection/{id}/timelines": {
      "get": {
        "summary": "GET /collection/{id}/timelines",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "const": "events"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/": {
      "get": {
        "summary": "GET /dashboard/",
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "schema": {
              "enum": [
                "all",
                "mine",
                "archived"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /dashboard/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "default": {},
                        "id": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "sectionId": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "type": {},
                        "values_source_config": {
                          "type": "object"
                        },
                        "values_source_type": {}
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/embeddable": {
      "get": {
        "summary": "GET /dashboard/embeddable",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/params/valid-filter-fields": {
      "get": {
        "summary": "GET /dashboard/params/valid-filter-fields",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query": {
      "post": {
        "summary": "POST /dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parameters": {
                    "type": "array",
                    "items": {
                      "properties": null
                    }
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/public": {
      "get": {
        "summary": "GET /dashboard/public",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/save": {
      "post": {
        "summary": "POST /dashboard/save",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/save/collection/{parent-collection-id}": {
      "post": {
        "summary": "POST /dashboard/save/collection/{parent-collection-id}",
        "parameters": [
          {
            "name": "parent-collection-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query": {
      "post": {
        "summary": "POST /dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dashboard_load_id": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "properties": null
                    }
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}": {
      "post": {
        "summary": "POST /dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "export-format",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "csv",
                "api",
                "xlsx",
                "json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format_rows": {
                    "type": "boolean"
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid JSON string."
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute": {
      "get": {
        "summary": "GET /dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parameters": {
                    "type": "object"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{dashboard-id}/public_link": {
      "delete": {
        "summary": "DELETE /dashboard/{dashboard-id}/public_link",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /dashboard/{dashboard-id}/public_link",
        "parameters": [
          {
            "name": "dashboard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{from-dashboard-id}/copy": {
      "post": {
        "summary": "POST /dashboard/{from-dashboard-id}/copy",
        "parameters": [
          {
            "name": "from-dashboard-id",
            "in": "path",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "is_deep_copy": {
                    "type": "boolean"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}": {
      "delete": {
        "summary": "DELETE /dashboard/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /dashboard/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /dashboard/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "caveats": {
                    "type": "string"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "collection_position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "dashcards": {
                    "allOf": [
                      {},
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "col": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "parameter_mappings": {},
                            "row": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "series": {},
                            "size_x": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "size_y": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id",
                            "size_x",
                            "size_y",
                            "row",
                            "col"
                          ]
                        }
                      }
                    ],
                    "description": "value must be seq of maps in which ids are unique"
                  },
                  "description": {
                    "type": "string"
                  },
                  "embedding_params": {
                    "description": "value must be a valid embedding params map."
                  },
                  "enable_embedding": {
                    "type": "boolean"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "parameters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "default": {},
                        "id": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "sectionId": {
                          "description": "value must be a non-blank string.",
                          "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "type": {},
                        "values_source_config": {
                          "type": "object"
                        },
                        "values_source_type": {}
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "position": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "show_in_getting_started": {
                    "type": "boolean"
                  },
                  "tabs": {
                    "allOf": [
                      {},
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "value must be an integer.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "value must be a non-blank string.",
                              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ]
                        }
                      }
                    ],
                    "description": "value must be seq of maps in which ids are unique"
                  },
                  "width": {
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/cards": {
      "put": {
        "summary": "PUT /dashboard/{id}/cards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cards": {
                    "allOf": [
                      {},
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "col": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "parameter_mappings": {},
                            "row": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "series": {},
                            "size_x": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            },
                            "size_y": {
                              "description": "value must be an integer greater than zero.",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id",
                            "size_x",
                            "size_y",
                            "row",
                            "col"
                          ]
                        }
                      }
                    ],
                    "description": "value must be seq of maps in which ids are unique"
                  },
                  "tabs": {
                    "allOf": [
                      {},
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "value must be an integer.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "value must be a non-blank string.",
                              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ]
                        }
                      }
                    ],
                    "description": "value must be seq of maps in which ids are unique"
                  }
                },
                "required": [
                  "cards"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/params/{param-key}/search/{query}": {
      "get": {
        "summary": "GET /dashboard/{id}/params/{param-key}/search/{query}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "param-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/params/{param-key}/values": {
      "get": {
        "summary": "GET /dashboard/{id}/params/{param-key}/values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "param-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/query_metadata": {
      "get": {
        "summary": "GET /dashboard/{id}/query_metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/related": {
      "get": {
        "summary": "GET /dashboard/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/revert": {
      "post": {
        "summary": "POST /dashboard/{id}/revert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "revision_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "revision_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/revisions": {
      "get": {
        "summary": "GET /dashboard/{id}/revisions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/": {
      "get": {
        "summary": "GET /database/",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "schema": {
              "const": "tables"
            }
          },
          {
            "name": "include_analytics",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "saved",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exclude_uneditable_details",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_only_uploadable",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /database/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "auto_run_queries": {
                    "type": "boolean"
                  },
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "connection_source": {
                    "type": "string"
                  },
                  "details": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "engine": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "value must be a valid database engine."
                  },
                  "is_full_sync": {
                    "description": "value must be a valid boolean string ('true' or 'false')."
                  },
                  "is_on_demand": {
                    "description": "value must be a valid boolean string ('true' or 'false')."
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "schedules": {
                    "$ref": "#/components/schemas/metabase_sync_schedules_ExpandedSchedulesMap"
                  }
                },
                "required": [
                  "engine",
                  "name",
                  "details"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/database/sample_database": {
      "post": {
        "summary": "POST /database/sample_database",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/validate": {
      "post": {
        "summary": "POST /database/validate",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "details": {
                    "type": "object"
                  },
                  "engine": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "value must be a valid database engine."
                  }
                },
                "required": [
                  "engine",
                  "details"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/database/{id}": {
      "delete": {
        "summary": "DELETE /database/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /database/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "enum": [
                "tables",
                "tables.fields"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /database/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "auto_run_queries": {
                    "type": "boolean"
                  },
                  "cache_ttl": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "caveats": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "details": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "engine": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "value must be a valid database engine."
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "refingerprint": {
                    "type": "boolean"
                  },
                  "schedules": {
                    "$ref": "#/components/schemas/metabase_sync_schedules_ExpandedSchedulesMap"
                  },
                  "settings": {
                    "description": "Value must be a map.",
                    "type": "object"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/database/{id}/autocomplete_suggestions": {
      "get": {
        "summary": "GET /database/{id}/autocomplete_suggestions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "substring",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/card_autocomplete_suggestions": {
      "get": {
        "summary": "GET /database/{id}/card_autocomplete_suggestions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/discard_values": {
      "post": {
        "summary": "POST /database/{id}/discard_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/dismiss_spinner": {
      "post": {
        "summary": "POST /database/{id}/dismiss_spinner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/fields": {
      "get": {
        "summary": "GET /database/{id}/fields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/idfields": {
      "get": {
        "summary": "GET /database/{id}/idfields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/metadata": {
      "get": {
        "summary": "GET /database/{id}/metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "remove_inactive",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "skip_fields",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/persist": {
      "post": {
        "summary": "POST /database/{id}/persist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/rescan_values": {
      "post": {
        "summary": "POST /database/{id}/rescan_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/schema/": {
      "get": {
        "summary": "GET /database/{id}/schema/",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/schema/{schema}": {
      "get": {
        "summary": "GET /database/{id}/schema/{schema}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/schemas": {
      "get": {
        "summary": "GET /database/{id}/schemas",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/sync_schema": {
      "post": {
        "summary": "POST /database/{id}/sync_schema",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/syncable_schemas": {
      "get": {
        "summary": "GET /database/{id}/syncable_schemas",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/unpersist": {
      "post": {
        "summary": "POST /database/{id}/unpersist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{id}/usage_info": {
      "get": {
        "summary": "GET /database/{id}/usage_info",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{virtual-db}/datasets": {
      "get": {
        "summary": "GET /database/{virtual-db}/datasets",
        "parameters": [
          {
            "name": "virtual-db",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{virtual-db}/datasets/{schema}": {
      "get": {
        "summary": "GET /database/{virtual-db}/datasets/{schema}",
        "parameters": [
          {
            "name": "virtual-db",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{virtual-db}/metadata": {
      "get": {
        "summary": "GET /database/{virtual-db}/metadata",
        "parameters": [
          {
            "name": "virtual-db",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{virtual-db}/schema/{schema}": {
      "get": {
        "summary": "GET /database/{virtual-db}/schema/{schema}",
        "parameters": [
          {
            "name": "virtual-db",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/database/{virtual-db}/schemas": {
      "get": {
        "summary": "GET /database/{virtual-db}/schemas",
        "parameters": [
          {
            "name": "virtual-db",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/": {
      "post": {
        "summary": "POST /dataset/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "database": {
                    "type": "integer"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/native": {
      "post": {
        "summary": "POST /dataset/native",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "database": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "pretty": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "database"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/parameter/search/{query}": {
      "post": {
        "summary": "POST /dataset/parameter/search/{query}",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "field_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  },
                  "parameter": {
                    "description": "parameter must be a map with :id and :type keys",
                    "type": "object"
                  }
                },
                "required": [
                  "parameter"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/parameter/values": {
      "post": {
        "summary": "POST /dataset/parameter/values",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "field_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  },
                  "parameter": {
                    "description": "parameter must be a map with :id and :type keys",
                    "type": "object"
                  }
                },
                "required": [
                  "parameter"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/pivot": {
      "post": {
        "summary": "POST /dataset/pivot",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "database": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/query_metadata": {
      "post": {
        "summary": "POST /dataset/query_metadata",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "database": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "database"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/dataset/{export-format}": {
      "post": {
        "summary": "POST /dataset/{export-format}",
        "parameters": [
          {
            "name": "export-format",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "csv",
                "api",
                "xlsx",
                "json"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format_rows": {
                    "type": "boolean"
                  },
                  "query": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid JSON string."
                  },
                  "visualization_settings": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid JSON string."
                  }
                },
                "required": [
                  "query",
                  "visualization_settings"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/docs*": {
      "get": {
        "summary": "GET /docs*",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/email/": {
      "delete": {
        "summary": "DELETE /email/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /email/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "type": "object"
                  }
                },
                "required": [
                  "settings"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/email/test": {
      "post": {
        "summary": "POST /email/test",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/field%2C{field-name%2C:options}/values": {
      "get": {
        "summary": "GET /field/field%2C{field-name%2C:options}/values",
        "parameters": [
          {
            "name": "field-name%2C:options",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}": {
      "get": {
        "summary": "GET /field/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /field/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "caveats": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "coercion_strategy": {
                    "description": "value must be a valid coercion strategy (keyword or string)."
                  },
                  "description": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "display_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "fk_target_field_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "has_field_values": {
                    "$ref": "#/components/schemas/metabase_lib_schema_metadata_column_has_field_values"
                  },
                  "json_unfolding": {
                    "type": "boolean"
                  },
                  "nfc_path": {
                    "type": "array",
                    "items": {
                      "properties": null
                    }
                  },
                  "points_of_interest": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "semantic_type": {
                    "description": "value must be a valid field semantic or relation type (keyword or string)."
                  },
                  "settings": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "visibility_type": {
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/field/{id}/dimension": {
      "delete": {
        "summary": "DELETE /field/{id}/dimension",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /field/{id}/dimension",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dimension-name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "dimension-type": {
                    "type": "string"
                  },
                  "human_readable_field_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "dimension-type",
                  "dimension-name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/field/{id}/discard_values": {
      "post": {
        "summary": "POST /field/{id}/discard_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/related": {
      "get": {
        "summary": "GET /field/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/remapping/{remapped-id}": {
      "get": {
        "summary": "GET /field/{id}/remapping/{remapped-id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "remapped-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/rescan_values": {
      "post": {
        "summary": "POST /field/{id}/rescan_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/search/{search-id}": {
      "get": {
        "summary": "GET /field/{id}/search/{search-id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "search-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/summary": {
      "get": {
        "summary": "GET /field/{id}/summary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/field/{id}/values": {
      "get": {
        "summary": "GET /field/{id}/values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /field/{id}/values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "value-pairs": {
                    "type": "array",
                    "items": {
                      "properties": null
                    }
                  }
                },
                "required": [
                  "value-pairs"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/geojson/": {
      "get": {
        "summary": "GET /geojson/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/geojson/{key}": {
      "get": {
        "summary": "GET /geojson/{key}",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/google/settings": {
      "put": {
        "summary": "PUT /google/settings",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "google-auth-auto-create-accounts-domain": {
                    "type": "string"
                  },
                  "google-auth-client-id": {
                    "type": "string"
                  },
                  "google-auth-enabled": {
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/ldap/settings": {
      "put": {
        "summary": "PUT /ldap/settings",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "type": "object"
                  }
                },
                "required": [
                  "settings"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/legacy-metric/": {
      "get": {
        "summary": "GET /legacy-metric/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /legacy-metric/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition": {
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "table_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "table_id",
                  "definition"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/legacy-metric/{id}": {
      "delete": {
        "summary": "DELETE /legacy-metric/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "revision_message",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /legacy-metric/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /legacy-metric/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "caveats": {
                    "type": "string"
                  },
                  "definition": {
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "how_is_this_calculated": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "revision_message": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "show_in_getting_started": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "revision_message"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/legacy-metric/{id}/important_fields": {
      "put": {
        "summary": "PUT /legacy-metric/{id}/important_fields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "important_field_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  }
                },
                "required": [
                  "important_field_ids"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/legacy-metric/{id}/related": {
      "get": {
        "summary": "GET /legacy-metric/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/legacy-metric/{id}/revert": {
      "post": {
        "summary": "POST /legacy-metric/{id}/revert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "revision_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "revision_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/legacy-metric/{id}/revisions": {
      "get": {
        "summary": "GET /legacy-metric/{id}/revisions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/login-history/current": {
      "get": {
        "summary": "GET /login-history/current",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/metabot/database/{database-id}": {
      "post": {
        "summary": "POST /metabot/database/{database-id}",
        "parameters": [
          {
            "name": "database-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "question": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "question"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/metabot/database/{database-id}/query": {
      "post": {
        "summary": "POST /metabot/database/{database-id}/query",
        "parameters": [
          {
            "name": "database-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "question": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "question"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/metabot/feedback": {
      "post": {
        "summary": "POST /metabot/feedback",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/metabot/model/{model-id}": {
      "post": {
        "summary": "POST /metabot/model/{model-id}",
        "parameters": [
          {
            "name": "model-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "question": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "question"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/model-index/": {
      "get": {
        "summary": "GET /model-index/",
        "parameters": [
          {
            "name": "model_id",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /model-index/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "model_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "pk_ref": {},
                  "value_ref": {}
                },
                "required": [
                  "model_id",
                  "pk_ref",
                  "value_ref"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/model-index/{id}": {
      "delete": {
        "summary": "DELETE /model-index/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /model-index/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/native-query-snippet/": {
      "get": {
        "summary": "GET /native-query-snippet/",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /native-query-snippet/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "snippet names cannot include } or start with spaces"
                  }
                },
                "required": [
                  "content",
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/native-query-snippet/{id}": {
      "get": {
        "summary": "GET /native-query-snippet/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /native-query-snippet/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "snippet names cannot include } or start with spaces"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/permissions/graph": {
      "get": {
        "summary": "GET /permissions/graph",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /permissions/graph",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "type": "object"
                  },
                  "skip-graph": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/permissions/graph/db/{db-id}": {
      "get": {
        "summary": "GET /permissions/graph/db/{db-id}",
        "parameters": [
          {
            "name": "db-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/graph/group/{group-id}": {
      "get": {
        "summary": "GET /permissions/graph/group/{group-id}",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/group": {
      "get": {
        "summary": "GET /permissions/group",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /permissions/group",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/permissions/group/{group-id}": {
      "delete": {
        "summary": "DELETE /permissions/group/{group-id}",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /permissions/group/{group-id}",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/permissions/group/{id}": {
      "get": {
        "summary": "GET /permissions/group/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/membership": {
      "get": {
        "summary": "GET /permissions/membership",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /permissions/membership",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "group_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "is_group_manager": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "group_id",
                  "user_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/permissions/membership/{group-id}/clear": {
      "put": {
        "summary": "PUT /permissions/membership/{group-id}/clear",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/membership/{id}": {
      "delete": {
        "summary": "DELETE /permissions/membership/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /permissions/membership/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_group_manager": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "is_group_manager"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/persist/": {
      "get": {
        "summary": "GET /persist/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/persist/card/{card-id}": {
      "get": {
        "summary": "GET /persist/card/{card-id}",
        "parameters": [
          {
            "name": "card-id",
            "in": "path",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/persist/disable": {
      "post": {
        "summary": "POST /persist/disable",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/persist/enable": {
      "post": {
        "summary": "POST /persist/enable",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/persist/set-refresh-schedule": {
      "post": {
        "summary": "POST /persist/set-refresh-schedule",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cron": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "Value must be a string representing a cron schedule of format \u003cseconds\u003e \u003cminutes\u003e \u003chours\u003e \u003cday of month\u003e \u003cmonth\u003e \u003cday of week\u003e \u003cyear\u003e"
                  }
                },
                "required": [
                  "cron"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/persist/{persisted-info-id}": {
      "get": {
        "summary": "GET /persist/{persisted-info-id}",
        "parameters": [
          {
            "name": "persisted-info-id",
            "in": "path",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/card/{token}": {
      "get": {
        "summary": "GET /preview_embed/card/{token}",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/card/{token}/query": {
      "get": {
        "summary": "GET /preview_embed/card/{token}/query",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/dashboard/{token}": {
      "get": {
        "summary": "GET /preview_embed/dashboard/{token}",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
      "get": {
        "summary": "GET /preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/dashboard/{token}/params/{param-key}/values": {
      "get": {
        "summary": "GET /preview_embed/dashboard/{token}/params/{param-key}/values",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "param-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/pivot/card/{token}/query": {
      "get": {
        "summary": "GET /preview_embed/pivot/card/{token}/query",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}": {
      "get": {
        "summary": "GET /preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          },
          {
            "name": "dashcard-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "card-id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/revision/": {
      "get": {
        "summary": "GET /revision/",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "entity",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "card",
                "dashboard"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/revision/revert": {
      "post": {
        "summary": "POST /revision/revert",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entity": {
                    "type": "string"
                  },
                  "id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "revision_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "entity",
                  "revision_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/search/": {
      "get": {
        "summary": "GET /search/",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "search_native_query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "models",
            "in": "query",
            "schema": {
              "items": {
                "enum": [
                  "dashboard",
                  "table",
                  "dataset",
                  "segment",
                  "collection",
                  "database",
                  "action",
                  "indexed-entity",
                  "metric",
                  "card"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "last_edited_by",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "last_edited_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "model_ancestors",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "table_db_id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "filter_items_in_personal_collection",
            "in": "query",
            "schema": {
              "enum": [
                "only",
                "exclude"
              ],
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/search/models": {
      "get": {
        "summary": "GET /search/models",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "table-db-id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string",
              "description": "value must be a non-blank string."
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "last_edited_at",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "last_edited_by",
            "in": "query",
            "schema": {
              "items": {
                "description": "value must be an integer greater than zero.",
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "name": "search_native_query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/segment/": {
      "get": {
        "summary": "GET /segment/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /segment/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "definition": {
                    "description": "Value must be a map.",
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "table_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "table_id",
                  "definition"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/segment/{id}": {
      "delete": {
        "summary": "DELETE /segment/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "revision_message",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /segment/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /segment/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "caveats": {
                    "type": "string"
                  },
                  "definition": {
                    "type": "object"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "revision_message": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "show_in_getting_started": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "revision_message"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/segment/{id}/related": {
      "get": {
        "summary": "GET /segment/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/segment/{id}/revert": {
      "post": {
        "summary": "POST /segment/{id}/revert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "revision_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  }
                },
                "required": [
                  "revision_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/segment/{id}/revisions": {
      "get": {
        "summary": "GET /segment/{id}/revisions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/setting/": {
      "get": {
        "summary": "GET /setting/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /setting/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "type": "object"
                  }
                },
                "required": [
                  "settings"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/setting/{key}": {
      "get": {
        "summary": "GET /setting/{key}",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /setting/{key}",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/setup/": {
      "post": {
        "summary": "POST /setup/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid email address."
                  },
                  "first_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "invited_email": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid email address."
                  },
                  "invited_first_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "invited_last_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "last_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "password": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "password is too common."
                  },
                  "site_locale": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "String must be a valid two-letter ISO language or language-country code e.g. en or en_US."
                  },
                  "site_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "token": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "Token does not match the setup token."
                  }
                },
                "required": [
                  "email",
                  "password",
                  "site_name",
                  "token"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/setup/admin_checklist": {
      "get": {
        "summary": "GET /setup/admin_checklist",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/setup/user_defaults": {
      "get": {
        "summary": "GET /setup/user_defaults",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack/manifest": {
      "get": {
        "summary": "GET /slack/manifest",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/slack/settings": {
      "put": {
        "summary": "PUT /slack/settings",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "slack-app-token": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "slack-files-channel": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/table/": {
      "get": {
        "summary": "GET /table/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /table/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "caveats": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "display_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "entity_type": {
                    "description": "value must be a valid entity type (keyword or string)."
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "show_in_getting_started": {
                    "type": "boolean"
                  },
                  "visibility_type": {
                    "type": "string"
                  }
                },
                "required": [
                  "ids"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/table/card__{id}/fks": {
      "get": {
        "summary": "GET /table/card__{id}/fks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/card__{id}/query_metadata": {
      "get": {
        "summary": "GET /table/card__{id}/query_metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}": {
      "get": {
        "summary": "GET /table/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /table/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "caveats": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "display_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "entity_type": {
                    "description": "value must be a valid entity type (keyword or string)."
                  },
                  "field_order": {
                    "type": "string"
                  },
                  "points_of_interest": {
                    "type": "string"
                  },
                  "show_in_getting_started": {
                    "type": "boolean"
                  },
                  "visibility_type": {
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/table/{id}/append-csv": {
      "post": {
        "summary": "POST /table/{id}/append-csv",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/discard_values": {
      "post": {
        "summary": "POST /table/{id}/discard_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/fields/order": {
      "put": {
        "summary": "PUT /table/{id}/fields/order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "field_order": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "properties": null
                    }
                  }
                },
                "required": [
                  "field_order"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/table/{id}/fks": {
      "get": {
        "summary": "GET /table/{id}/fks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/query_metadata": {
      "get": {
        "summary": "GET /table/{id}/query_metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_sensitive_fields",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_hidden_fields",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "include_editable_data_model",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/related": {
      "get": {
        "summary": "GET /table/{id}/related",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/replace-csv": {
      "post": {
        "summary": "POST /table/{id}/replace-csv",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/table/{id}/rescan_values": {
      "post": {
        "summary": "POST /table/{id}/rescan_values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/task/": {
      "get": {
        "summary": "GET /task/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/task/info": {
      "get": {
        "summary": "GET /task/info",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "summary": "GET /task/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}": {
      "get": {
        "summary": "GET /tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}",
        "parameters": [
          {
            "name": "zoom",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "y",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lat-field",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lon-field",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/timeline-event/": {
      "post": {
        "summary": "POST /timeline-event/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "question_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "source": {
                    "type": "string"
                  },
                  "time_matters": {
                    "type": "boolean"
                  },
                  "timeline_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "timestamp": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid date string"
                  },
                  "timezone": {
                    "type": "string"
                  }
                },
                "required": [
                  "timestamp",
                  "timezone",
                  "name",
                  "timeline_id"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/timeline-event/{id}": {
      "delete": {
        "summary": "DELETE /timeline-event/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /timeline-event/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /timeline-event/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "time_matters": {
                    "type": "boolean"
                  },
                  "timeline_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "timestamp": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid date string"
                  },
                  "timezone": {
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/timeline/": {
      "get": {
        "summary": "GET /timeline/",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "schema": {
              "enum": [
                "events"
              ],
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /timeline/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "default": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/timeline/{id}": {
      "delete": {
        "summary": "DELETE /timeline/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /timeline/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "enum": [
                "events"
              ],
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "description": "value must be a valid date string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "description": "value must be a valid date string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /timeline/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "archived": {
                    "type": "boolean"
                  },
                  "collection_id": {
                    "description": "value must be an integer greater than zero.",
                    "type": "integer"
                  },
                  "default": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "summary": "GET /user/",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "schema": {
              "description": "value must be an integer greater than zero.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "include_deactivated",
            "in": "query",
            "schema": {
              "description": "value must be a valid boolean string ('true' or 'false').",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "POST /user/",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid email address."
                  },
                  "first_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "last_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "login_attributes": {
                    "description": "login attribute keys must be a keyword or string",
                    "type": "object"
                  },
                  "user_group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "value must be an integer greater than zero.",
                          "type": "integer"
                        },
                        "is_group_manager": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "summary": "GET /user/current",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/user/recipients": {
      "get": {
        "summary": "GET /user/recipients",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "summary": "DELETE /user/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GET /user/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "PUT /user/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "value must be a valid email address."
                  },
                  "first_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "is_group_manager": {
                    "type": "boolean"
                  },
                  "is_superuser": {
                    "type": "boolean"
                  },
                  "last_name": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "locale": {
                    "allOf": [
                      {
                        "description": "value must be a non-blank string.",
                        "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                      },
                      {}
                    ],
                    "description": "String must be a valid two-letter ISO language or language-country code e.g. en or en_US."
                  },
                  "login_attributes": {
                    "description": "login attribute keys must be a keyword or string",
                    "type": "object"
                  },
                  "user_group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "value must be an integer greater than zero.",
                          "type": "integer"
                        },
                        "is_group_manager": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                },
                "required": [],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/user/{id}/modal/{modal}": {
      "put": {
        "summary": "PUT /user/{id}/modal/{modal}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "modal",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}/password": {
      "put": {
        "summary": "PUT /user/{id}/password",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "password is too common."
                  }
                },
                "required": [
                  "password"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/user/{id}/reactivate": {
      "put": {
        "summary": "PUT /user/{id}/reactivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}/send_invite": {
      "post": {
        "summary": "POST /user/{id}/send_invite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/util/bug_report_details": {
      "get": {
        "summary": "GET /util/bug_report_details",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/util/diagnostic_info/connection_pool_info": {
      "get": {
        "summary": "GET /util/diagnostic_info/connection_pool_info",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/util/entity_id": {
      "post": {
        "summary": "POST /util/entity_id",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entity_ids": {
                    "type": "object"
                  }
                },
                "required": [
                  "entity_ids"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/util/logs": {
      "get": {
        "summary": "GET /util/logs",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/util/password_check": {
      "post": {
        "summary": "POST /util/password_check",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "allOf": [
                      {
                        "type": "string"
                      },
                      {}
                    ],
                    "description": "password is too common."
                  }
                },
                "required": [
                  "password"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/util/product-feedback": {
      "post": {
        "summary": "POST /util/product-feedback",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comments": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "email": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  },
                  "source": {
                    "description": "value must be a non-blank string.",
                    "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
                  }
                },
                "required": [
                  "source"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/util/random_token": {
      "get": {
        "summary": "GET /util/random_token",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/util/stats": {
      "get": {
        "summary": "GET /util/stats",
        "responses": {
          "200": {
            "description": "Default response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "metabase_analyze_fingerprint_schema_Fingerprint": {
        "properties": {
          "experimental": {
            "properties": {},
            "type": "object"
          },
          "global": {
            "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_GlobalFingerprint"
          },
          "type": {
            "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_TypeSpecificFingerprint"
          }
        },
        "type": "object"
      },
      "metabase_analyze_fingerprint_schema_GlobalFingerprint": {
        "properties": {
          "distinct-count": {
            "type": "integer"
          },
          "null": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Percent"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "type": "object"
      },
      "metabase_analyze_fingerprint_schema_NumberFingerprint": {
        "properties": {
          "avg": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "max": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "min": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "q1": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "q3": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "sd": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "type": "object"
      },
      "metabase_analyze_fingerprint_schema_Percent": {
        "allOf": [
          {
            "type": "number"
          },
          {}
        ]
      },
      "metabase_analyze_fingerprint_schema_TemporalFingerprint": {
        "properties": {
          "earliest": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "latest": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "type": "object"
      },
      "metabase_analyze_fingerprint_schema_TextFingerprint": {
        "properties": {
          "average-length": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "nullable": true
              }
            ]
          },
          "percent-email": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Percent"
              },
              {
                "nullable": true
              }
            ]
          },
          "percent-json": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Percent"
              },
              {
                "nullable": true
              }
            ]
          },
          "percent-state": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Percent"
              },
              {
                "nullable": true
              }
            ]
          },
          "percent-url": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Percent"
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "type": "object"
      },
      "metabase_analyze_fingerprint_schema_TypeSpecificFingerprint": {
        "allOf": [
          {
            "properties": {
              "type/DateTime": {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_TemporalFingerprint"
              },
              "type/Number": {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_NumberFingerprint"
              },
              "type/Text": {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_TextFingerprint"
              }
            },
            "type": "object"
          },
          {}
        ]
      },
      "metabase_analyze_query_results_MaybeUnnormalizedReference": {},
      "metabase_analyze_query_results_ResultColumnMetadata": {
        "properties": {
          "base_type": {
            "description": "value must be a valid field data type (keyword or string)."
          },
          "converted_timezone": {
            "$ref": "#/components/schemas/metabase_lib_schema_expression_temporal_timezone_id"
          },
          "description": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "nullable": true
              }
            ]
          },
          "display_name": {
            "type": "string"
          },
          "field_ref": {
            "$ref": "#/components/schemas/metabase_analyze_query_results_MaybeUnnormalizedReference"
          },
          "fingerprint": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_analyze_fingerprint_schema_Fingerprint"
              },
              {
                "nullable": true
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_lib_schema_id_field"
              },
              {
                "nullable": true
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "semantic_type": {
            "oneOf": [
              {
                "description": "value must be a valid field semantic or relation type (keyword or string)."
              },
              {
                "nullable": true
              }
            ]
          },
          "unit": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "value must be a keyword or string."
                  },
                  {}
                ]
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "required": [
          "name",
          "display_name",
          "base_type"
        ],
        "type": "object"
      },
      "metabase_analyze_query_results_ResultsMetadata": {
        "description": "value must be an array of valid results column metadata maps.",
        "oneOf": [
          {
            "items": {
              "$ref": "#/components/schemas/metabase_analyze_query_results_ResultColumnMetadata"
            },
            "type": "array"
          },
          {
            "nullable": true
          }
        ]
      },
      "metabase_api_card_card_type": {
        "enum": [
          "question",
          "metric",
          "model"
        ],
        "type": "string"
      },
      "metabase_lib_schema_common_non_blank_string": {
        "allOf": [
          {
            "minLength": 1,
            "type": "string"
          },
          {}
        ]
      },
      "metabase_lib_schema_expression_temporal_timezone_id": {
        "allOf": [
          {
            "$ref": "#/components/schemas/metabase_lib_schema_common_non_blank_string"
          },
          {
            "anyOf": [
              {
                "enum": [
                  "Africa/Abidjan",
                  "Africa/Accra",
                  "Africa/Addis_Ababa",
                  "Africa/Algiers",
                  "Africa/Asmara",
                  "Africa/Asmera",
                  "Africa/Bamako",
                  "Africa/Bangui",
                  "Africa/Banjul",
                  "Africa/Bissau",
                  "Africa/Blantyre",
                  "Africa/Brazzaville",
                  "Africa/Bujumbura",
                  "Africa/Cairo",
                  "Africa/Casablanca",
                  "Africa/Ceuta",
                  "Africa/Conakry",
                  "Africa/Dakar",
                  "Africa/Dar_es_Salaam",
                  "Africa/Djibouti",
                  "Africa/Douala",
                  "Africa/El_Aaiun",
                  "Africa/Freetown",
                  "Africa/Gaborone",
                  "Africa/Harare",
                  "Africa/Johannesburg",
                  "Africa/Juba",
                  "Africa/Kampala",
                  "Africa/Khartoum",
                  "Africa/Kigali",
                  "Africa/Kinshasa",
                  "Africa/Lagos",
                  "Africa/Libreville",
                  "Africa/Lome",
                  "Africa/Luanda",
                  "Africa/Lubumbashi",
                  "Africa/Lusaka",
                  "Africa/Malabo",
                  "Africa/Maputo",
                  "Africa/Maseru",
                  "Africa/Mbabane",
                  "Africa/Mogadishu",
                  "Africa/Monrovia",
                  "Africa/Nairobi",
                  "Africa/Ndjamena",
                  "Africa/Niamey",
                  "Africa/Nouakchott",
                  "Africa/Ouagadougou",
                  "Africa/Porto-Novo",
                  "Africa/Sao_Tome",
                  "Africa/Timbuktu",
                  "Africa/Tripoli",
                  "Africa/Tunis",
                  "Africa/Windhoek",
                  "America/Adak",
                  "America/Anchorage",
                  "America/Anguilla",
                  "America/Antigua",
                  "America/Araguaina",
                  "America/Argentina/Buenos_Aires",
                  "America/Argentina/Catamarca",
                  "America/Argentina/ComodRivadavia",
                  "America/Argentina/Cordoba",
                  "America/Argentina/Jujuy",
                  "America/Argentina/La_Rioja",
                  "America/Argentina/Mendoza",
                  "America/Argentina/Rio_Gallegos",
                  "America/Argentina/Salta",
                  "America/Argentina/San_Juan",
                  "America/Argentina/San_Luis",
                  "America/Argentina/Tucuman",
                  "America/Argentina/Ushuaia",
                  "America/Aruba",
                  "America/Asuncion",
                  "America/Atikokan",
                  "America/Atka",
                  "America/Bahia",
                  "America/Bahia_Banderas",
                  "America/Barbados",
                  "America/Belem",
                  "America/Belize",
                  "America/Blanc-Sablon",
                  "America/Boa_Vista",
                  "America/Bogota",
                  "America/Boise",
                  "America/Buenos_Aires",
                  "America/Cambridge_Bay",
                  "America/Campo_Grande",
                  "America/Cancun",
                  "America/Caracas",
                  "America/Catamarca",
                  "America/Cayenne",
                  "America/Cayman",
                  "America/Chicago",
                  "America/Chihuahua",
                  "America/Ciudad_Juarez",
                  "America/Coral_Harbour",
                  "America/Cordoba",
                  "America/Costa_Rica",
                  "America/Creston",
                  "America/Cuiaba",
                  "America/Curacao",
                  "America/Danmarkshavn",
                  "America/Dawson",
                  "America/Dawson_Creek",
                  "America/Denver",
                  "America/Detroit",
                  "America/Dominica",
                  "America/Edmonton",
                  "America/Eirunepe",
                  "America/El_Salvador",
                  "America/Ensenada",
                  "America/Fort_Nelson",
                  "America/Fort_Wayne",
                  "America/Fortaleza",
                  "America/Glace_Bay",
                  "America/Godthab",
                  "America/Goose_Bay",
                  "America/Grand_Turk",
                  "America/Grenada",
                  "America/Guadeloupe",
                  "America/Guatemala",
                  "America/Guayaquil",
                  "America/Guyana",
                  "America/Halifax",
                  "America/Havana",
                  "America/Hermosillo",
                  "America/Indiana/Indianapolis",
                  "America/Indiana/Knox",
                  "America/Indiana/Marengo",
                  "America/Indiana/Petersburg",
                  "America/Indiana/Tell_City",
                  "America/Indiana/Vevay",
                  "America/Indiana/Vincennes",
                  "America/Indiana/Winamac",
                  "America/Indianapolis",
                  "America/Inuvik",
                  "America/Iqaluit",
                  "America/Jamaica",
                  "America/Jujuy",
                  "America/Juneau",
                  "America/Kentucky/Louisville",
                  "America/Kentucky/Monticello",
                  "America/Knox_IN",
                  "America/Kralendijk",
                  "America/La_Paz",
                  "America/Lima",
                  "America/Los_Angeles",
                  "America/Louisville",
                  "America/Lower_Princes",
                  "America/Maceio",
                  "America/Managua",
                  "America/Manaus",
                  "America/Marigot",
                  "America/Martinique",
                  "America/Matamoros",
                  "America/Mazatlan",
                  "America/Mendoza",
                  "America/Menominee",
                  "America/Merida",
                  "America/Metlakatla",
                  "America/Mexico_City",
                  "America/Miquelon",
                  "America/Moncton",
                  "America/Monterrey",
                  "America/Montevideo",
                  "America/Montreal",
                  "America/Montserrat",
                  "America/Nassau",
                  "America/New_York",
                  "America/Nipigon",
                  "America/Nome",
                  "America/Noronha",
                  "America/North_Dakota/Beulah",
                  "America/North_Dakota/Center",
                  "America/North_Dakota/New_Salem",
                  "America/Nuuk",
                  "America/Ojinaga",
                  "America/Panama",
                  "America/Pangnirtung",
                  "America/Paramaribo",
                  "America/Phoenix",
                  "America/Port-au-Prince",
                  "America/Port_of_Spain",
                  "America/Porto_Acre",
                  "America/Porto_Velho",
                  "America/Puerto_Rico",
                  "America/Punta_Arenas",
                  "America/Rainy_River",
                  "America/Rankin_Inlet",
                  "America/Recife",
                  "America/Regina",
                  "America/Resolute",
                  "America/Rio_Branco",
                  "America/Rosario",
                  "America/Santa_Isabel",
                  "America/Santarem",
                  "America/Santiago",
                  "America/Santo_Domingo",
                  "America/Sao_Paulo",
                  "America/Scoresbysund",
                  "America/Shiprock",
                  "America/Sitka",
                  "America/St_Barthelemy",
                  "America/St_Johns",
                  "America/St_Kitts",
                  "America/St_Lucia",
                  "America/St_Thomas",
                  "America/St_Vincent",
                  "America/Swift_Current",
                  "America/Tegucigalpa",
                  "America/Thule",
                  "America/Thunder_Bay",
                  "America/Tijuana",
                  "America/Toronto",
                  "America/Tortola",
                  "America/Vancouver",
                  "America/Virgin",
                  "America/Whitehorse",
                  "America/Winnipeg",
                  "America/Yakutat",
                  "America/Yellowknife",
                  "Antarctica/Casey",
                  "Antarctica/Davis",
                  "Antarctica/DumontDUrville",
                  "Antarctica/Macquarie",
                  "Antarctica/Mawson",
                  "Antarctica/McMurdo",
                  "Antarctica/Palmer",
                  "Antarctica/Rothera",
                  "Antarctica/South_Pole",
                  "Antarctica/Syowa",
                  "Antarctica/Troll",
                  "Antarctica/Vostok",
                  "Arctic/Longyearbyen",
                  "Asia/Aden",
                  "Asia/Almaty",
                  "Asia/Amman",
                  "Asia/Anadyr",
                  "Asia/Aqtau",
                  "Asia/Aqtobe",
                  "Asia/Ashgabat",
                  "Asia/Ashkhabad",
                  "Asia/Atyrau",
                  "Asia/Baghdad",
                  "Asia/Bahrain",
                  "Asia/Baku",
                  "Asia/Bangkok",
                  "Asia/Barnaul",
                  "Asia/Beirut",
                  "Asia/Bishkek",
                  "Asia/Brunei",
                  "Asia/Calcutta",
                  "Asia/Chita",
                  "Asia/Choibalsan",
                  "Asia/Chongqing",
                  "Asia/Chungking",
                  "Asia/Colombo",
                  "Asia/Dacca",
                  "Asia/Damascus",
                  "Asia/Dhaka",
                  "Asia/Dili",
                  "Asia/Dubai",
                  "Asia/Dushanbe",
                  "Asia/Famagusta",
                  "Asia/Gaza",
                  "Asia/Harbin",
                  "Asia/Hebron",
                  "Asia/Ho_Chi_Minh",
                  "Asia/Hong_Kong",
                  "Asia/Hovd",
                  "Asia/Irkutsk",
                  "Asia/Istanbul",
                  "Asia/Jakarta",
                  "Asia/Jayapura",
                  "Asia/Jerusalem",
                  "Asia/Kabul",
                  "Asia/Kamchatka",
                  "Asia/Karachi",
                  "Asia/Kashgar",
                  "Asia/Kathmandu",
                  "Asia/Katmandu",
                  "Asia/Khandyga",
                  "Asia/Kolkata",
                  "Asia/Krasnoyarsk",
                  "Asia/Kuala_Lumpur",
                  "Asia/Kuching",
                  "Asia/Kuwait",
                  "Asia/Macao",
                  "Asia/Macau",
                  "Asia/Magadan",
                  "Asia/Makassar",
                  "Asia/Manila",
                  "Asia/Muscat",
                  "Asia/Nicosia",
                  "Asia/Novokuznetsk",
                  "Asia/Novosibirsk",
                  "Asia/Omsk",
                  "Asia/Oral",
                  "Asia/Phnom_Penh",
                  "Asia/Pontianak",
                  "Asia/Pyongyang",
                  "Asia/Qatar",
                  "Asia/Qostanay",
                  "Asia/Qyzylorda",
                  "Asia/Rangoon",
                  "Asia/Riyadh",
                  "Asia/Saigon",
                  "Asia/Sakhalin",
                  "Asia/Samarkand",
                  "Asia/Seoul",
                  "Asia/Shanghai",
                  "Asia/Singapore",
                  "Asia/Srednekolymsk",
                  "Asia/Taipei",
                  "Asia/Tashkent",
                  "Asia/Tbilisi",
                  "Asia/Tehran",
                  "Asia/Tel_Aviv",
                  "Asia/Thimbu",
                  "Asia/Thimphu",
                  "Asia/Tokyo",
                  "Asia/Tomsk",
                  "Asia/Ujung_Pandang",
                  "Asia/Ulaanbaatar",
                  "Asia/Ulan_Bator",
                  "Asia/Urumqi",
                  "Asia/Ust-Nera",
                  "Asia/Vientiane",
                  "Asia/Vladivostok",
                  "Asia/Yakutsk",
                  "Asia/Yangon",
                  "Asia/Yekaterinburg",
                  "Asia/Yerevan",
                  "Atlantic/Azores",
                  "Atlantic/Bermuda",
                  "Atlantic/Canary",
                  "Atlantic/Cape_Verde",
                  "Atlantic/Faeroe",
                  "Atlantic/Faroe",
                  "Atlantic/Jan_Mayen",
                  "Atlantic/Madeira",
                  "Atlantic/Reykjavik",
                  "Atlantic/South_Georgia",
                  "Atlantic/St_Helena",
                  "Atlantic/Stanley",
                  "Australia/ACT",
                  "Australia/Adelaide",
                  "Australia/Brisbane",
                  "Australia/Broken_Hill",
                  "Australia/Canberra",
                  "Australia/Currie",
                  "Australia/Darwin",
                  "Australia/Eucla",
                  "Australia/Hobart",
                  "Australia/LHI",
                  "Australia/Lindeman",
                  "Australia/Lord_Howe",
                  "Australia/Melbourne",
                  "Australia/NSW",
                  "Australia/North",
                  "Australia/Perth",
                  "Australia/Queensland",
                  "Australia/South",
                  "Australia/Sydney",
                  "Australia/Tasmania",
                  "Australia/Victoria",
                  "Australia/West",
                  "Australia/Yancowinna",
                  "Brazil/Acre",
                  "Brazil/DeNoronha",
                  "Brazil/East",
                  "Brazil/West",
                  "CET",
                  "CST6CDT",
                  "Canada/Atlantic",
                  "Canada/Central",
                  "Canada/Eastern",
                  "Canada/Mountain",
                  "Canada/Newfoundland",
                  "Canada/Pacific",
                  "Canada/Saskatchewan",
                  "Canada/Yukon",
                  "Chile/Continental",
                  "Chile/EasterIsland",
                  "Cuba",
                  "EET",
                  "EST5EDT",
                  "Egypt",
                  "Eire",
                  "Etc/GMT",
                  "Etc/GMT+0",
                  "Etc/GMT+1",
                  "Etc/GMT+10",
                  "Etc/GMT+11",
                  "Etc/GMT+12",
                  "Etc/GMT+2",
                  "Etc/GMT+3",
                  "Etc/GMT+4",
                  "Etc/GMT+5",
                  "Etc/GMT+6",
                  "Etc/GMT+7",
                  "Etc/GMT+8",
                  "Etc/GMT+9",
                  "Etc/GMT-0",
                  "Etc/GMT-1",
                  "Etc/GMT-10",
                  "Etc/GMT-11",
                  "Etc/GMT-12",
                  "Etc/GMT-13",
                  "Etc/GMT-14",
                  "Etc/GMT-2",
                  "Etc/GMT-3",
                  "Etc/GMT-4",
                  "Etc/GMT-5",
                  "Etc/GMT-6",
                  "Etc/GMT-7",
                  "Etc/GMT-8",
                  "Etc/GMT-9",
                  "Etc/GMT0",
                  "Etc/Greenwich",
                  "Etc/UCT",
                  "Etc/UTC",
                  "Etc/Universal",
                  "Etc/Zulu",
                  "Europe/Amsterdam",
                  "Europe/Andorra",
                  "Europe/Astrakhan",
                  "Europe/Athens",
                  "Europe/Belfast",
                  "Europe/Belgrade",
                  "Europe/Berlin",
                  "Europe/Bratislava",
                  "Europe/Brussels",
                  "Europe/Bucharest",
                  "Europe/Budapest",
                  "Europe/Busingen",
                  "Europe/Chisinau",
                  "Europe/Copenhagen",
                  "Europe/Dublin",
                  "Europe/Gibraltar",
                  "Europe/Guernsey",
                  "Europe/Helsinki",
                  "Europe/Isle_of_Man",
                  "Europe/Istanbul",
                  "Europe/Jersey",
                  "Europe/Kaliningrad",
                  "Europe/Kiev",
                  "Europe/Kirov",
                  "Europe/Kyiv",
                  "Europe/Lisbon",
                  "Europe/Ljubljana",
                  "Europe/London",
                  "Europe/Luxembourg",
                  "Europe/Madrid",
                  "Europe/Malta",
                  "Europe/Mariehamn",
                  "Europe/Minsk",
                  "Europe/Monaco",
                  "Europe/Moscow",
                  "Europe/Nicosia",
                  "Europe/Oslo",
                  "Europe/Paris",
                  "Europe/Podgorica",
                  "Europe/Prague",
                  "Europe/Riga",
                  "Europe/Rome",
                  "Europe/Samara",
                  "Europe/San_Marino",
                  "Europe/Sarajevo",
                  "Europe/Saratov",
                  "Europe/Simferopol",
                  "Europe/Skopje",
                  "Europe/Sofia",
                  "Europe/Stockholm",
                  "Europe/Tallinn",
                  "Europe/Tirane",
                  "Europe/Tiraspol",
                  "Europe/Ulyanovsk",
                  "Europe/Uzhgorod",
                  "Europe/Vaduz",
                  "Europe/Vatican",
                  "Europe/Vienna",
                  "Europe/Vilnius",
                  "Europe/Volgograd",
                  "Europe/Warsaw",
                  "Europe/Zagreb",
                  "Europe/Zaporozhye",
                  "Europe/Zurich",
                  "GB",
                  "GB-Eire",
                  "GMT",
                  "GMT0",
                  "Greenwich",
                  "Hongkong",
                  "Iceland",
                  "Indian/Antananarivo",
                  "Indian/Chagos",
                  "Indian/Christmas",
                  "Indian/Cocos",
                  "Indian/Comoro",
                  "Indian/Kerguelen",
                  "Indian/Mahe",
                  "Indian/Maldives",
                  "Indian/Mauritius",
                  "Indian/Mayotte",
                  "Indian/Reunion",
                  "Iran",
                  "Israel",
                  "Jamaica",
                  "Japan",
                  "Kwajalein",
                  "Libya",
                  "MET",
                  "MST7MDT",
                  "Mexico/BajaNorte",
                  "Mexico/BajaSur",
                  "Mexico/General",
                  "NZ",
                  "NZ-CHAT",
                  "Navajo",
                  "PRC",
                  "PST8PDT",
                  "Pacific/Apia",
                  "Pacific/Auckland",
                  "Pacific/Bougainville",
                  "Pacific/Chatham",
                  "Pacific/Chuuk",
                  "Pacific/Easter",
                  "Pacific/Efate",
                  "Pacific/Enderbury",
                  "Pacific/Fakaofo",
                  "Pacific/Fiji",
                  "Pacific/Funafuti",
                  "Pacific/Galapagos",
                  "Pacific/Gambier",
                  "Pacific/Guadalcanal",
                  "Pacific/Guam",
                  "Pacific/Honolulu",
                  "Pacific/Johnston",
                  "Pacific/Kanton",
                  "Pacific/Kiritimati",
                  "Pacific/Kosrae",
                  "Pacific/Kwajalein",
                  "Pacific/Majuro",
                  "Pacific/Marquesas",
                  "Pacific/Midway",
                  "Pacific/Nauru",
                  "Pacific/Niue",
                  "Pacific/Norfolk",
                  "Pacific/Noumea",
                  "Pacific/Pago_Pago",
                  "Pacific/Palau",
                  "Pacific/Pitcairn",
                  "Pacific/Pohnpei",
                  "Pacific/Ponape",
                  "Pacific/Port_Moresby",
                  "Pacific/Rarotonga",
                  "Pacific/Saipan",
                  "Pacific/Samoa",
                  "Pacific/Tahiti",
                  "Pacific/Tarawa",
                  "Pacific/Tongatapu",
                  "Pacific/Truk",
                  "Pacific/Wake",
                  "Pacific/Wallis",
                  "Pacific/Yap",
                  "Poland",
                  "Portugal",
                  "ROK",
                  "Singapore",
                  "SystemV/AST4",
                  "SystemV/AST4ADT",
                  "SystemV/CST6",
                  "SystemV/CST6CDT",
                  "SystemV/EST5",
                  "SystemV/EST5EDT",
                  "SystemV/HST10",
                  "SystemV/MST7",
                  "SystemV/MST7MDT",
                  "SystemV/PST8",
                  "SystemV/PST8PDT",
                  "SystemV/YST9",
                  "SystemV/YST9YDT",
                  "Turkey",
                  "UCT",
                  "US/Alaska",
                  "US/Aleutian",
                  "US/Arizona",
                  "US/Central",
                  "US/East-Indiana",
                  "US/Eastern",
                  "US/Hawaii",
                  "US/Indiana-Starke",
                  "US/Michigan",
                  "US/Mountain",
                  "US/Pacific",
                  "US/Samoa",
                  "UTC",
                  "Universal",
                  "W-SU",
                  "WET",
                  "Zulu"
                ],
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/metabase_lib_schema_literal_string_zone_offset"
              }
            ]
          }
        ]
      },
      "metabase_lib_schema_id_field": {
        "minimum": 1,
        "type": "integer"
      },
      "metabase_lib_schema_literal_string_zone_offset": {
        "pattern": "(?:Z|(?:[+-]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,6})?)?))",
        "type": "string"
      },
      "metabase_lib_schema_metadata_column_has_field_values": {
        "enum": [
          "auto-list",
          "list",
          "none",
          "search"
        ],
        "type": "string"
      },
      "metabase_sync_schedules_ExpandedSchedulesMap": {
        "description": "value must be a valid map of schedule maps for a DB.",
        "properties": {
          "cache_field_values": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/metabase_util_cron_ScheduleMap"
              },
              {
                "nullable": true
              }
            ]
          },
          "metadata_sync": {
            "$ref": "#/components/schemas/metabase_util_cron_ScheduleMap"
          }
        },
        "type": "object"
      },
      "metabase_util_cron_CronHour": {
        "maximum": 23,
        "minimum": 0,
        "type": "integer"
      },
      "metabase_util_cron_CronMinute": {
        "maximum": 59,
        "minimum": 0,
        "type": "integer"
      },
      "metabase_util_cron_ScheduleMap": {
        "properties": {
          "schedule_day": {
            "type": "string"
          },
          "schedule_frame": {
            "type": "string"
          },
          "schedule_hour": {
            "type": "integer"
          },
          "schedule_minute": {
            "type": "integer"
          },
          "schedule_type": {
            "type": "string"
          }
        },
        "required": [
          "schedule_type"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "Metabase API",
    "version": "v0.50.31.3"
  },
  "openapi": "3.1.0"
}