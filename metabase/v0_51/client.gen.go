// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package schema

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for MetabaseApiCardCardType.
const (
	MetabaseApiCardCardTypeMetric   MetabaseApiCardCardType = "metric"
	MetabaseApiCardCardTypeModel    MetabaseApiCardCardType = "model"
	MetabaseApiCardCardTypeQuestion MetabaseApiCardCardType = "question"
)

// Defines values for MetabaseLibSchemaMetadataColumnHasFieldValues.
const (
	AutoList MetabaseLibSchemaMetadataColumnHasFieldValues = "auto-list"
	List     MetabaseLibSchemaMetadataColumnHasFieldValues = "list"
	None     MetabaseLibSchemaMetadataColumnHasFieldValues = "none"
	Search   MetabaseLibSchemaMetadataColumnHasFieldValues = "search"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityAdhoc   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntitySegment GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityTable   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "table"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityAdhoc   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntitySegment GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityTable   GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "table"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityAdhoc   GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntitySegment GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityTable   GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "table"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0All GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 = "all"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityAdhoc     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityField     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "field"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityMetric    GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "metric"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityModel     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "model"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityQuestion  GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "question"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntitySegment   GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTable     GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "table"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntityTransform GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity = "transform"
)

// Defines values for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity.
const (
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityAdhoc   GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "adhoc"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntitySegment GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "segment"
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntityTable   GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity = "table"
)

// Defines values for DeleteBookmarkModelIdParamsModel.
const (
	DeleteBookmarkModelIdParamsModelCard       DeleteBookmarkModelIdParamsModel = "card"
	DeleteBookmarkModelIdParamsModelCollection DeleteBookmarkModelIdParamsModel = "collection"
	DeleteBookmarkModelIdParamsModelDashboard  DeleteBookmarkModelIdParamsModel = "dashboard"
)

// Defines values for PostBookmarkModelIdParamsModel.
const (
	PostBookmarkModelIdParamsModelCard       PostBookmarkModelIdParamsModel = "card"
	PostBookmarkModelIdParamsModelCollection PostBookmarkModelIdParamsModel = "collection"
	PostBookmarkModelIdParamsModelDashboard  PostBookmarkModelIdParamsModel = "dashboard"
)

// Defines values for GetCacheParamsModel.
const (
	GetCacheParamsModelDashboard GetCacheParamsModel = "dashboard"
	GetCacheParamsModelDatabase  GetCacheParamsModel = "database"
	GetCacheParamsModelQuestion  GetCacheParamsModel = "question"
	GetCacheParamsModelRoot      GetCacheParamsModel = "root"
)

// Defines values for GetCardParamsF.
const (
	GetCardParamsFAll          GetCardParamsF = "all"
	GetCardParamsFArchived     GetCardParamsF = "archived"
	GetCardParamsFBookmarked   GetCardParamsF = "bookmarked"
	GetCardParamsFDatabase     GetCardParamsF = "database"
	GetCardParamsFMine         GetCardParamsF = "mine"
	GetCardParamsFTable        GetCardParamsF = "table"
	GetCardParamsFUsingMetric  GetCardParamsF = "using_metric"
	GetCardParamsFUsingModel   GetCardParamsF = "using_model"
	GetCardParamsFUsingSegment GetCardParamsF = "using_segment"
)

// Defines values for PostCardCardIdQueryExportFormatParamsExportFormat.
const (
	PostCardCardIdQueryExportFormatParamsExportFormatApi  PostCardCardIdQueryExportFormatParamsExportFormat = "api"
	PostCardCardIdQueryExportFormatParamsExportFormatCsv  PostCardCardIdQueryExportFormatParamsExportFormat = "csv"
	PostCardCardIdQueryExportFormatParamsExportFormatJson PostCardCardIdQueryExportFormatParamsExportFormat = "json"
	PostCardCardIdQueryExportFormatParamsExportFormatXlsx PostCardCardIdQueryExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetCardIdParamsContext.
const (
	GetCardIdParamsContextCollection GetCardIdParamsContext = "collection"
)

// Defines values for GetCollectionRootItemsParamsModels.
const (
	GetCollectionRootItemsParamsModelsCard       GetCollectionRootItemsParamsModels = "card"
	GetCollectionRootItemsParamsModelsCollection GetCollectionRootItemsParamsModels = "collection"
	GetCollectionRootItemsParamsModelsDashboard  GetCollectionRootItemsParamsModels = "dashboard"
	GetCollectionRootItemsParamsModelsDataset    GetCollectionRootItemsParamsModels = "dataset"
	GetCollectionRootItemsParamsModelsMetric     GetCollectionRootItemsParamsModels = "metric"
	GetCollectionRootItemsParamsModelsNoModels   GetCollectionRootItemsParamsModels = "no_models"
	GetCollectionRootItemsParamsModelsPulse      GetCollectionRootItemsParamsModels = "pulse"
	GetCollectionRootItemsParamsModelsSnippet    GetCollectionRootItemsParamsModels = "snippet"
	GetCollectionRootItemsParamsModelsTimeline   GetCollectionRootItemsParamsModels = "timeline"
)

// Defines values for GetCollectionRootItemsParamsPinnedState.
const (
	GetCollectionRootItemsParamsPinnedStateAll         GetCollectionRootItemsParamsPinnedState = "all"
	GetCollectionRootItemsParamsPinnedStateIsNotPinned GetCollectionRootItemsParamsPinnedState = "is_not_pinned"
	GetCollectionRootItemsParamsPinnedStateIsPinned    GetCollectionRootItemsParamsPinnedState = "is_pinned"
)

// Defines values for GetCollectionRootItemsParamsSortColumn.
const (
	GetCollectionRootItemsParamsSortColumnLastEditedAt GetCollectionRootItemsParamsSortColumn = "last_edited_at"
	GetCollectionRootItemsParamsSortColumnLastEditedBy GetCollectionRootItemsParamsSortColumn = "last_edited_by"
	GetCollectionRootItemsParamsSortColumnModel        GetCollectionRootItemsParamsSortColumn = "model"
	GetCollectionRootItemsParamsSortColumnName         GetCollectionRootItemsParamsSortColumn = "name"
)

// Defines values for GetCollectionRootItemsParamsSortDirection.
const (
	GetCollectionRootItemsParamsSortDirectionAsc  GetCollectionRootItemsParamsSortDirection = "asc"
	GetCollectionRootItemsParamsSortDirectionDesc GetCollectionRootItemsParamsSortDirection = "desc"
)

// Defines values for GetCollectionIdItemsParamsModels.
const (
	GetCollectionIdItemsParamsModelsCard       GetCollectionIdItemsParamsModels = "card"
	GetCollectionIdItemsParamsModelsCollection GetCollectionIdItemsParamsModels = "collection"
	GetCollectionIdItemsParamsModelsDashboard  GetCollectionIdItemsParamsModels = "dashboard"
	GetCollectionIdItemsParamsModelsDataset    GetCollectionIdItemsParamsModels = "dataset"
	GetCollectionIdItemsParamsModelsMetric     GetCollectionIdItemsParamsModels = "metric"
	GetCollectionIdItemsParamsModelsNoModels   GetCollectionIdItemsParamsModels = "no_models"
	GetCollectionIdItemsParamsModelsPulse      GetCollectionIdItemsParamsModels = "pulse"
	GetCollectionIdItemsParamsModelsSnippet    GetCollectionIdItemsParamsModels = "snippet"
	GetCollectionIdItemsParamsModelsTimeline   GetCollectionIdItemsParamsModels = "timeline"
)

// Defines values for GetCollectionIdItemsParamsPinnedState.
const (
	GetCollectionIdItemsParamsPinnedStateAll         GetCollectionIdItemsParamsPinnedState = "all"
	GetCollectionIdItemsParamsPinnedStateIsNotPinned GetCollectionIdItemsParamsPinnedState = "is_not_pinned"
	GetCollectionIdItemsParamsPinnedStateIsPinned    GetCollectionIdItemsParamsPinnedState = "is_pinned"
)

// Defines values for GetCollectionIdItemsParamsSortColumn.
const (
	GetCollectionIdItemsParamsSortColumnLastEditedAt GetCollectionIdItemsParamsSortColumn = "last_edited_at"
	GetCollectionIdItemsParamsSortColumnLastEditedBy GetCollectionIdItemsParamsSortColumn = "last_edited_by"
	GetCollectionIdItemsParamsSortColumnModel        GetCollectionIdItemsParamsSortColumn = "model"
	GetCollectionIdItemsParamsSortColumnName         GetCollectionIdItemsParamsSortColumn = "name"
)

// Defines values for GetCollectionIdItemsParamsSortDirection.
const (
	GetCollectionIdItemsParamsSortDirectionAsc  GetCollectionIdItemsParamsSortDirection = "asc"
	GetCollectionIdItemsParamsSortDirectionDesc GetCollectionIdItemsParamsSortDirection = "desc"
)

// Defines values for GetDashboardParamsF.
const (
	All      GetDashboardParamsF = "all"
	Archived GetDashboardParamsF = "archived"
	Mine     GetDashboardParamsF = "mine"
)

// Defines values for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat.
const (
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormatApi  PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat = "api"
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormatCsv  PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat = "csv"
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormatJson PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat = "json"
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormatXlsx PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetDatabaseIdParamsInclude.
const (
	Tables       GetDatabaseIdParamsInclude = "tables"
	TablesFields GetDatabaseIdParamsInclude = "tables.fields"
)

// Defines values for PostDatasetExportFormatParamsExportFormat.
const (
	PostDatasetExportFormatParamsExportFormatApi  PostDatasetExportFormatParamsExportFormat = "api"
	PostDatasetExportFormatParamsExportFormatCsv  PostDatasetExportFormatParamsExportFormat = "csv"
	PostDatasetExportFormatParamsExportFormatJson PostDatasetExportFormatParamsExportFormat = "json"
	PostDatasetExportFormatParamsExportFormatXlsx PostDatasetExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetEmbedCardTokenQueryExportFormatParamsExportFormat.
const (
	GetEmbedCardTokenQueryExportFormatParamsExportFormatApi  GetEmbedCardTokenQueryExportFormatParamsExportFormat = "api"
	GetEmbedCardTokenQueryExportFormatParamsExportFormatCsv  GetEmbedCardTokenQueryExportFormatParamsExportFormat = "csv"
	GetEmbedCardTokenQueryExportFormatParamsExportFormatJson GetEmbedCardTokenQueryExportFormatParamsExportFormat = "json"
	GetEmbedCardTokenQueryExportFormatParamsExportFormatXlsx GetEmbedCardTokenQueryExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat.
const (
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormatApi  GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "api"
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormatCsv  GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "csv"
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormatJson GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "json"
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormatXlsx GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetPublicCardUuidQueryExportFormatParamsExportFormat.
const (
	GetPublicCardUuidQueryExportFormatParamsExportFormatApi  GetPublicCardUuidQueryExportFormatParamsExportFormat = "api"
	GetPublicCardUuidQueryExportFormatParamsExportFormatCsv  GetPublicCardUuidQueryExportFormatParamsExportFormat = "csv"
	GetPublicCardUuidQueryExportFormatParamsExportFormatJson GetPublicCardUuidQueryExportFormatParamsExportFormat = "json"
	GetPublicCardUuidQueryExportFormatParamsExportFormatXlsx GetPublicCardUuidQueryExportFormatParamsExportFormat = "xlsx"
)

// Defines values for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat.
const (
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormatApi  PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "api"
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormatCsv  PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "csv"
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormatJson PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "json"
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormatXlsx PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat = "xlsx"
)

// Defines values for GetPublicOembedParamsFormat.
const (
	GetPublicOembedParamsFormatJson GetPublicOembedParamsFormat = "json"
)

// Defines values for GetRevisionParamsEntity.
const (
	GetRevisionParamsEntityCard      GetRevisionParamsEntity = "card"
	GetRevisionParamsEntityDashboard GetRevisionParamsEntity = "dashboard"
)

// Defines values for GetSearchParamsModels.
const (
	GetSearchParamsModelsAction        GetSearchParamsModels = "action"
	GetSearchParamsModelsCard          GetSearchParamsModels = "card"
	GetSearchParamsModelsCollection    GetSearchParamsModels = "collection"
	GetSearchParamsModelsDashboard     GetSearchParamsModels = "dashboard"
	GetSearchParamsModelsDatabase      GetSearchParamsModels = "database"
	GetSearchParamsModelsDataset       GetSearchParamsModels = "dataset"
	GetSearchParamsModelsIndexedEntity GetSearchParamsModels = "indexed-entity"
	GetSearchParamsModelsMetric        GetSearchParamsModels = "metric"
	GetSearchParamsModelsSegment       GetSearchParamsModels = "segment"
	GetSearchParamsModelsTable         GetSearchParamsModels = "table"
)

// Defines values for GetSearchParamsFilterItemsInPersonalCollection.
const (
	Exclude GetSearchParamsFilterItemsInPersonalCollection = "exclude"
	Only    GetSearchParamsFilterItemsInPersonalCollection = "only"
)

// Defines values for GetTimelineParamsInclude.
const (
	GetTimelineParamsIncludeEvents GetTimelineParamsInclude = "events"
)

// Defines values for GetTimelineIdParamsInclude.
const (
	GetTimelineIdParamsIncludeEvents GetTimelineIdParamsInclude = "events"
)

// MetabaseAnalyzeFingerprintSchemaFingerprint defines model for metabase_analyze_fingerprint_schema_Fingerprint.
type MetabaseAnalyzeFingerprintSchemaFingerprint struct {
	Experimental *map[string]interface{}                                  `json:"experimental,omitempty"`
	Global       *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint       `json:"global,omitempty"`
	Type         *MetabaseAnalyzeFingerprintSchemaTypeSpecificFingerprint `json:"type,omitempty"`
}

// MetabaseAnalyzeFingerprintSchemaGlobalFingerprint defines model for metabase_analyze_fingerprint_schema_GlobalFingerprint.
type MetabaseAnalyzeFingerprintSchemaGlobalFingerprint struct {
	DistinctCount *int                                                    `json:"distinct-count,omitempty"`
	Null          *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null `json:"null,omitempty"`
}

// MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1 defines model for .
type MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1 = interface{}

// MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null defines model for MetabaseAnalyzeFingerprintSchemaGlobalFingerprint.Null.
type MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint defines model for metabase_analyze_fingerprint_schema_NumberFingerprint.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint struct {
	Avg *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg `json:"avg,omitempty"`
	Max *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max `json:"max,omitempty"`
	Min *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min `json:"min,omitempty"`
	Q1  *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1  `json:"q1,omitempty"`
	Q3  *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3  `json:"q3,omitempty"`
	Sd  *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd  `json:"sd,omitempty"`
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Avg.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Max.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Min.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Q1.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Q3.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0 = float32

// MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1 defines model for .
type MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1 = interface{}

// MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd defines model for MetabaseAnalyzeFingerprintSchemaNumberFingerprint.Sd.
type MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaPercent defines model for metabase_analyze_fingerprint_schema_Percent.
type MetabaseAnalyzeFingerprintSchemaPercent = float32

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprint defines model for metabase_analyze_fingerprint_schema_TemporalFingerprint.
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprint struct {
	Earliest *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest `json:"earliest,omitempty"`
	Latest   *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest   `json:"latest,omitempty"`
}

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0 defines model for .
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0 = string

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest defines model for MetabaseAnalyzeFingerprintSchemaTemporalFingerprint.Earliest.
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0 defines model for .
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0 = string

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest defines model for MetabaseAnalyzeFingerprintSchemaTemporalFingerprint.Latest.
type MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint defines model for metabase_analyze_fingerprint_schema_TextFingerprint.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint struct {
	AverageLength *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength `json:"average-length,omitempty"`
	PercentEmail  *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail  `json:"percent-email,omitempty"`
	PercentJson   *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson   `json:"percent-json,omitempty"`
	PercentState  *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState  `json:"percent-state,omitempty"`
	PercentUrl    *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl    `json:"percent-url,omitempty"`
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0 = float32

// MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength defines model for MetabaseAnalyzeFingerprintSchemaTextFingerprint.AverageLength.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail defines model for MetabaseAnalyzeFingerprintSchemaTextFingerprint.PercentEmail.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson defines model for MetabaseAnalyzeFingerprintSchemaTextFingerprint.PercentJson.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState defines model for MetabaseAnalyzeFingerprintSchemaTextFingerprint.PercentState.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1 defines model for .
type MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1 = interface{}

// MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl defines model for MetabaseAnalyzeFingerprintSchemaTextFingerprint.PercentUrl.
type MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl struct {
	union json.RawMessage
}

// MetabaseAnalyzeFingerprintSchemaTypeSpecificFingerprint defines model for metabase_analyze_fingerprint_schema_TypeSpecificFingerprint.
type MetabaseAnalyzeFingerprintSchemaTypeSpecificFingerprint struct {
	TypeDateTime *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint `json:"type/DateTime,omitempty"`
	TypeNumber   *MetabaseAnalyzeFingerprintSchemaNumberFingerprint   `json:"type/Number,omitempty"`
	TypeText     *MetabaseAnalyzeFingerprintSchemaTextFingerprint     `json:"type/Text,omitempty"`
}

// MetabaseAnalyzeQueryResultsMaybeUnnormalizedReference defines model for metabase_analyze_query_results_MaybeUnnormalizedReference.
type MetabaseAnalyzeQueryResultsMaybeUnnormalizedReference = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata defines model for metabase_analyze_query_results_ResultColumnMetadata.
type MetabaseAnalyzeQueryResultsResultColumnMetadata struct {
	// BaseType value must be a valid field data type (keyword or string).
	BaseType          interface{}                                                   `json:"base_type"`
	ConvertedTimezone *MetabaseLibSchemaExpressionTemporalTimezoneId                `json:"converted_timezone,omitempty"`
	Description       *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description  `json:"description,omitempty"`
	DisplayName       string                                                        `json:"display_name"`
	FieldRef          *MetabaseAnalyzeQueryResultsMaybeUnnormalizedReference        `json:"field_ref,omitempty"`
	Fingerprint       *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint  `json:"fingerprint,omitempty"`
	Id                *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id           `json:"id,omitempty"`
	Name              string                                                        `json:"name"`
	SemanticType      *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType `json:"semantic_type,omitempty"`
	Unit              *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit         `json:"unit,omitempty"`
}

// MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0 = string

// MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata_Description defines model for MetabaseAnalyzeQueryResultsResultColumnMetadata.Description.
type MetabaseAnalyzeQueryResultsResultColumnMetadata_Description struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint defines model for MetabaseAnalyzeQueryResultsResultColumnMetadata.Fingerprint.
type MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultColumnMetadataId1 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataId1 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata_Id defines model for MetabaseAnalyzeQueryResultsResultColumnMetadata.Id.
type MetabaseAnalyzeQueryResultsResultColumnMetadata_Id struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0 value must be a valid field semantic or relation type (keyword or string).
type MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType defines model for MetabaseAnalyzeQueryResultsResultColumnMetadata.SemanticType.
type MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1 defines model for .
type MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1 = interface{}

// MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit defines model for MetabaseAnalyzeQueryResultsResultColumnMetadata.Unit.
type MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultsMetadata value must be an array of valid results column metadata maps.
type MetabaseAnalyzeQueryResultsResultsMetadata struct {
	union json.RawMessage
}

// MetabaseAnalyzeQueryResultsResultsMetadata0 defines model for .
type MetabaseAnalyzeQueryResultsResultsMetadata0 = []MetabaseAnalyzeQueryResultsResultColumnMetadata

// MetabaseAnalyzeQueryResultsResultsMetadata1 defines model for .
type MetabaseAnalyzeQueryResultsResultsMetadata1 = interface{}

// MetabaseApiCardCardType defines model for metabase_api_card_card_type.
type MetabaseApiCardCardType string

// MetabaseLibSchemaCommonNonBlankString defines model for metabase_lib_schema_common_non_blank_string.
type MetabaseLibSchemaCommonNonBlankString = string

// MetabaseLibSchemaExpressionTemporalTimezoneId defines model for metabase_lib_schema_expression_temporal_timezone_id.
type MetabaseLibSchemaExpressionTemporalTimezoneId = interface{}

// MetabaseLibSchemaIdField defines model for metabase_lib_schema_id_field.
type MetabaseLibSchemaIdField = int

// MetabaseLibSchemaLiteralStringZoneOffset defines model for metabase_lib_schema_literal_string_zone_offset.
type MetabaseLibSchemaLiteralStringZoneOffset = string

// MetabaseLibSchemaMetadataColumnHasFieldValues defines model for metabase_lib_schema_metadata_column_has_field_values.
type MetabaseLibSchemaMetadataColumnHasFieldValues string

// MetabaseSyncSchedulesExpandedSchedulesMap value must be a valid map of schedule maps for a DB.
type MetabaseSyncSchedulesExpandedSchedulesMap struct {
	CacheFieldValues *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues `json:"cache_field_values,omitempty"`
	MetadataSync     *MetabaseUtilCronScheduleMap                                `json:"metadata_sync,omitempty"`
}

// MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1 defines model for .
type MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1 = interface{}

// MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues defines model for MetabaseSyncSchedulesExpandedSchedulesMap.CacheFieldValues.
type MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues struct {
	union json.RawMessage
}

// MetabaseUtilCronScheduleMap defines model for metabase_util_cron_ScheduleMap.
type MetabaseUtilCronScheduleMap struct {
	ScheduleDay    *string `json:"schedule_day,omitempty"`
	ScheduleFrame  *string `json:"schedule_frame,omitempty"`
	ScheduleHour   *int    `json:"schedule_hour,omitempty"`
	ScheduleMinute *int    `json:"schedule_minute,omitempty"`
	ScheduleType   string  `json:"schedule_type"`
}

// GetActionParams defines parameters for GetAction.
type GetActionParams struct {
	ModelId *int `form:"model-id,omitempty" json:"model-id,omitempty"`
}

// PostActionJSONBody defines parameters for PostAction.
type PostActionJSONBody struct {
	// DatabaseId value must be an integer greater than zero.
	DatabaseId   *int                    `json:"database_id,omitempty"`
	DatasetQuery *map[string]interface{} `json:"dataset_query,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	ErrorHandle  *string                 `json:"error_handle,omitempty"`

	// Kind Unsupported implicit action kind
	Kind *string `json:"kind,omitempty"`

	// ModelId value must be an integer greater than zero.
	ModelId           int                       `json:"model_id"`
	Name              string                    `json:"name"`
	ParameterMappings *map[string]interface{}   `json:"parameter_mappings,omitempty"`
	Parameters        *[]map[string]interface{} `json:"parameters,omitempty"`
	ResponseHandle    *string                   `json:"response_handle,omitempty"`
	Template          *map[string]interface{}   `json:"template,omitempty"`

	// Type Unsupported action type
	Type                  *string                 `json:"type,omitempty"`
	VisualizationSettings *map[string]interface{} `json:"visualization_settings,omitempty"`
}

// GetActionActionIdExecuteParams defines parameters for GetActionActionIdExecute.
type GetActionActionIdExecuteParams struct {
	Parameters string `form:"parameters" json:"parameters"`
}

// PutActionIdJSONBody defines parameters for PutActionId.
type PutActionIdJSONBody struct {
	Action map[string]interface{} `json:"action"`
}

// PostActionIdExecuteJSONBody defines parameters for PostActionIdExecute.
type PostActionIdExecuteJSONBody struct {
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// PostActivityRecentsJSONBody defines parameters for PostActivityRecents.
type PostActivityRecentsJSONBody struct {
	Context string `json:"context"`
	Model   string `json:"model"`

	// ModelId value must be an integer greater than zero.
	ModelId int `json:"model_id"`
}

// GetAlertParams defines parameters for GetAlert.
type GetAlertParams struct {
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
	UserId   *int  `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// PostAlertJSONBody defines parameters for PostAlert.
type PostAlertJSONBody struct {
	AlertAboveGoal *bool  `json:"alert_above_goal,omitempty"`
	AlertCondition string `json:"alert_condition"`
	AlertFirstOnly bool   `json:"alert_first_only"`

	// Card value must be a map with the keys `include_csv`, `include_xls`, and `dashboard_card_id`.
	Card     map[string]interface{} `json:"card"`
	Channels interface{}            `json:"channels"`
}

// GetAlertQuestionIdParams defines parameters for GetAlertQuestionId.
type GetAlertQuestionIdParams struct {
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// PutAlertIdJSONBody defines parameters for PutAlertId.
type PutAlertIdJSONBody struct {
	AlertAboveGoal *bool   `json:"alert_above_goal,omitempty"`
	AlertCondition *string `json:"alert_condition,omitempty"`
	AlertFirstOnly *bool   `json:"alert_first_only,omitempty"`
	Archived       *bool   `json:"archived,omitempty"`

	// Card value must be a map with the keys `include_csv`, `include_xls`, and `dashboard_card_id`.
	Card     *map[string]interface{} `json:"card,omitempty"`
	Channels *interface{}            `json:"channels,omitempty"`
}

// PostApiKeyJSONBody defines parameters for PostApiKey.
type PostApiKeyJSONBody struct {
	// GroupId value must be an integer greater than zero.
	GroupId int                                   `json:"group_id"`
	Name    MetabaseLibSchemaCommonNonBlankString `json:"name"`
}

// PutApiKeyIdJSONBody defines parameters for PutApiKeyId.
type PutApiKeyIdJSONBody struct {
	// GroupId value must be an integer greater than zero.
	GroupId *int                                   `json:"group_id,omitempty"`
	Name    *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryParamsShow0 = interface{}

// GetAutomagicDashboardsEntityEntityIdOrQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata.
type GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams struct {
	Show *struct {
		union json.RawMessage
	} `form:"show,omitempty" json:"show,omitempty"`
}

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow0 string

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsShow1 = int

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity string

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity defines parameters for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery.
type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity string

// PutBookmarkOrderingJSONBody defines parameters for PutBookmarkOrdering.
type PutBookmarkOrderingJSONBody struct {
	Orderings []struct {
		// ItemId value must be an integer greater than zero.
		ItemId int    `json:"item_id"`
		Type   string `json:"type"`
	} `json:"orderings"`
}

// DeleteBookmarkModelIdParamsModel defines parameters for DeleteBookmarkModelId.
type DeleteBookmarkModelIdParamsModel string

// PostBookmarkModelIdParamsModel defines parameters for PostBookmarkModelId.
type PostBookmarkModelIdParamsModel string

// DeleteCacheJSONBody defines parameters for DeleteCache.
type DeleteCacheJSONBody struct {
	Model   string `json:"model"`
	ModelId []int  `json:"model_id"`
}

// GetCacheParams defines parameters for GetCache.
type GetCacheParams struct {
	Model      []GetCacheParamsModel `form:"model" json:"model"`
	Collection *int                  `form:"collection,omitempty" json:"collection,omitempty"`
	Id         *int                  `form:"id,omitempty" json:"id,omitempty"`
}

// GetCacheParamsModel defines parameters for GetCache.
type GetCacheParamsModel string

// PutCacheJSONBody defines parameters for PutCache.
type PutCacheJSONBody struct {
	Model string `json:"model"`

	// ModelId value must be an integer greater than zero.
	ModelId  int                    `json:"model_id"`
	Strategy map[string]interface{} `json:"strategy"`
}

// PostCacheInvalidateParams defines parameters for PostCacheInvalidate.
type PostCacheInvalidateParams struct {
	Include   *interface{} `form:"include,omitempty" json:"include,omitempty"`
	Database  *[]int       `form:"database,omitempty" json:"database,omitempty"`
	Dashboard *[]int       `form:"dashboard,omitempty" json:"dashboard,omitempty"`
	Question  *[]int       `form:"question,omitempty" json:"question,omitempty"`
}

// GetCardParams defines parameters for GetCard.
type GetCardParams struct {
	F       *GetCardParamsF `form:"f,omitempty" json:"f,omitempty"`
	ModelId *int            `form:"model_id,omitempty" json:"model_id,omitempty"`
}

// GetCardParamsF defines parameters for GetCard.
type GetCardParamsF string

// PostCardJSONBody defines parameters for PostCard.
type PostCardJSONBody struct {
	// CacheTtl value must be an integer greater than zero.
	CacheTtl *int `json:"cache_ttl,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int `json:"collection_position,omitempty"`

	// DatasetQuery Value must be a map.
	DatasetQuery      map[string]interface{}                 `json:"dataset_query"`
	Description       *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	Display           MetabaseLibSchemaCommonNonBlankString  `json:"display"`
	Name              MetabaseLibSchemaCommonNonBlankString  `json:"name"`
	ParameterMappings *[]struct {
		// CardId value must be an integer greater than zero.
		CardId      *int                                  `json:"card_id,omitempty"`
		ParameterId MetabaseLibSchemaCommonNonBlankString `json:"parameter_id"`
		Target      interface{}                           `json:"target"`
	} `json:"parameter_mappings,omitempty"`
	Parameters *[]struct {
		Default            *interface{}                           `json:"default,omitempty"`
		Id                 MetabaseLibSchemaCommonNonBlankString  `json:"id"`
		Name               *string                                `json:"name,omitempty"`
		SectionId          *MetabaseLibSchemaCommonNonBlankString `json:"sectionId,omitempty"`
		Slug               *string                                `json:"slug,omitempty"`
		TemporalUnits      *[]interface{}                         `json:"temporal_units,omitempty"`
		Type               interface{}                            `json:"type"`
		ValuesSourceConfig *map[string]interface{}                `json:"values_source_config,omitempty"`
		ValuesSourceType   *interface{}                           `json:"values_source_type,omitempty"`
	} `json:"parameters,omitempty"`

	// ResultMetadata value must be an array of valid results column metadata maps.
	ResultMetadata *MetabaseAnalyzeQueryResultsResultsMetadata `json:"result_metadata,omitempty"`
	Type           *MetabaseApiCardCardType                    `json:"type,omitempty"`

	// VisualizationSettings Value must be a map.
	VisualizationSettings map[string]interface{} `json:"visualization_settings"`
}

// PostCardCollectionsJSONBody defines parameters for PostCardCollections.
type PostCardCollectionsJSONBody struct {
	CardIds []int `json:"card_ids"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`
}

// PostCardPivotCardIdQueryJSONBody defines parameters for PostCardPivotCardIdQuery.
type PostCardPivotCardIdQueryJSONBody struct {
	IgnoreCache *bool `json:"ignore_cache,omitempty"`
}

// PostCardCardIdQueryJSONBody defines parameters for PostCardCardIdQuery.
type PostCardCardIdQueryJSONBody struct {
	CollectionPreview *bool `json:"collection_preview,omitempty"`

	// DashboardId value must be an integer greater than zero.
	DashboardId *int  `json:"dashboard_id,omitempty"`
	IgnoreCache *bool `json:"ignore_cache,omitempty"`
}

// PostCardCardIdQueryExportFormatJSONBody defines parameters for PostCardCardIdQueryExportFormat.
type PostCardCardIdQueryExportFormatJSONBody struct {
	// FormatRows value must be a valid boolean string ('true' or 'false').
	FormatRows *interface{} `json:"format_rows,omitempty"`

	// Parameters value must be a valid JSON string.
	Parameters *string `json:"parameters,omitempty"`

	// PivotResults value must be a valid boolean string ('true' or 'false').
	PivotResults *interface{} `json:"pivot_results,omitempty"`
}

// PostCardCardIdQueryExportFormatParamsExportFormat defines parameters for PostCardCardIdQueryExportFormat.
type PostCardCardIdQueryExportFormatParamsExportFormat string

// GetCardIdParams defines parameters for GetCardId.
type GetCardIdParams struct {
	IgnoreView *bool                   `form:"ignore_view,omitempty" json:"ignore_view,omitempty"`
	Context    *GetCardIdParamsContext `form:"context,omitempty" json:"context,omitempty"`
}

// GetCardIdParamsContext defines parameters for GetCardId.
type GetCardIdParamsContext string

// PutCardIdJSONBody defines parameters for PutCardId.
type PutCardIdJSONBody struct {
	Archived *bool `json:"archived,omitempty"`

	// CacheTtl value must be an integer greater than zero.
	CacheTtl *int `json:"cache_ttl,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int  `json:"collection_position,omitempty"`
	CollectionPreview  *bool `json:"collection_preview,omitempty"`

	// DatasetQuery Value must be a map.
	DatasetQuery *map[string]interface{}                `json:"dataset_query,omitempty"`
	Description  *string                                `json:"description,omitempty"`
	Display      *MetabaseLibSchemaCommonNonBlankString `json:"display,omitempty"`

	// EmbeddingParams value must be a valid embedding params map.
	EmbeddingParams *interface{}                           `json:"embedding_params,omitempty"`
	EnableEmbedding *bool                                  `json:"enable_embedding,omitempty"`
	Name            *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
	Parameters      *[]struct {
		Default            *interface{}                           `json:"default,omitempty"`
		Id                 MetabaseLibSchemaCommonNonBlankString  `json:"id"`
		Name               *string                                `json:"name,omitempty"`
		SectionId          *MetabaseLibSchemaCommonNonBlankString `json:"sectionId,omitempty"`
		Slug               *string                                `json:"slug,omitempty"`
		TemporalUnits      *[]interface{}                         `json:"temporal_units,omitempty"`
		Type               interface{}                            `json:"type"`
		ValuesSourceConfig *map[string]interface{}                `json:"values_source_config,omitempty"`
		ValuesSourceType   *interface{}                           `json:"values_source_type,omitempty"`
	} `json:"parameters,omitempty"`

	// ResultMetadata value must be an array of valid results column metadata maps.
	ResultMetadata *MetabaseAnalyzeQueryResultsResultsMetadata `json:"result_metadata,omitempty"`
	Type           *MetabaseApiCardCardType                    `json:"type,omitempty"`

	// VisualizationSettings Value must be a map.
	VisualizationSettings *map[string]interface{} `json:"visualization_settings,omitempty"`
}

// GetCardIdSeriesParams defines parameters for GetCardIdSeries.
type GetCardIdSeriesParams struct {
	LastCursor *int                                   `form:"last_cursor,omitempty" json:"last_cursor,omitempty"`
	Query      *MetabaseLibSchemaCommonNonBlankString `form:"query,omitempty" json:"query,omitempty"`
	ExcludeIds *interface{}                           `form:"exclude_ids,omitempty" json:"exclude_ids,omitempty"`
}

// GetCardIdTimelinesParams defines parameters for GetCardIdTimelines.
type GetCardIdTimelinesParams struct {
	Include *interface{} `form:"include,omitempty" json:"include,omitempty"`
	Start   *string      `form:"start,omitempty" json:"start,omitempty"`
	End     *string      `form:"end,omitempty" json:"end,omitempty"`
}

// PostChannelJSONBody defines parameters for PostChannel.
type PostChannelJSONBody struct {
	Active      *bool                                  `json:"active,omitempty"`
	Description *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	Details     map[string]interface{}                 `json:"details"`
	Name        MetabaseLibSchemaCommonNonBlankString  `json:"name"`

	// Type Must be a namespaced channel. E.g: channel/http
	Type interface{} `json:"type"`
}

// PostChannelTestJSONBody defines parameters for PostChannelTest.
type PostChannelTestJSONBody struct {
	Details map[string]interface{} `json:"details"`

	// Type Must be a namespaced channel. E.g: channel/http
	Type interface{} `json:"type"`
}

// PutChannelIdJSONBody defines parameters for PutChannelId.
type PutChannelIdJSONBody struct {
	Active      *bool                                  `json:"active,omitempty"`
	Description *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	Details     *map[string]interface{}                `json:"details,omitempty"`
	Name        *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`

	// Type Must be a namespaced channel. E.g: channel/http
	Type *interface{} `json:"type,omitempty"`
}

// GetCollectionParams defines parameters for GetCollection.
type GetCollectionParams struct {
	Archived                    *bool                                  `form:"archived,omitempty" json:"archived,omitempty"`
	ExcludeOtherUserCollections *bool                                  `form:"exclude-other-user-collections,omitempty" json:"exclude-other-user-collections,omitempty"`
	Namespace                   *MetabaseLibSchemaCommonNonBlankString `form:"namespace,omitempty" json:"namespace,omitempty"`
	PersonalOnly                *bool                                  `form:"personal-only,omitempty" json:"personal-only,omitempty"`
}

// PostCollectionJSONBody defines parameters for PostCollection.
type PostCollectionJSONBody struct {
	AuthorityLevel *string                                `json:"authority_level,omitempty"`
	Description    *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	Name           MetabaseLibSchemaCommonNonBlankString  `json:"name"`
	Namespace      *MetabaseLibSchemaCommonNonBlankString `json:"namespace,omitempty"`

	// ParentId value must be an integer greater than zero.
	ParentId *int `json:"parent_id,omitempty"`
}

// GetCollectionGraphParams defines parameters for GetCollectionGraph.
type GetCollectionGraphParams struct {
	Namespace *MetabaseLibSchemaCommonNonBlankString `form:"namespace,omitempty" json:"namespace,omitempty"`
}

// PutCollectionGraphJSONBody defines parameters for PutCollectionGraph.
type PutCollectionGraphJSONBody struct {
	Groups    map[string]interface{}                 `json:"groups"`
	Namespace *MetabaseLibSchemaCommonNonBlankString `json:"namespace,omitempty"`

	// Revision value must be an integer.
	Revision int `json:"revision"`

	// SkipGraph value must be a valid boolean string ('true' or 'false').
	SkipGraph *interface{} `json:"skip_graph,omitempty"`
}

// GetCollectionRootParams defines parameters for GetCollectionRoot.
type GetCollectionRootParams struct {
	Namespace *MetabaseLibSchemaCommonNonBlankString `form:"namespace,omitempty" json:"namespace,omitempty"`
}

// GetCollectionRootItemsParams defines parameters for GetCollectionRootItems.
type GetCollectionRootItemsParams struct {
	Models                   *[]GetCollectionRootItemsParamsModels      `form:"models,omitempty" json:"models,omitempty"`
	Archived                 *bool                                      `form:"archived,omitempty" json:"archived,omitempty"`
	Namespace                *MetabaseLibSchemaCommonNonBlankString     `form:"namespace,omitempty" json:"namespace,omitempty"`
	PinnedState              *GetCollectionRootItemsParamsPinnedState   `form:"pinned_state,omitempty" json:"pinned_state,omitempty"`
	SortColumn               *GetCollectionRootItemsParamsSortColumn    `form:"sort_column,omitempty" json:"sort_column,omitempty"`
	SortDirection            *GetCollectionRootItemsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`
	OfficialCollectionsFirst *bool                                      `form:"official_collections_first,omitempty" json:"official_collections_first,omitempty"`
}

// GetCollectionRootItemsParamsModels defines parameters for GetCollectionRootItems.
type GetCollectionRootItemsParamsModels string

// GetCollectionRootItemsParamsPinnedState defines parameters for GetCollectionRootItems.
type GetCollectionRootItemsParamsPinnedState string

// GetCollectionRootItemsParamsSortColumn defines parameters for GetCollectionRootItems.
type GetCollectionRootItemsParamsSortColumn string

// GetCollectionRootItemsParamsSortDirection defines parameters for GetCollectionRootItems.
type GetCollectionRootItemsParamsSortDirection string

// GetCollectionRootTimelinesParams defines parameters for GetCollectionRootTimelines.
type GetCollectionRootTimelinesParams struct {
	Include  *interface{} `form:"include,omitempty" json:"include,omitempty"`
	Archived *bool        `form:"archived,omitempty" json:"archived,omitempty"`
}

// GetCollectionTreeParams defines parameters for GetCollectionTree.
type GetCollectionTreeParams struct {
	ExcludeArchived             *bool                                  `form:"exclude-archived,omitempty" json:"exclude-archived,omitempty"`
	ExcludeOtherUserCollections *bool                                  `form:"exclude-other-user-collections,omitempty" json:"exclude-other-user-collections,omitempty"`
	Namespace                   *MetabaseLibSchemaCommonNonBlankString `form:"namespace,omitempty" json:"namespace,omitempty"`
	Shallow                     *bool                                  `form:"shallow,omitempty" json:"shallow,omitempty"`
	CollectionId                *int                                   `form:"collection-id,omitempty" json:"collection-id,omitempty"`
}

// PutCollectionIdJSONBody defines parameters for PutCollectionId.
type PutCollectionIdJSONBody struct {
	// Archived value must be a valid boolean string ('true' or 'false').
	Archived       *interface{}                           `json:"archived,omitempty"`
	AuthorityLevel *string                                `json:"authority_level,omitempty"`
	Description    *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	Name           *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`

	// ParentId value must be an integer greater than zero.
	ParentId *int `json:"parent_id,omitempty"`
}

// GetCollectionIdItemsParams defines parameters for GetCollectionIdItems.
type GetCollectionIdItemsParams struct {
	Models                   *[]GetCollectionIdItemsParamsModels      `form:"models,omitempty" json:"models,omitempty"`
	Archived                 *bool                                    `form:"archived,omitempty" json:"archived,omitempty"`
	PinnedState              *GetCollectionIdItemsParamsPinnedState   `form:"pinned_state,omitempty" json:"pinned_state,omitempty"`
	SortColumn               *GetCollectionIdItemsParamsSortColumn    `form:"sort_column,omitempty" json:"sort_column,omitempty"`
	SortDirection            *GetCollectionIdItemsParamsSortDirection `form:"sort_direction,omitempty" json:"sort_direction,omitempty"`
	OfficialCollectionsFirst *bool                                    `form:"official_collections_first,omitempty" json:"official_collections_first,omitempty"`
}

// GetCollectionIdItemsParamsModels defines parameters for GetCollectionIdItems.
type GetCollectionIdItemsParamsModels string

// GetCollectionIdItemsParamsPinnedState defines parameters for GetCollectionIdItems.
type GetCollectionIdItemsParamsPinnedState string

// GetCollectionIdItemsParamsSortColumn defines parameters for GetCollectionIdItems.
type GetCollectionIdItemsParamsSortColumn string

// GetCollectionIdItemsParamsSortDirection defines parameters for GetCollectionIdItems.
type GetCollectionIdItemsParamsSortDirection string

// GetCollectionIdTimelinesParams defines parameters for GetCollectionIdTimelines.
type GetCollectionIdTimelinesParams struct {
	Include  *interface{} `form:"include,omitempty" json:"include,omitempty"`
	Archived *bool        `form:"archived,omitempty" json:"archived,omitempty"`
}

// GetDashboardParams defines parameters for GetDashboard.
type GetDashboardParams struct {
	F *GetDashboardParamsF `form:"f,omitempty" json:"f,omitempty"`
}

// GetDashboardParamsF defines parameters for GetDashboard.
type GetDashboardParamsF string

// PostDashboardJSONBody defines parameters for PostDashboard.
type PostDashboardJSONBody struct {
	// CacheTtl value must be an integer greater than zero.
	CacheTtl *int `json:"cache_ttl,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int                                  `json:"collection_position,omitempty"`
	Description        *string                               `json:"description,omitempty"`
	Name               MetabaseLibSchemaCommonNonBlankString `json:"name"`
	Parameters         *[]struct {
		Default            *interface{}                           `json:"default,omitempty"`
		Id                 MetabaseLibSchemaCommonNonBlankString  `json:"id"`
		Name               *string                                `json:"name,omitempty"`
		SectionId          *MetabaseLibSchemaCommonNonBlankString `json:"sectionId,omitempty"`
		Slug               *string                                `json:"slug,omitempty"`
		TemporalUnits      *[]interface{}                         `json:"temporal_units,omitempty"`
		Type               interface{}                            `json:"type"`
		ValuesSourceConfig *map[string]interface{}                `json:"values_source_config,omitempty"`
		ValuesSourceType   *interface{}                           `json:"values_source_type,omitempty"`
	} `json:"parameters,omitempty"`
}

// PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody defines parameters for PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery.
type PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody struct {
	Parameters *[]interface{} `json:"parameters,omitempty"`
}

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody defines parameters for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery.
type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody struct {
	DashboardLoadId *MetabaseLibSchemaCommonNonBlankString `json:"dashboard_load_id,omitempty"`
	Parameters      *[]interface{}                         `json:"parameters,omitempty"`
}

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONBody defines parameters for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat.
type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONBody struct {
	// FormatRows value must be a valid boolean string ('true' or 'false').
	FormatRows *interface{} `json:"format_rows,omitempty"`

	// Parameters value must be a valid JSON string.
	Parameters *string `json:"parameters,omitempty"`

	// PivotResults value must be a valid boolean string ('true' or 'false').
	PivotResults *interface{} `json:"pivot_results,omitempty"`
}

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat defines parameters for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat.
type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat string

// GetDashboardDashboardIdDashcardDashcardIdExecuteParams defines parameters for GetDashboardDashboardIdDashcardDashcardIdExecute.
type GetDashboardDashboardIdDashcardDashcardIdExecuteParams struct {
	Parameters string `form:"parameters" json:"parameters"`
}

// PostDashboardDashboardIdDashcardDashcardIdExecuteJSONBody defines parameters for PostDashboardDashboardIdDashcardDashcardIdExecute.
type PostDashboardDashboardIdDashcardDashcardIdExecuteJSONBody struct {
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// PostDashboardFromDashboardIdCopyJSONBody defines parameters for PostDashboardFromDashboardIdCopy.
type PostDashboardFromDashboardIdCopyJSONBody struct {
	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int                                   `json:"collection_position,omitempty"`
	Description        *string                                `json:"description,omitempty"`
	IsDeepCopy         *bool                                  `json:"is_deep_copy,omitempty"`
	Name               *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
}

// PutDashboardIdJSONBody defines parameters for PutDashboardId.
type PutDashboardIdJSONBody struct {
	DashUpdates map[string]interface{} `json:"dash-updates"`
}

// PutDashboardIdCardsJSONBody defines parameters for PutDashboardIdCards.
type PutDashboardIdCardsJSONBody struct {
	// Cards value must be seq of maps in which ids are unique
	Cards interface{} `json:"cards"`

	// Tabs value must be seq of maps in which ids are unique
	Tabs *interface{} `json:"tabs,omitempty"`
}

// PostDashboardIdRevertJSONBody defines parameters for PostDashboardIdRevert.
type PostDashboardIdRevertJSONBody struct {
	// RevisionId value must be an integer greater than zero.
	RevisionId int `json:"revision_id"`
}

// GetDatabaseParams defines parameters for GetDatabase.
type GetDatabaseParams struct {
	Include                  *interface{} `form:"include,omitempty" json:"include,omitempty"`
	IncludeAnalytics         *bool        `form:"include_analytics,omitempty" json:"include_analytics,omitempty"`
	Saved                    *bool        `form:"saved,omitempty" json:"saved,omitempty"`
	IncludeEditableDataModel *bool        `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
	ExcludeUneditableDetails *bool        `form:"exclude_uneditable_details,omitempty" json:"exclude_uneditable_details,omitempty"`
	IncludeOnlyUploadable    *bool        `form:"include_only_uploadable,omitempty" json:"include_only_uploadable,omitempty"`
}

// PostDatabaseJSONBody defines parameters for PostDatabase.
type PostDatabaseJSONBody struct {
	AutoRunQueries *bool `json:"auto_run_queries,omitempty"`

	// CacheTtl value must be an integer greater than zero.
	CacheTtl         *int    `json:"cache_ttl,omitempty"`
	ConnectionSource *string `json:"connection_source,omitempty"`

	// Details Value must be a map.
	Details map[string]interface{} `json:"details"`

	// Engine value must be a valid database engine.
	Engine interface{} `json:"engine"`

	// IsFullSync value must be a valid boolean string ('true' or 'false').
	IsFullSync *interface{} `json:"is_full_sync,omitempty"`

	// IsOnDemand value must be a valid boolean string ('true' or 'false').
	IsOnDemand *interface{}                          `json:"is_on_demand,omitempty"`
	Name       MetabaseLibSchemaCommonNonBlankString `json:"name"`

	// Schedules value must be a valid map of schedule maps for a DB.
	Schedules *MetabaseSyncSchedulesExpandedSchedulesMap `json:"schedules,omitempty"`
}

// PostDatabaseValidateJSONBody defines parameters for PostDatabaseValidate.
type PostDatabaseValidateJSONBody struct {
	Details map[string]interface{} `json:"details"`

	// Engine value must be a valid database engine.
	Engine interface{} `json:"engine"`
}

// GetDatabaseIdParams defines parameters for GetDatabaseId.
type GetDatabaseIdParams struct {
	Include *GetDatabaseIdParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetDatabaseIdParamsInclude defines parameters for GetDatabaseId.
type GetDatabaseIdParamsInclude string

// PutDatabaseIdJSONBody defines parameters for PutDatabaseId.
type PutDatabaseIdJSONBody struct {
	AutoRunQueries *bool `json:"auto_run_queries,omitempty"`

	// CacheTtl value must be an integer greater than zero.
	CacheTtl    *int    `json:"cache_ttl,omitempty"`
	Caveats     *string `json:"caveats,omitempty"`
	Description *string `json:"description,omitempty"`

	// Details Value must be a map.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Engine value must be a valid database engine.
	Engine           *interface{}                           `json:"engine,omitempty"`
	Name             *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
	PointsOfInterest *string                                `json:"points_of_interest,omitempty"`
	Refingerprint    *bool                                  `json:"refingerprint,omitempty"`

	// Schedules value must be a valid map of schedule maps for a DB.
	Schedules *MetabaseSyncSchedulesExpandedSchedulesMap `json:"schedules,omitempty"`

	// Settings Value must be a map.
	Settings *map[string]interface{} `json:"settings,omitempty"`
}

// GetDatabaseIdAutocompleteSuggestionsParams defines parameters for GetDatabaseIdAutocompleteSuggestions.
type GetDatabaseIdAutocompleteSuggestionsParams struct {
	Prefix    *MetabaseLibSchemaCommonNonBlankString `form:"prefix,omitempty" json:"prefix,omitempty"`
	Substring *MetabaseLibSchemaCommonNonBlankString `form:"substring,omitempty" json:"substring,omitempty"`
}

// GetDatabaseIdCardAutocompleteSuggestionsParams defines parameters for GetDatabaseIdCardAutocompleteSuggestions.
type GetDatabaseIdCardAutocompleteSuggestionsParams struct {
	Query MetabaseLibSchemaCommonNonBlankString `form:"query" json:"query"`
}

// GetDatabaseIdMetadataParams defines parameters for GetDatabaseIdMetadata.
type GetDatabaseIdMetadataParams struct {
	IncludeHidden            *bool `form:"include_hidden,omitempty" json:"include_hidden,omitempty"`
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
	RemoveInactive           *bool `form:"remove_inactive,omitempty" json:"remove_inactive,omitempty"`
	SkipFields               *bool `form:"skip_fields,omitempty" json:"skip_fields,omitempty"`
}

// GetDatabaseIdSchemaParams defines parameters for GetDatabaseIdSchema.
type GetDatabaseIdSchemaParams struct {
	IncludeHidden            *bool `form:"include_hidden,omitempty" json:"include_hidden,omitempty"`
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
}

// GetDatabaseIdSchemaSchemaParams defines parameters for GetDatabaseIdSchemaSchema.
type GetDatabaseIdSchemaSchemaParams struct {
	IncludeHidden            *bool `form:"include_hidden,omitempty" json:"include_hidden,omitempty"`
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
}

// GetDatabaseIdSchemasParams defines parameters for GetDatabaseIdSchemas.
type GetDatabaseIdSchemasParams struct {
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
	IncludeHidden            *bool `form:"include_hidden,omitempty" json:"include_hidden,omitempty"`
}

// PostDatasetJSONBody defines parameters for PostDataset.
type PostDatasetJSONBody struct {
	Database *int `json:"database,omitempty"`
}

// PostDatasetNativeJSONBody defines parameters for PostDatasetNative.
type PostDatasetNativeJSONBody struct {
	// Database value must be an integer greater than zero.
	Database int   `json:"database"`
	Pretty   *bool `json:"pretty,omitempty"`
}

// PostDatasetParameterSearchQueryJSONBody defines parameters for PostDatasetParameterSearchQuery.
type PostDatasetParameterSearchQueryJSONBody struct {
	FieldIds *[]int `json:"field_ids,omitempty"`

	// Parameter parameter must be a map with :id and :type keys
	Parameter map[string]interface{} `json:"parameter"`
}

// PostDatasetParameterValuesJSONBody defines parameters for PostDatasetParameterValues.
type PostDatasetParameterValuesJSONBody struct {
	FieldIds *[]int `json:"field_ids,omitempty"`

	// Parameter parameter must be a map with :id and :type keys
	Parameter map[string]interface{} `json:"parameter"`
}

// PostDatasetPivotJSONBody defines parameters for PostDatasetPivot.
type PostDatasetPivotJSONBody struct {
	// Database value must be an integer greater than zero.
	Database *int `json:"database,omitempty"`
}

// PostDatasetQueryMetadataJSONBody defines parameters for PostDatasetQueryMetadata.
type PostDatasetQueryMetadataJSONBody struct {
	// Database value must be an integer greater than zero.
	Database int `json:"database"`
}

// PostDatasetExportFormatJSONBody defines parameters for PostDatasetExportFormat.
type PostDatasetExportFormatJSONBody struct {
	// FormatRows value must be a valid boolean string ('true' or 'false').
	FormatRows *interface{} `json:"format_rows,omitempty"`

	// PivotResults value must be a valid boolean string ('true' or 'false').
	PivotResults *interface{} `json:"pivot_results,omitempty"`

	// Query value must be a valid JSON string.
	Query string `json:"query"`

	// VisualizationSettings value must be a valid JSON string.
	VisualizationSettings string `json:"visualization_settings"`
}

// PostDatasetExportFormatParamsExportFormat defines parameters for PostDatasetExportFormat.
type PostDatasetExportFormatParamsExportFormat string

// PutEmailJSONBody defines parameters for PutEmail.
type PutEmailJSONBody struct {
	Settings map[string]interface{} `json:"settings"`
}

// GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams defines parameters for GetEmbedCardTokenFieldFieldIdRemappingRemappedId.
type GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams defines parameters for GetEmbedCardTokenFieldFieldIdSearchSearchFieldId.
type GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
	Limit *int                                  `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEmbedCardTokenQueryExportFormatParams defines parameters for GetEmbedCardTokenQueryExportFormat.
type GetEmbedCardTokenQueryExportFormatParams struct {
	FormatRows   *bool `form:"format_rows,omitempty" json:"format_rows,omitempty"`
	PivotResults *bool `form:"pivot_results,omitempty" json:"pivot_results,omitempty"`
}

// GetEmbedCardTokenQueryExportFormatParamsExportFormat defines parameters for GetEmbedCardTokenQueryExportFormat.
type GetEmbedCardTokenQueryExportFormatParamsExportFormat string

// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams defines parameters for GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat.
type GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams struct {
	FormatRows   *bool `form:"format_rows,omitempty" json:"format_rows,omitempty"`
	PivotResults *bool `form:"pivot_results,omitempty" json:"pivot_results,omitempty"`
}

// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat defines parameters for GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat.
type GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat string

// GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams defines parameters for GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId.
type GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams defines parameters for GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId.
type GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
	Limit *int                                  `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFieldIdParams defines parameters for GetFieldId.
type GetFieldIdParams struct {
	IncludeEditableDataModel bool `form:"include_editable_data_model" json:"include_editable_data_model"`
}

// PutFieldIdJSONBody defines parameters for PutFieldId.
type PutFieldIdJSONBody struct {
	Caveats *MetabaseLibSchemaCommonNonBlankString `json:"caveats,omitempty"`

	// CoercionStrategy value must be a valid coercion strategy (keyword or string).
	CoercionStrategy *interface{}                           `json:"coercion_strategy,omitempty"`
	Description      *MetabaseLibSchemaCommonNonBlankString `json:"description,omitempty"`
	DisplayName      *MetabaseLibSchemaCommonNonBlankString `json:"display_name,omitempty"`

	// FkTargetFieldId value must be an integer greater than zero.
	FkTargetFieldId  *int                                           `json:"fk_target_field_id,omitempty"`
	HasFieldValues   *MetabaseLibSchemaMetadataColumnHasFieldValues `json:"has_field_values,omitempty"`
	JsonUnfolding    *bool                                          `json:"json_unfolding,omitempty"`
	NfcPath          *[]interface{}                                 `json:"nfc_path,omitempty"`
	PointsOfInterest *MetabaseLibSchemaCommonNonBlankString         `json:"points_of_interest,omitempty"`

	// SemanticType value must be a valid field semantic or relation type (keyword or string).
	SemanticType *interface{} `json:"semantic_type,omitempty"`

	// Settings Value must be a map.
	Settings       *map[string]interface{} `json:"settings,omitempty"`
	VisibilityType *string                 `json:"visibility_type,omitempty"`
}

// PostFieldIdDimensionJSONBody defines parameters for PostFieldIdDimension.
type PostFieldIdDimensionJSONBody struct {
	DimensionName MetabaseLibSchemaCommonNonBlankString `json:"dimension-name"`
	DimensionType string                                `json:"dimension-type"`

	// HumanReadableFieldId value must be an integer greater than zero.
	HumanReadableFieldId *int `json:"human_readable_field_id,omitempty"`
}

// GetFieldIdRemappingRemappedIdParams defines parameters for GetFieldIdRemappingRemappedId.
type GetFieldIdRemappingRemappedIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// GetFieldIdSearchSearchIdParams defines parameters for GetFieldIdSearchSearchId.
type GetFieldIdSearchSearchIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// PostFieldIdValuesJSONBody defines parameters for PostFieldIdValues.
type PostFieldIdValuesJSONBody struct {
	ValuePairs []interface{} `json:"value-pairs"`
}

// PutGoogleSettingsJSONBody defines parameters for PutGoogleSettings.
type PutGoogleSettingsJSONBody struct {
	GoogleAuthAutoCreateAccountsDomain *string `json:"google-auth-auto-create-accounts-domain,omitempty"`
	GoogleAuthClientId                 *string `json:"google-auth-client-id,omitempty"`
	GoogleAuthEnabled                  *bool   `json:"google-auth-enabled,omitempty"`
}

// PutLdapSettingsJSONBody defines parameters for PutLdapSettings.
type PutLdapSettingsJSONBody struct {
	Settings map[string]interface{} `json:"settings"`
}

// PostMetabotDatabaseDatabaseIdJSONBody defines parameters for PostMetabotDatabaseDatabaseId.
type PostMetabotDatabaseDatabaseIdJSONBody struct {
	Question MetabaseLibSchemaCommonNonBlankString `json:"question"`
}

// PostMetabotDatabaseDatabaseIdQueryJSONBody defines parameters for PostMetabotDatabaseDatabaseIdQuery.
type PostMetabotDatabaseDatabaseIdQueryJSONBody struct {
	Question MetabaseLibSchemaCommonNonBlankString `json:"question"`
}

// PostMetabotModelModelIdJSONBody defines parameters for PostMetabotModelModelId.
type PostMetabotModelModelIdJSONBody struct {
	Question MetabaseLibSchemaCommonNonBlankString `json:"question"`
}

// GetModelIndexParams defines parameters for GetModelIndex.
type GetModelIndexParams struct {
	ModelId int `form:"model_id" json:"model_id"`
}

// PostModelIndexJSONBody defines parameters for PostModelIndex.
type PostModelIndexJSONBody struct {
	// ModelId value must be an integer greater than zero.
	ModelId  int         `json:"model_id"`
	PkRef    interface{} `json:"pk_ref"`
	ValueRef interface{} `json:"value_ref"`
}

// GetNativeQuerySnippetParams defines parameters for GetNativeQuerySnippet.
type GetNativeQuerySnippetParams struct {
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// PostNativeQuerySnippetJSONBody defines parameters for PostNativeQuerySnippet.
type PostNativeQuerySnippetJSONBody struct {
	// CollectionId value must be an integer greater than zero.
	CollectionId *int    `json:"collection_id,omitempty"`
	Content      string  `json:"content"`
	Description  *string `json:"description,omitempty"`

	// Name snippet names cannot include } or start with spaces
	Name interface{} `json:"name"`
}

// PutNativeQuerySnippetIdJSONBody defines parameters for PutNativeQuerySnippetId.
type PutNativeQuerySnippetIdJSONBody struct {
	Archived *bool `json:"archived,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int    `json:"collection_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	Description  *string `json:"description,omitempty"`

	// Name snippet names cannot include } or start with spaces
	Name *interface{} `json:"name,omitempty"`
}

// PostNotifyDbIdJSONBody defines parameters for PostNotifyDbId.
type PostNotifyDbIdJSONBody struct {
	Scan *string `json:"scan,omitempty"`

	// TableId value must be an integer greater than zero.
	TableId   *int                                   `json:"table_id,omitempty"`
	TableName *MetabaseLibSchemaCommonNonBlankString `json:"table_name,omitempty"`
}

// PostNotifyDbIdNewTableJSONBody defines parameters for PostNotifyDbIdNewTable.
type PostNotifyDbIdNewTableJSONBody struct {
	SchemaName MetabaseLibSchemaCommonNonBlankString `json:"schema_name"`
	TableName  MetabaseLibSchemaCommonNonBlankString `json:"table_name"`
}

// PutPermissionsGraphJSONBody defines parameters for PutPermissionsGraph.
type PutPermissionsGraphJSONBody struct {
	Body      map[string]interface{} `json:"body"`
	SkipGraph *bool                  `json:"skip-graph,omitempty"`
}

// PostPermissionsGroupJSONBody defines parameters for PostPermissionsGroup.
type PostPermissionsGroupJSONBody struct {
	Name MetabaseLibSchemaCommonNonBlankString `json:"name"`
}

// PutPermissionsGroupGroupIdJSONBody defines parameters for PutPermissionsGroupGroupId.
type PutPermissionsGroupGroupIdJSONBody struct {
	Name MetabaseLibSchemaCommonNonBlankString `json:"name"`
}

// PostPermissionsMembershipJSONBody defines parameters for PostPermissionsMembership.
type PostPermissionsMembershipJSONBody struct {
	// GroupId value must be an integer greater than zero.
	GroupId        int   `json:"group_id"`
	IsGroupManager *bool `json:"is_group_manager,omitempty"`

	// UserId value must be an integer greater than zero.
	UserId int `json:"user_id"`
}

// PutPermissionsMembershipIdJSONBody defines parameters for PutPermissionsMembershipId.
type PutPermissionsMembershipIdJSONBody struct {
	IsGroupManager bool `json:"is_group_manager"`
}

// PostPersistSetRefreshScheduleJSONBody defines parameters for PostPersistSetRefreshSchedule.
type PostPersistSetRefreshScheduleJSONBody struct {
	// Cron Value must be a string representing a cron schedule of format <seconds> <minutes> <hours> <day of month> <month> <day of week> <year>
	Cron interface{} `json:"cron"`
}

// PostPublicActionUuidExecuteJSONBody defines parameters for PostPublicActionUuidExecute.
type PostPublicActionUuidExecuteJSONBody struct {
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams defines parameters for GetPublicCardUuidFieldFieldIdRemappingRemappedId.
type GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams defines parameters for GetPublicCardUuidFieldFieldIdSearchSearchFieldId.
type GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
	Limit *int                                  `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPublicCardUuidQueryParams defines parameters for GetPublicCardUuidQuery.
type GetPublicCardUuidQueryParams struct {
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`
}

// GetPublicCardUuidQueryExportFormatParamsExportFormat defines parameters for GetPublicCardUuidQueryExportFormat.
type GetPublicCardUuidQueryExportFormatParamsExportFormat string

// GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams defines parameters for GetPublicDashboardUuidDashcardDashcardIdCardCardId.
type GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams struct {
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`
}

// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONBody defines parameters for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat.
type PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONBody struct {
	// FormatRows value must be a valid boolean string ('true' or 'false').
	FormatRows *interface{} `json:"format_rows,omitempty"`

	// PivotResults value must be a valid boolean string ('true' or 'false').
	PivotResults *interface{} `json:"pivot_results,omitempty"`
}

// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams defines parameters for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat.
type PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams struct {
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`
}

// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat defines parameters for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat.
type PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat string

// GetPublicDashboardUuidDashcardDashcardIdExecuteParams defines parameters for GetPublicDashboardUuidDashcardDashcardIdExecute.
type GetPublicDashboardUuidDashcardDashcardIdExecuteParams struct {
	Parameters string `form:"parameters" json:"parameters"`
}

// PostPublicDashboardUuidDashcardDashcardIdExecuteJSONBody defines parameters for PostPublicDashboardUuidDashcardDashcardIdExecute.
type PostPublicDashboardUuidDashcardDashcardIdExecuteJSONBody struct {
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams defines parameters for GetPublicDashboardUuidFieldFieldIdRemappingRemappedId.
type GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
}

// GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams defines parameters for GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId.
type GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams struct {
	Value MetabaseLibSchemaCommonNonBlankString `form:"value" json:"value"`
	Limit *int                                  `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPublicOembedParams defines parameters for GetPublicOembed.
type GetPublicOembedParams struct {
	Url       MetabaseLibSchemaCommonNonBlankString `form:"url" json:"url"`
	Format    *GetPublicOembedParamsFormat          `form:"format,omitempty" json:"format,omitempty"`
	Maxheight *string                               `form:"maxheight,omitempty" json:"maxheight,omitempty"`
	Maxwidth  *string                               `form:"maxwidth,omitempty" json:"maxwidth,omitempty"`
}

// GetPublicOembedParamsFormat defines parameters for GetPublicOembed.
type GetPublicOembedParamsFormat string

// GetPublicPivotCardUuidQueryParams defines parameters for GetPublicPivotCardUuidQuery.
type GetPublicPivotCardUuidQueryParams struct {
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`
}

// GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams defines parameters for GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId.
type GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams struct {
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`
}

// GetPulseParams defines parameters for GetPulse.
type GetPulseParams struct {
	Archived           *bool `form:"archived,omitempty" json:"archived,omitempty"`
	DashboardId        *int  `form:"dashboard_id,omitempty" json:"dashboard_id,omitempty"`
	CreatorOrRecipient *bool `form:"creator_or_recipient,omitempty" json:"creator_or_recipient,omitempty"`
}

// PostPulseJSONBody defines parameters for PostPulse.
type PostPulseJSONBody struct {
	Cards    interface{} `json:"cards"`
	Channels interface{} `json:"channels"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int `json:"collection_position,omitempty"`

	// DashboardId value must be an integer greater than zero.
	DashboardId *int                                  `json:"dashboard_id,omitempty"`
	Name        MetabaseLibSchemaCommonNonBlankString `json:"name"`
	Parameters  *[]map[string]interface{}             `json:"parameters,omitempty"`
	SkipIfEmpty *bool                                 `json:"skip_if_empty,omitempty"`
}

// PostPulseTestJSONBody defines parameters for PostPulseTest.
type PostPulseTestJSONBody struct {
	Cards    interface{} `json:"cards"`
	Channels interface{} `json:"channels"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int `json:"collection_id,omitempty"`

	// CollectionPosition value must be an integer greater than zero.
	CollectionPosition *int `json:"collection_position,omitempty"`

	// DashboardId value must be an integer greater than zero.
	DashboardId *int                                  `json:"dashboard_id,omitempty"`
	Name        MetabaseLibSchemaCommonNonBlankString `json:"name"`
	SkipIfEmpty *bool                                 `json:"skip_if_empty,omitempty"`
}

// PutPulseIdJSONBody defines parameters for PutPulseId.
type PutPulseIdJSONBody struct {
	Archived *bool        `json:"archived,omitempty"`
	Cards    *interface{} `json:"cards,omitempty"`
	Channels *interface{} `json:"channels,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int                                   `json:"collection_id,omitempty"`
	Name         *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
	Parameters   *[]map[string]interface{}              `json:"parameters,omitempty"`
	SkipIfEmpty  *bool                                  `json:"skip_if_empty,omitempty"`
}

// GetRevisionParams defines parameters for GetRevision.
type GetRevisionParams struct {
	Id     int                     `form:"id" json:"id"`
	Entity GetRevisionParamsEntity `form:"entity" json:"entity"`
}

// GetRevisionParamsEntity defines parameters for GetRevision.
type GetRevisionParamsEntity string

// PostRevisionRevertJSONBody defines parameters for PostRevisionRevert.
type PostRevisionRevertJSONBody struct {
	Entity string `json:"entity"`

	// Id value must be an integer greater than zero.
	Id int `json:"id"`

	// RevisionId value must be an integer greater than zero.
	RevisionId int `json:"revision_id"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	Archived                        *bool                                           `form:"archived,omitempty" json:"archived,omitempty"`
	Q                               *MetabaseLibSchemaCommonNonBlankString          `form:"q,omitempty" json:"q,omitempty"`
	Ids                             *[]int                                          `form:"ids,omitempty" json:"ids,omitempty"`
	SearchNativeQuery               *bool                                           `form:"search_native_query,omitempty" json:"search_native_query,omitempty"`
	Models                          *[]GetSearchParamsModels                        `form:"models,omitempty" json:"models,omitempty"`
	LastEditedBy                    *[]int                                          `form:"last_edited_by,omitempty" json:"last_edited_by,omitempty"`
	SearchEngine                    *string                                         `form:"search_engine,omitempty" json:"search_engine,omitempty"`
	LastEditedAt                    *MetabaseLibSchemaCommonNonBlankString          `form:"last_edited_at,omitempty" json:"last_edited_at,omitempty"`
	ModelAncestors                  *bool                                           `form:"model_ancestors,omitempty" json:"model_ancestors,omitempty"`
	TableDbId                       *int                                            `form:"table_db_id,omitempty" json:"table_db_id,omitempty"`
	FilterItemsInPersonalCollection *GetSearchParamsFilterItemsInPersonalCollection `form:"filter_items_in_personal_collection,omitempty" json:"filter_items_in_personal_collection,omitempty"`
	CreatedBy                       *[]int                                          `form:"created_by,omitempty" json:"created_by,omitempty"`
	Verified                        *bool                                           `form:"verified,omitempty" json:"verified,omitempty"`
	CreatedAt                       *MetabaseLibSchemaCommonNonBlankString          `form:"created_at,omitempty" json:"created_at,omitempty"`
}

// GetSearchParamsModels defines parameters for GetSearch.
type GetSearchParamsModels string

// GetSearchParamsFilterItemsInPersonalCollection defines parameters for GetSearch.
type GetSearchParamsFilterItemsInPersonalCollection string

// GetSearchModelsParams defines parameters for GetSearchModels.
type GetSearchModelsParams struct {
	Archived          *bool                                  `form:"archived,omitempty" json:"archived,omitempty"`
	SearchNativeQuery *bool                                  `form:"search_native_query,omitempty" json:"search_native_query,omitempty"`
	LastEditedBy      *[]int                                 `form:"last_edited_by,omitempty" json:"last_edited_by,omitempty"`
	SearchEngine      *string                                `form:"search_engine,omitempty" json:"search_engine,omitempty"`
	TableDbId         *int                                   `form:"table-db-id,omitempty" json:"table-db-id,omitempty"`
	LastEditedAt      *int                                   `form:"last_edited_at,omitempty" json:"last_edited_at,omitempty"`
	CreatedBy         *[]int                                 `form:"created_by,omitempty" json:"created_by,omitempty"`
	Verified          *bool                                  `form:"verified,omitempty" json:"verified,omitempty"`
	CreatedAt         *MetabaseLibSchemaCommonNonBlankString `form:"created_at,omitempty" json:"created_at,omitempty"`
}

// PostSegmentJSONBody defines parameters for PostSegment.
type PostSegmentJSONBody struct {
	// Definition Value must be a map.
	Definition  map[string]interface{}                `json:"definition"`
	Description *string                               `json:"description,omitempty"`
	Name        MetabaseLibSchemaCommonNonBlankString `json:"name"`

	// TableId value must be an integer greater than zero.
	TableId int `json:"table_id"`
}

// DeleteSegmentIdParams defines parameters for DeleteSegmentId.
type DeleteSegmentIdParams struct {
	RevisionMessage MetabaseLibSchemaCommonNonBlankString `form:"revision_message" json:"revision_message"`
}

// PutSegmentIdJSONBody defines parameters for PutSegmentId.
type PutSegmentIdJSONBody struct {
	Archived             *bool                                  `json:"archived,omitempty"`
	Caveats              *string                                `json:"caveats,omitempty"`
	Definition           *map[string]interface{}                `json:"definition,omitempty"`
	Description          *string                                `json:"description,omitempty"`
	Name                 *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
	PointsOfInterest     *string                                `json:"points_of_interest,omitempty"`
	RevisionMessage      MetabaseLibSchemaCommonNonBlankString  `json:"revision_message"`
	ShowInGettingStarted *bool                                  `json:"show_in_getting_started,omitempty"`
}

// PostSegmentIdRevertJSONBody defines parameters for PostSegmentIdRevert.
type PostSegmentIdRevertJSONBody struct {
	// RevisionId value must be an integer greater than zero.
	RevisionId int `json:"revision_id"`
}

// PostSessionJSONBody defines parameters for PostSession.
type PostSessionJSONBody struct {
	Password MetabaseLibSchemaCommonNonBlankString `json:"password"`
	Username MetabaseLibSchemaCommonNonBlankString `json:"username"`
}

// PostSessionForgotPasswordJSONBody defines parameters for PostSessionForgotPassword.
type PostSessionForgotPasswordJSONBody struct {
	// Email value must be a valid email address.
	Email string `json:"email"`
}

// PostSessionGoogleAuthJSONBody defines parameters for PostSessionGoogleAuth.
type PostSessionGoogleAuthJSONBody struct {
	Token MetabaseLibSchemaCommonNonBlankString `json:"token"`
}

// GetSessionPasswordResetTokenValidParams defines parameters for GetSessionPasswordResetTokenValid.
type GetSessionPasswordResetTokenValidParams struct {
	Token MetabaseLibSchemaCommonNonBlankString `form:"token" json:"token"`
}

// PostSessionPulseUnsubscribeJSONBody defines parameters for PostSessionPulseUnsubscribe.
type PostSessionPulseUnsubscribeJSONBody struct {
	Email string `json:"email"`
	Hash  string `json:"hash"`

	// PulseId value must be an integer greater than zero.
	PulseId int `json:"pulse-id"`
}

// PostSessionPulseUnsubscribeUndoJSONBody defines parameters for PostSessionPulseUnsubscribeUndo.
type PostSessionPulseUnsubscribeUndoJSONBody struct {
	Email string `json:"email"`
	Hash  string `json:"hash"`

	// PulseId value must be an integer greater than zero.
	PulseId int `json:"pulse-id"`
}

// PostSessionResetPasswordJSONBody defines parameters for PostSessionResetPassword.
type PostSessionResetPasswordJSONBody struct {
	// Password password is too common.
	Password string                                `json:"password"`
	Token    MetabaseLibSchemaCommonNonBlankString `json:"token"`
}

// PutSettingJSONBody defines parameters for PutSetting.
type PutSettingJSONBody struct {
	Settings map[string]interface{} `json:"settings"`
}

// PostSetupJSONBody defines parameters for PostSetup.
type PostSetupJSONBody struct {
	// Email value must be a valid email address.
	Email     string                                 `json:"email"`
	FirstName *MetabaseLibSchemaCommonNonBlankString `json:"first_name,omitempty"`

	// InvitedEmail value must be a valid email address.
	InvitedEmail     *string                                `json:"invited_email,omitempty"`
	InvitedFirstName *MetabaseLibSchemaCommonNonBlankString `json:"invited_first_name,omitempty"`
	InvitedLastName  *MetabaseLibSchemaCommonNonBlankString `json:"invited_last_name,omitempty"`
	LastName         *MetabaseLibSchemaCommonNonBlankString `json:"last_name,omitempty"`

	// Password password is too common.
	Password string `json:"password"`

	// SiteLocale String must be a valid two-letter ISO language or language-country code e.g. en or en_US.
	SiteLocale *interface{}                          `json:"site_locale,omitempty"`
	SiteName   MetabaseLibSchemaCommonNonBlankString `json:"site_name"`

	// Token Token does not match the setup token.
	Token interface{} `json:"token"`
}

// PutSlackSettingsJSONBody defines parameters for PutSlackSettings.
type PutSlackSettingsJSONBody struct {
	SlackAppToken     *MetabaseLibSchemaCommonNonBlankString `json:"slack-app-token,omitempty"`
	SlackFilesChannel *MetabaseLibSchemaCommonNonBlankString `json:"slack-files-channel,omitempty"`
}

// PutTableJSONBody defines parameters for PutTable.
type PutTableJSONBody struct {
	Caveats     *string                                `json:"caveats,omitempty"`
	Description *string                                `json:"description,omitempty"`
	DisplayName *MetabaseLibSchemaCommonNonBlankString `json:"display_name,omitempty"`

	// EntityType value must be a valid entity type (keyword or string).
	EntityType           *interface{} `json:"entity_type,omitempty"`
	Ids                  []int        `json:"ids"`
	PointsOfInterest     *string      `json:"points_of_interest,omitempty"`
	ShowInGettingStarted *bool        `json:"show_in_getting_started,omitempty"`
	VisibilityType       *string      `json:"visibility_type,omitempty"`
}

// GetTableIdParams defines parameters for GetTableId.
type GetTableIdParams struct {
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
}

// PutTableIdJSONBody defines parameters for PutTableId.
type PutTableIdJSONBody struct {
	Caveats     *string                                `json:"caveats,omitempty"`
	Description *string                                `json:"description,omitempty"`
	DisplayName *MetabaseLibSchemaCommonNonBlankString `json:"display_name,omitempty"`

	// EntityType value must be a valid entity type (keyword or string).
	EntityType           *interface{} `json:"entity_type,omitempty"`
	FieldOrder           *string      `json:"field_order,omitempty"`
	PointsOfInterest     *string      `json:"points_of_interest,omitempty"`
	ShowInGettingStarted *bool        `json:"show_in_getting_started,omitempty"`
	VisibilityType       *string      `json:"visibility_type,omitempty"`
}

// PutTableIdFieldsOrderJSONBody defines parameters for PutTableIdFieldsOrder.
type PutTableIdFieldsOrderJSONBody struct {
	FieldOrder []int `json:"field_order"`
}

// GetTableIdQueryMetadataParams defines parameters for GetTableIdQueryMetadata.
type GetTableIdQueryMetadataParams struct {
	IncludeSensitiveFields   *bool `form:"include_sensitive_fields,omitempty" json:"include_sensitive_fields,omitempty"`
	IncludeHiddenFields      *bool `form:"include_hidden_fields,omitempty" json:"include_hidden_fields,omitempty"`
	IncludeEditableDataModel *bool `form:"include_editable_data_model,omitempty" json:"include_editable_data_model,omitempty"`
}

// GetTilesZoomXYLatFieldLonFieldParams defines parameters for GetTilesZoomXYLatFieldLonField.
type GetTilesZoomXYLatFieldLonFieldParams struct {
	Query string `form:"query" json:"query"`
}

// PostTimelineEventJSONBody defines parameters for PostTimelineEvent.
type PostTimelineEventJSONBody struct {
	Archived    *bool                                 `json:"archived,omitempty"`
	Description *string                               `json:"description,omitempty"`
	Icon        *string                               `json:"icon,omitempty"`
	Name        MetabaseLibSchemaCommonNonBlankString `json:"name"`

	// QuestionId value must be an integer greater than zero.
	QuestionId  *int    `json:"question_id,omitempty"`
	Source      *string `json:"source,omitempty"`
	TimeMatters *bool   `json:"time_matters,omitempty"`

	// TimelineId value must be an integer greater than zero.
	TimelineId int `json:"timeline_id"`

	// Timestamp value must be a valid date string
	Timestamp string `json:"timestamp"`
	Timezone  string `json:"timezone"`
}

// PutTimelineEventIdJSONBody defines parameters for PutTimelineEventId.
type PutTimelineEventIdJSONBody struct {
	Archived    *bool                                  `json:"archived,omitempty"`
	Description *string                                `json:"description,omitempty"`
	Icon        *string                                `json:"icon,omitempty"`
	Name        *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
	TimeMatters *bool                                  `json:"time_matters,omitempty"`

	// TimelineId value must be an integer greater than zero.
	TimelineId *int `json:"timeline_id,omitempty"`

	// Timestamp value must be a valid date string
	Timestamp *string `json:"timestamp,omitempty"`
	Timezone  *string `json:"timezone,omitempty"`
}

// GetTimelineParams defines parameters for GetTimeline.
type GetTimelineParams struct {
	Include  *GetTimelineParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	Archived *bool                     `form:"archived,omitempty" json:"archived,omitempty"`
}

// GetTimelineParamsInclude defines parameters for GetTimeline.
type GetTimelineParamsInclude string

// PostTimelineJSONBody defines parameters for PostTimeline.
type PostTimelineJSONBody struct {
	Archived *bool `json:"archived,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int                                  `json:"collection_id,omitempty"`
	Default      *bool                                 `json:"default,omitempty"`
	Description  *string                               `json:"description,omitempty"`
	Icon         *string                               `json:"icon,omitempty"`
	Name         MetabaseLibSchemaCommonNonBlankString `json:"name"`
}

// GetTimelineIdParams defines parameters for GetTimelineId.
type GetTimelineIdParams struct {
	Include  *GetTimelineIdParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	Archived *bool                       `form:"archived,omitempty" json:"archived,omitempty"`
	Start    *string                     `form:"start,omitempty" json:"start,omitempty"`
	End      *string                     `form:"end,omitempty" json:"end,omitempty"`
}

// GetTimelineIdParamsInclude defines parameters for GetTimelineId.
type GetTimelineIdParamsInclude string

// PutTimelineIdJSONBody defines parameters for PutTimelineId.
type PutTimelineIdJSONBody struct {
	Archived *bool `json:"archived,omitempty"`

	// CollectionId value must be an integer greater than zero.
	CollectionId *int                                   `json:"collection_id,omitempty"`
	Default      *bool                                  `json:"default,omitempty"`
	Description  *string                                `json:"description,omitempty"`
	Icon         *string                                `json:"icon,omitempty"`
	Name         *MetabaseLibSchemaCommonNonBlankString `json:"name,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Status             *string `form:"status,omitempty" json:"status,omitempty"`
	Query              *string `form:"query,omitempty" json:"query,omitempty"`
	GroupId            *int    `form:"group_id,omitempty" json:"group_id,omitempty"`
	IncludeDeactivated *bool   `form:"include_deactivated,omitempty" json:"include_deactivated,omitempty"`
}

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	// Email value must be a valid email address.
	Email     string                                 `json:"email"`
	FirstName *MetabaseLibSchemaCommonNonBlankString `json:"first_name,omitempty"`
	LastName  *MetabaseLibSchemaCommonNonBlankString `json:"last_name,omitempty"`

	// LoginAttributes login attribute keys must be a keyword or string
	LoginAttributes      *map[string]interface{} `json:"login_attributes,omitempty"`
	UserGroupMemberships *[]struct {
		// Id value must be an integer greater than zero.
		Id             int   `json:"id"`
		IsGroupManager *bool `json:"is_group_manager,omitempty"`
	} `json:"user_group_memberships,omitempty"`
}

// PutUserIdJSONBody defines parameters for PutUserId.
type PutUserIdJSONBody struct {
	// Email value must be a valid email address.
	Email          *string                                `json:"email,omitempty"`
	FirstName      *MetabaseLibSchemaCommonNonBlankString `json:"first_name,omitempty"`
	IsGroupManager *bool                                  `json:"is_group_manager,omitempty"`
	IsSuperuser    *bool                                  `json:"is_superuser,omitempty"`
	LastName       *MetabaseLibSchemaCommonNonBlankString `json:"last_name,omitempty"`

	// Locale String must be a valid two-letter ISO language or language-country code e.g. en or en_US.
	Locale *interface{} `json:"locale,omitempty"`

	// LoginAttributes login attribute keys must be a keyword or string
	LoginAttributes      *map[string]interface{} `json:"login_attributes,omitempty"`
	UserGroupMemberships *[]struct {
		// Id value must be an integer greater than zero.
		Id             int   `json:"id"`
		IsGroupManager *bool `json:"is_group_manager,omitempty"`
	} `json:"user_group_memberships,omitempty"`
}

// PutUserIdPasswordJSONBody defines parameters for PutUserIdPassword.
type PutUserIdPasswordJSONBody struct {
	// Password password is too common.
	Password string `json:"password"`
}

// PostUtilEntityIdJSONBody defines parameters for PostUtilEntityId.
type PostUtilEntityIdJSONBody struct {
	EntityIds map[string]interface{} `json:"entity_ids"`
}

// PostUtilPasswordCheckJSONBody defines parameters for PostUtilPasswordCheck.
type PostUtilPasswordCheckJSONBody struct {
	// Password password is too common.
	Password string `json:"password"`
}

// PostUtilProductFeedbackJSONBody defines parameters for PostUtilProductFeedback.
type PostUtilProductFeedbackJSONBody struct {
	Comments *MetabaseLibSchemaCommonNonBlankString `json:"comments,omitempty"`
	Email    *MetabaseLibSchemaCommonNonBlankString `json:"email,omitempty"`
	Source   MetabaseLibSchemaCommonNonBlankString  `json:"source"`
}

// PostActionJSONRequestBody defines body for PostAction for application/json ContentType.
type PostActionJSONRequestBody PostActionJSONBody

// PutActionIdJSONRequestBody defines body for PutActionId for application/json ContentType.
type PutActionIdJSONRequestBody PutActionIdJSONBody

// PostActionIdExecuteJSONRequestBody defines body for PostActionIdExecute for application/json ContentType.
type PostActionIdExecuteJSONRequestBody PostActionIdExecuteJSONBody

// PostActivityRecentsJSONRequestBody defines body for PostActivityRecents for application/json ContentType.
type PostActivityRecentsJSONRequestBody PostActivityRecentsJSONBody

// PostAlertJSONRequestBody defines body for PostAlert for application/json ContentType.
type PostAlertJSONRequestBody PostAlertJSONBody

// PutAlertIdJSONRequestBody defines body for PutAlertId for application/json ContentType.
type PutAlertIdJSONRequestBody PutAlertIdJSONBody

// PostApiKeyJSONRequestBody defines body for PostApiKey for application/json ContentType.
type PostApiKeyJSONRequestBody PostApiKeyJSONBody

// PutApiKeyIdJSONRequestBody defines body for PutApiKeyId for application/json ContentType.
type PutApiKeyIdJSONRequestBody PutApiKeyIdJSONBody

// PutBookmarkOrderingJSONRequestBody defines body for PutBookmarkOrdering for application/json ContentType.
type PutBookmarkOrderingJSONRequestBody PutBookmarkOrderingJSONBody

// DeleteCacheJSONRequestBody defines body for DeleteCache for application/json ContentType.
type DeleteCacheJSONRequestBody DeleteCacheJSONBody

// PutCacheJSONRequestBody defines body for PutCache for application/json ContentType.
type PutCacheJSONRequestBody PutCacheJSONBody

// PostCardJSONRequestBody defines body for PostCard for application/json ContentType.
type PostCardJSONRequestBody PostCardJSONBody

// PostCardCollectionsJSONRequestBody defines body for PostCardCollections for application/json ContentType.
type PostCardCollectionsJSONRequestBody PostCardCollectionsJSONBody

// PostCardPivotCardIdQueryJSONRequestBody defines body for PostCardPivotCardIdQuery for application/json ContentType.
type PostCardPivotCardIdQueryJSONRequestBody PostCardPivotCardIdQueryJSONBody

// PostCardCardIdQueryJSONRequestBody defines body for PostCardCardIdQuery for application/json ContentType.
type PostCardCardIdQueryJSONRequestBody PostCardCardIdQueryJSONBody

// PostCardCardIdQueryExportFormatJSONRequestBody defines body for PostCardCardIdQueryExportFormat for application/json ContentType.
type PostCardCardIdQueryExportFormatJSONRequestBody PostCardCardIdQueryExportFormatJSONBody

// PutCardIdJSONRequestBody defines body for PutCardId for application/json ContentType.
type PutCardIdJSONRequestBody PutCardIdJSONBody

// PostChannelJSONRequestBody defines body for PostChannel for application/json ContentType.
type PostChannelJSONRequestBody PostChannelJSONBody

// PostChannelTestJSONRequestBody defines body for PostChannelTest for application/json ContentType.
type PostChannelTestJSONRequestBody PostChannelTestJSONBody

// PutChannelIdJSONRequestBody defines body for PutChannelId for application/json ContentType.
type PutChannelIdJSONRequestBody PutChannelIdJSONBody

// PostCollectionJSONRequestBody defines body for PostCollection for application/json ContentType.
type PostCollectionJSONRequestBody PostCollectionJSONBody

// PutCollectionGraphJSONRequestBody defines body for PutCollectionGraph for application/json ContentType.
type PutCollectionGraphJSONRequestBody PutCollectionGraphJSONBody

// PutCollectionIdJSONRequestBody defines body for PutCollectionId for application/json ContentType.
type PutCollectionIdJSONRequestBody PutCollectionIdJSONBody

// PostDashboardJSONRequestBody defines body for PostDashboard for application/json ContentType.
type PostDashboardJSONRequestBody PostDashboardJSONBody

// PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody defines body for PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery for application/json ContentType.
type PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody defines body for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery for application/json ContentType.
type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONBody

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody defines body for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat for application/json ContentType.
type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONBody

// PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody defines body for PostDashboardDashboardIdDashcardDashcardIdExecute for application/json ContentType.
type PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody PostDashboardDashboardIdDashcardDashcardIdExecuteJSONBody

// PostDashboardFromDashboardIdCopyJSONRequestBody defines body for PostDashboardFromDashboardIdCopy for application/json ContentType.
type PostDashboardFromDashboardIdCopyJSONRequestBody PostDashboardFromDashboardIdCopyJSONBody

// PutDashboardIdJSONRequestBody defines body for PutDashboardId for application/json ContentType.
type PutDashboardIdJSONRequestBody PutDashboardIdJSONBody

// PutDashboardIdCardsJSONRequestBody defines body for PutDashboardIdCards for application/json ContentType.
type PutDashboardIdCardsJSONRequestBody PutDashboardIdCardsJSONBody

// PostDashboardIdRevertJSONRequestBody defines body for PostDashboardIdRevert for application/json ContentType.
type PostDashboardIdRevertJSONRequestBody PostDashboardIdRevertJSONBody

// PostDatabaseJSONRequestBody defines body for PostDatabase for application/json ContentType.
type PostDatabaseJSONRequestBody PostDatabaseJSONBody

// PostDatabaseValidateJSONRequestBody defines body for PostDatabaseValidate for application/json ContentType.
type PostDatabaseValidateJSONRequestBody PostDatabaseValidateJSONBody

// PutDatabaseIdJSONRequestBody defines body for PutDatabaseId for application/json ContentType.
type PutDatabaseIdJSONRequestBody PutDatabaseIdJSONBody

// PostDatasetJSONRequestBody defines body for PostDataset for application/json ContentType.
type PostDatasetJSONRequestBody PostDatasetJSONBody

// PostDatasetNativeJSONRequestBody defines body for PostDatasetNative for application/json ContentType.
type PostDatasetNativeJSONRequestBody PostDatasetNativeJSONBody

// PostDatasetParameterSearchQueryJSONRequestBody defines body for PostDatasetParameterSearchQuery for application/json ContentType.
type PostDatasetParameterSearchQueryJSONRequestBody PostDatasetParameterSearchQueryJSONBody

// PostDatasetParameterValuesJSONRequestBody defines body for PostDatasetParameterValues for application/json ContentType.
type PostDatasetParameterValuesJSONRequestBody PostDatasetParameterValuesJSONBody

// PostDatasetPivotJSONRequestBody defines body for PostDatasetPivot for application/json ContentType.
type PostDatasetPivotJSONRequestBody PostDatasetPivotJSONBody

// PostDatasetQueryMetadataJSONRequestBody defines body for PostDatasetQueryMetadata for application/json ContentType.
type PostDatasetQueryMetadataJSONRequestBody PostDatasetQueryMetadataJSONBody

// PostDatasetExportFormatJSONRequestBody defines body for PostDatasetExportFormat for application/json ContentType.
type PostDatasetExportFormatJSONRequestBody PostDatasetExportFormatJSONBody

// PutEmailJSONRequestBody defines body for PutEmail for application/json ContentType.
type PutEmailJSONRequestBody PutEmailJSONBody

// PutFieldIdJSONRequestBody defines body for PutFieldId for application/json ContentType.
type PutFieldIdJSONRequestBody PutFieldIdJSONBody

// PostFieldIdDimensionJSONRequestBody defines body for PostFieldIdDimension for application/json ContentType.
type PostFieldIdDimensionJSONRequestBody PostFieldIdDimensionJSONBody

// PostFieldIdValuesJSONRequestBody defines body for PostFieldIdValues for application/json ContentType.
type PostFieldIdValuesJSONRequestBody PostFieldIdValuesJSONBody

// PutGoogleSettingsJSONRequestBody defines body for PutGoogleSettings for application/json ContentType.
type PutGoogleSettingsJSONRequestBody PutGoogleSettingsJSONBody

// PutLdapSettingsJSONRequestBody defines body for PutLdapSettings for application/json ContentType.
type PutLdapSettingsJSONRequestBody PutLdapSettingsJSONBody

// PostMetabotDatabaseDatabaseIdJSONRequestBody defines body for PostMetabotDatabaseDatabaseId for application/json ContentType.
type PostMetabotDatabaseDatabaseIdJSONRequestBody PostMetabotDatabaseDatabaseIdJSONBody

// PostMetabotDatabaseDatabaseIdQueryJSONRequestBody defines body for PostMetabotDatabaseDatabaseIdQuery for application/json ContentType.
type PostMetabotDatabaseDatabaseIdQueryJSONRequestBody PostMetabotDatabaseDatabaseIdQueryJSONBody

// PostMetabotModelModelIdJSONRequestBody defines body for PostMetabotModelModelId for application/json ContentType.
type PostMetabotModelModelIdJSONRequestBody PostMetabotModelModelIdJSONBody

// PostModelIndexJSONRequestBody defines body for PostModelIndex for application/json ContentType.
type PostModelIndexJSONRequestBody PostModelIndexJSONBody

// PostNativeQuerySnippetJSONRequestBody defines body for PostNativeQuerySnippet for application/json ContentType.
type PostNativeQuerySnippetJSONRequestBody PostNativeQuerySnippetJSONBody

// PutNativeQuerySnippetIdJSONRequestBody defines body for PutNativeQuerySnippetId for application/json ContentType.
type PutNativeQuerySnippetIdJSONRequestBody PutNativeQuerySnippetIdJSONBody

// PostNotifyDbIdJSONRequestBody defines body for PostNotifyDbId for application/json ContentType.
type PostNotifyDbIdJSONRequestBody PostNotifyDbIdJSONBody

// PostNotifyDbIdNewTableJSONRequestBody defines body for PostNotifyDbIdNewTable for application/json ContentType.
type PostNotifyDbIdNewTableJSONRequestBody PostNotifyDbIdNewTableJSONBody

// PutPermissionsGraphJSONRequestBody defines body for PutPermissionsGraph for application/json ContentType.
type PutPermissionsGraphJSONRequestBody PutPermissionsGraphJSONBody

// PostPermissionsGroupJSONRequestBody defines body for PostPermissionsGroup for application/json ContentType.
type PostPermissionsGroupJSONRequestBody PostPermissionsGroupJSONBody

// PutPermissionsGroupGroupIdJSONRequestBody defines body for PutPermissionsGroupGroupId for application/json ContentType.
type PutPermissionsGroupGroupIdJSONRequestBody PutPermissionsGroupGroupIdJSONBody

// PostPermissionsMembershipJSONRequestBody defines body for PostPermissionsMembership for application/json ContentType.
type PostPermissionsMembershipJSONRequestBody PostPermissionsMembershipJSONBody

// PutPermissionsMembershipIdJSONRequestBody defines body for PutPermissionsMembershipId for application/json ContentType.
type PutPermissionsMembershipIdJSONRequestBody PutPermissionsMembershipIdJSONBody

// PostPersistSetRefreshScheduleJSONRequestBody defines body for PostPersistSetRefreshSchedule for application/json ContentType.
type PostPersistSetRefreshScheduleJSONRequestBody PostPersistSetRefreshScheduleJSONBody

// PostPublicActionUuidExecuteJSONRequestBody defines body for PostPublicActionUuidExecute for application/json ContentType.
type PostPublicActionUuidExecuteJSONRequestBody PostPublicActionUuidExecuteJSONBody

// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody defines body for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat for application/json ContentType.
type PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONBody

// PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody defines body for PostPublicDashboardUuidDashcardDashcardIdExecute for application/json ContentType.
type PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody PostPublicDashboardUuidDashcardDashcardIdExecuteJSONBody

// PostPulseJSONRequestBody defines body for PostPulse for application/json ContentType.
type PostPulseJSONRequestBody PostPulseJSONBody

// PostPulseTestJSONRequestBody defines body for PostPulseTest for application/json ContentType.
type PostPulseTestJSONRequestBody PostPulseTestJSONBody

// PutPulseIdJSONRequestBody defines body for PutPulseId for application/json ContentType.
type PutPulseIdJSONRequestBody PutPulseIdJSONBody

// PostRevisionRevertJSONRequestBody defines body for PostRevisionRevert for application/json ContentType.
type PostRevisionRevertJSONRequestBody PostRevisionRevertJSONBody

// PostSegmentJSONRequestBody defines body for PostSegment for application/json ContentType.
type PostSegmentJSONRequestBody PostSegmentJSONBody

// PutSegmentIdJSONRequestBody defines body for PutSegmentId for application/json ContentType.
type PutSegmentIdJSONRequestBody PutSegmentIdJSONBody

// PostSegmentIdRevertJSONRequestBody defines body for PostSegmentIdRevert for application/json ContentType.
type PostSegmentIdRevertJSONRequestBody PostSegmentIdRevertJSONBody

// PostSessionJSONRequestBody defines body for PostSession for application/json ContentType.
type PostSessionJSONRequestBody PostSessionJSONBody

// PostSessionForgotPasswordJSONRequestBody defines body for PostSessionForgotPassword for application/json ContentType.
type PostSessionForgotPasswordJSONRequestBody PostSessionForgotPasswordJSONBody

// PostSessionGoogleAuthJSONRequestBody defines body for PostSessionGoogleAuth for application/json ContentType.
type PostSessionGoogleAuthJSONRequestBody PostSessionGoogleAuthJSONBody

// PostSessionPulseUnsubscribeJSONRequestBody defines body for PostSessionPulseUnsubscribe for application/json ContentType.
type PostSessionPulseUnsubscribeJSONRequestBody PostSessionPulseUnsubscribeJSONBody

// PostSessionPulseUnsubscribeUndoJSONRequestBody defines body for PostSessionPulseUnsubscribeUndo for application/json ContentType.
type PostSessionPulseUnsubscribeUndoJSONRequestBody PostSessionPulseUnsubscribeUndoJSONBody

// PostSessionResetPasswordJSONRequestBody defines body for PostSessionResetPassword for application/json ContentType.
type PostSessionResetPasswordJSONRequestBody PostSessionResetPasswordJSONBody

// PutSettingJSONRequestBody defines body for PutSetting for application/json ContentType.
type PutSettingJSONRequestBody PutSettingJSONBody

// PostSetupJSONRequestBody defines body for PostSetup for application/json ContentType.
type PostSetupJSONRequestBody PostSetupJSONBody

// PutSlackSettingsJSONRequestBody defines body for PutSlackSettings for application/json ContentType.
type PutSlackSettingsJSONRequestBody PutSlackSettingsJSONBody

// PutTableJSONRequestBody defines body for PutTable for application/json ContentType.
type PutTableJSONRequestBody PutTableJSONBody

// PutTableIdJSONRequestBody defines body for PutTableId for application/json ContentType.
type PutTableIdJSONRequestBody PutTableIdJSONBody

// PutTableIdFieldsOrderJSONRequestBody defines body for PutTableIdFieldsOrder for application/json ContentType.
type PutTableIdFieldsOrderJSONRequestBody PutTableIdFieldsOrderJSONBody

// PostTimelineEventJSONRequestBody defines body for PostTimelineEvent for application/json ContentType.
type PostTimelineEventJSONRequestBody PostTimelineEventJSONBody

// PutTimelineEventIdJSONRequestBody defines body for PutTimelineEventId for application/json ContentType.
type PutTimelineEventIdJSONRequestBody PutTimelineEventIdJSONBody

// PostTimelineJSONRequestBody defines body for PostTimeline for application/json ContentType.
type PostTimelineJSONRequestBody PostTimelineJSONBody

// PutTimelineIdJSONRequestBody defines body for PutTimelineId for application/json ContentType.
type PutTimelineIdJSONRequestBody PutTimelineIdJSONBody

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PutUserIdJSONRequestBody defines body for PutUserId for application/json ContentType.
type PutUserIdJSONRequestBody PutUserIdJSONBody

// PutUserIdPasswordJSONRequestBody defines body for PutUserIdPassword for application/json ContentType.
type PutUserIdPasswordJSONRequestBody PutUserIdPasswordJSONBody

// PostUtilEntityIdJSONRequestBody defines body for PostUtilEntityId for application/json ContentType.
type PostUtilEntityIdJSONRequestBody PostUtilEntityIdJSONBody

// PostUtilPasswordCheckJSONRequestBody defines body for PostUtilPasswordCheck for application/json ContentType.
type PostUtilPasswordCheckJSONRequestBody PostUtilPasswordCheckJSONBody

// PostUtilProductFeedbackJSONRequestBody defines body for PostUtilProductFeedback for application/json ContentType.
type PostUtilProductFeedbackJSONRequestBody PostUtilProductFeedbackJSONBody

// AsMetabaseAnalyzeFingerprintSchemaPercent returns the union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null as a MetabaseAnalyzeFingerprintSchemaPercent
func (t MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) AsMetabaseAnalyzeFingerprintSchemaPercent() (MetabaseAnalyzeFingerprintSchemaPercent, error) {
	var body MetabaseAnalyzeFingerprintSchemaPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaPercent overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null as the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) FromMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaPercent performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null, using the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) MergeMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null as a MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1
func (t MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) AsMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1() (MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1, error) {
	var body MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null as the provided MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1
func (t *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) FromMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1(v MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null, using the provided MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1
func (t *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) MergeMetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1(v MetabaseAnalyzeFingerprintSchemaGlobalFingerprintNull1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaGlobalFingerprint_Null) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintAvg1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Avg) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMax1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Max) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintMin1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Min) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ10) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1 as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ11) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ30) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3 as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintQ31) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Q3) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd as a MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1
func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) AsMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1() (MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1, error) {
	var body MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd as the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) FromMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd, using the provided MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1
func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) MergeMetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1(v MetabaseAnalyzeFingerprintSchemaNumberFingerprintSd1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaNumberFingerprint_Sd) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest as a MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0
func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0() (MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0, error) {
	var body MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest as the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest, using the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest as a MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1
func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1() (MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest as the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest, using the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintEarliest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Earliest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest as a MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0
func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0() (MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0, error) {
	var body MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest as the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest, using the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest as a MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1
func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) AsMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1() (MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest as the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) FromMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest, using the provided MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1
func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) MergeMetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1(v MetabaseAnalyzeFingerprintSchemaTemporalFingerprintLatest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTemporalFingerprint_Latest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength as a MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0() (MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0(v MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0(v MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength as a MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1() (MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintAverageLength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_AverageLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaPercent returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail as a MetabaseAnalyzeFingerprintSchemaPercent
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) AsMetabaseAnalyzeFingerprintSchemaPercent() (MetabaseAnalyzeFingerprintSchemaPercent, error) {
	var body MetabaseAnalyzeFingerprintSchemaPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaPercent overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail as the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) FromMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaPercent performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail, using the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) MergeMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail as a MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1() (MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentEmail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentEmail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaPercent returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson as a MetabaseAnalyzeFingerprintSchemaPercent
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) AsMetabaseAnalyzeFingerprintSchemaPercent() (MetabaseAnalyzeFingerprintSchemaPercent, error) {
	var body MetabaseAnalyzeFingerprintSchemaPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaPercent overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson as the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) FromMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaPercent performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson, using the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) MergeMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson as a MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1() (MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentJson1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentJson) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaPercent returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState as a MetabaseAnalyzeFingerprintSchemaPercent
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) AsMetabaseAnalyzeFingerprintSchemaPercent() (MetabaseAnalyzeFingerprintSchemaPercent, error) {
	var body MetabaseAnalyzeFingerprintSchemaPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaPercent overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState as the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) FromMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaPercent performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState, using the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) MergeMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState as a MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1() (MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaPercent returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl as a MetabaseAnalyzeFingerprintSchemaPercent
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) AsMetabaseAnalyzeFingerprintSchemaPercent() (MetabaseAnalyzeFingerprintSchemaPercent, error) {
	var body MetabaseAnalyzeFingerprintSchemaPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaPercent overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl as the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) FromMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaPercent performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl, using the provided MetabaseAnalyzeFingerprintSchemaPercent
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) MergeMetabaseAnalyzeFingerprintSchemaPercent(v MetabaseAnalyzeFingerprintSchemaPercent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1 returns the union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl as a MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1
func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) AsMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1() (MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1, error) {
	var body MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1 overwrites any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl as the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) FromMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1 performs a merge with any union data inside the MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl, using the provided MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1
func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) MergeMetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1(v MetabaseAnalyzeFingerprintSchemaTextFingerprintPercentUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeFingerprintSchemaTextFingerprint_PercentUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description as a MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) AsMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0() (MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) FromMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0(v MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataDescription0(v MetabaseAnalyzeQueryResultsResultColumnMetadataDescription0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description as a MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) AsMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1() (MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) FromMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1(v MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Description, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataDescription1(v MetabaseAnalyzeQueryResultsResultColumnMetadataDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeFingerprintSchemaFingerprint returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint as a MetabaseAnalyzeFingerprintSchemaFingerprint
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) AsMetabaseAnalyzeFingerprintSchemaFingerprint() (MetabaseAnalyzeFingerprintSchemaFingerprint, error) {
	var body MetabaseAnalyzeFingerprintSchemaFingerprint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeFingerprintSchemaFingerprint overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint as the provided MetabaseAnalyzeFingerprintSchemaFingerprint
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) FromMetabaseAnalyzeFingerprintSchemaFingerprint(v MetabaseAnalyzeFingerprintSchemaFingerprint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeFingerprintSchemaFingerprint performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint, using the provided MetabaseAnalyzeFingerprintSchemaFingerprint
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) MergeMetabaseAnalyzeFingerprintSchemaFingerprint(v MetabaseAnalyzeFingerprintSchemaFingerprint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint as a MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) AsMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1() (MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) FromMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1(v MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1(v MetabaseAnalyzeQueryResultsResultColumnMetadataFingerprint1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Fingerprint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseLibSchemaIdField returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id as a MetabaseLibSchemaIdField
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) AsMetabaseLibSchemaIdField() (MetabaseLibSchemaIdField, error) {
	var body MetabaseLibSchemaIdField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseLibSchemaIdField overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id as the provided MetabaseLibSchemaIdField
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) FromMetabaseLibSchemaIdField(v MetabaseLibSchemaIdField) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseLibSchemaIdField performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id, using the provided MetabaseLibSchemaIdField
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) MergeMetabaseLibSchemaIdField(v MetabaseLibSchemaIdField) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataId1 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id as a MetabaseAnalyzeQueryResultsResultColumnMetadataId1
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) AsMetabaseAnalyzeQueryResultsResultColumnMetadataId1() (MetabaseAnalyzeQueryResultsResultColumnMetadataId1, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataId1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataId1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) FromMetabaseAnalyzeQueryResultsResultColumnMetadataId1(v MetabaseAnalyzeQueryResultsResultColumnMetadataId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataId1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Id, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataId1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataId1(v MetabaseAnalyzeQueryResultsResultColumnMetadataId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Id) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType as a MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) AsMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0() (MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) FromMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0(v MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0(v MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType as a MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) AsMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1() (MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) FromMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1(v MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1(v MetabaseAnalyzeQueryResultsResultColumnMetadataSemanticType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_SemanticType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit as a MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) AsMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0() (MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) FromMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0(v MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataUnit0(v MetabaseAnalyzeQueryResultsResultColumnMetadataUnit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1 returns the union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit as a MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1
func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) AsMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1() (MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1, error) {
	var body MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit as the provided MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) FromMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1(v MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit, using the provided MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1
func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) MergeMetabaseAnalyzeQueryResultsResultColumnMetadataUnit1(v MetabaseAnalyzeQueryResultsResultColumnMetadataUnit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultColumnMetadata_Unit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseAnalyzeQueryResultsResultsMetadata0 returns the union data inside the MetabaseAnalyzeQueryResultsResultsMetadata as a MetabaseAnalyzeQueryResultsResultsMetadata0
func (t MetabaseAnalyzeQueryResultsResultsMetadata) AsMetabaseAnalyzeQueryResultsResultsMetadata0() (MetabaseAnalyzeQueryResultsResultsMetadata0, error) {
	var body MetabaseAnalyzeQueryResultsResultsMetadata0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultsMetadata0 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultsMetadata as the provided MetabaseAnalyzeQueryResultsResultsMetadata0
func (t *MetabaseAnalyzeQueryResultsResultsMetadata) FromMetabaseAnalyzeQueryResultsResultsMetadata0(v MetabaseAnalyzeQueryResultsResultsMetadata0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultsMetadata0 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultsMetadata, using the provided MetabaseAnalyzeQueryResultsResultsMetadata0
func (t *MetabaseAnalyzeQueryResultsResultsMetadata) MergeMetabaseAnalyzeQueryResultsResultsMetadata0(v MetabaseAnalyzeQueryResultsResultsMetadata0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseAnalyzeQueryResultsResultsMetadata1 returns the union data inside the MetabaseAnalyzeQueryResultsResultsMetadata as a MetabaseAnalyzeQueryResultsResultsMetadata1
func (t MetabaseAnalyzeQueryResultsResultsMetadata) AsMetabaseAnalyzeQueryResultsResultsMetadata1() (MetabaseAnalyzeQueryResultsResultsMetadata1, error) {
	var body MetabaseAnalyzeQueryResultsResultsMetadata1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseAnalyzeQueryResultsResultsMetadata1 overwrites any union data inside the MetabaseAnalyzeQueryResultsResultsMetadata as the provided MetabaseAnalyzeQueryResultsResultsMetadata1
func (t *MetabaseAnalyzeQueryResultsResultsMetadata) FromMetabaseAnalyzeQueryResultsResultsMetadata1(v MetabaseAnalyzeQueryResultsResultsMetadata1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseAnalyzeQueryResultsResultsMetadata1 performs a merge with any union data inside the MetabaseAnalyzeQueryResultsResultsMetadata, using the provided MetabaseAnalyzeQueryResultsResultsMetadata1
func (t *MetabaseAnalyzeQueryResultsResultsMetadata) MergeMetabaseAnalyzeQueryResultsResultsMetadata1(v MetabaseAnalyzeQueryResultsResultsMetadata1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseAnalyzeQueryResultsResultsMetadata) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseAnalyzeQueryResultsResultsMetadata) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetabaseUtilCronScheduleMap returns the union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues as a MetabaseUtilCronScheduleMap
func (t MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) AsMetabaseUtilCronScheduleMap() (MetabaseUtilCronScheduleMap, error) {
	var body MetabaseUtilCronScheduleMap
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseUtilCronScheduleMap overwrites any union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues as the provided MetabaseUtilCronScheduleMap
func (t *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) FromMetabaseUtilCronScheduleMap(v MetabaseUtilCronScheduleMap) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseUtilCronScheduleMap performs a merge with any union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues, using the provided MetabaseUtilCronScheduleMap
func (t *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) MergeMetabaseUtilCronScheduleMap(v MetabaseUtilCronScheduleMap) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1 returns the union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues as a MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1
func (t MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) AsMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1() (MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1, error) {
	var body MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1 overwrites any union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues as the provided MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1
func (t *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) FromMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1(v MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1 performs a merge with any union data inside the MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues, using the provided MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1
func (t *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) MergeMetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1(v MetabaseSyncSchedulesExpandedSchedulesMapCacheFieldValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetabaseSyncSchedulesExpandedSchedulesMap_CacheFieldValues) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAction request
	GetAction(ctx context.Context, params *GetActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActionWithBody request with any body
	PostActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAction(ctx context.Context, body PostActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActionPublic request
	GetActionPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActionActionId request
	DeleteActionActionId(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActionActionId request
	GetActionActionId(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActionActionIdExecute request
	GetActionActionIdExecute(ctx context.Context, actionId int, params *GetActionActionIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutActionIdWithBody request with any body
	PutActionIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutActionId(ctx context.Context, id int, body PutActionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActionIdExecuteWithBody request with any body
	PostActionIdExecuteWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActionIdExecute(ctx context.Context, id int, body PostActionIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActionIdPublicLink request
	DeleteActionIdPublicLink(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActionIdPublicLink request
	PostActionIdPublicLink(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityMostRecentlyViewedDashboard request
	GetActivityMostRecentlyViewedDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityPopularItems request
	GetActivityPopularItems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityRecentViews request
	GetActivityRecentViews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityRecents request
	GetActivityRecents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActivityRecentsWithBody request with any body
	PostActivityRecentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActivityRecents(ctx context.Context, body PostActivityRecentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlert request
	GetAlert(ctx context.Context, params *GetAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertWithBody request with any body
	PostAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlert(ctx context.Context, body PostAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertQuestionId request
	GetAlertQuestionId(ctx context.Context, id int, params *GetAlertQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertId request
	GetAlertId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertIdWithBody request with any body
	PutAlertIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertId(ctx context.Context, id int, body PutAlertIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertIdSubscription request
	DeleteAlertIdSubscription(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiKeyWithBody request with any body
	PostApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiKey(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeyCount request
	GetApiKeyCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKeyId request
	DeleteApiKeyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiKeyIdWithBody request with any body
	PutApiKeyIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiKeyId(ctx context.Context, id int, body PutApiKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiKeyIdRegenerate request
	PutApiKeyIdRegenerate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsDatabaseIdCandidates request
	GetAutomagicDashboardsDatabaseIdCandidates(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkId request
	GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkId(ctx context.Context, modelIndexId int, pkId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQuery request
	GetAutomagicDashboardsEntityEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity, entityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery request
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata request
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity, entityIdOrQuery string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate request
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery request
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmark request
	GetBookmark(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBookmarkOrderingWithBody request with any body
	PutBookmarkOrderingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBookmarkOrdering(ctx context.Context, body PutBookmarkOrderingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarkModelId request
	DeleteBookmarkModelId(ctx context.Context, model DeleteBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarkModelId request
	PostBookmarkModelId(ctx context.Context, model PostBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCacheWithBody request with any body
	DeleteCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCache(ctx context.Context, body DeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCache request
	GetCache(ctx context.Context, params *GetCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCacheWithBody request with any body
	PutCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCache(ctx context.Context, body PutCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCacheInvalidate request
	PostCacheInvalidate(ctx context.Context, params *PostCacheInvalidateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCard request
	GetCard(ctx context.Context, params *GetCardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardWithBody request with any body
	PostCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCard(ctx context.Context, body PostCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCollectionsWithBody request with any body
	PostCardCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardCollections(ctx context.Context, body PostCardCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardEmbeddable request
	GetCardEmbeddable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardFromCsv request
	PostCardFromCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardPivotCardIdQueryWithBody request with any body
	PostCardPivotCardIdQueryWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardPivotCardIdQuery(ctx context.Context, cardId int, body PostCardPivotCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardPublic request
	GetCardPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardCardIdParamsParamKeySearchQuery request
	GetCardCardIdParamsParamKeySearchQuery(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardCardIdParamsParamKeyValues request
	GetCardCardIdParamsParamKeyValues(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdPersist request
	PostCardCardIdPersist(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCardCardIdPublicLink request
	DeleteCardCardIdPublicLink(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdPublicLink request
	PostCardCardIdPublicLink(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdQueryWithBody request with any body
	PostCardCardIdQueryWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardCardIdQuery(ctx context.Context, cardId int, body PostCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdQueryExportFormatWithBody request with any body
	PostCardCardIdQueryExportFormatWithBody(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardCardIdQueryExportFormat(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, body PostCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdRefresh request
	PostCardCardIdRefresh(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardCardIdUnpersist request
	PostCardCardIdUnpersist(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCardId request
	DeleteCardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardId request
	GetCardId(ctx context.Context, id int, params *GetCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCardIdWithBody request with any body
	PutCardIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCardId(ctx context.Context, id int, body PutCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardIdCopy request
	PostCardIdCopy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardIdQueryMetadata request
	GetCardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardIdSeries request
	GetCardIdSeries(ctx context.Context, id int, params *GetCardIdSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardIdTimelines request
	GetCardIdTimelines(ctx context.Context, id int, params *GetCardIdTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannel request
	GetChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelWithBody request with any body
	PostChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannel(ctx context.Context, body PostChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChannelTestWithBody request with any body
	PostChannelTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelTest(ctx context.Context, body PostChannelTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelId request
	GetChannelId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChannelIdWithBody request with any body
	PutChannelIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChannelId(ctx context.Context, id int, body PutChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudMigration request
	GetCloudMigration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCloudMigration request
	PostCloudMigration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCloudMigrationCancel request
	PutCloudMigrationCancel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollection request
	GetCollection(ctx context.Context, params *GetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionWithBody request with any body
	PostCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollection(ctx context.Context, body PostCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionGraph request
	GetCollectionGraph(ctx context.Context, params *GetCollectionGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCollectionGraphWithBody request with any body
	PutCollectionGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCollectionGraph(ctx context.Context, body PutCollectionGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionRoot request
	GetCollectionRoot(ctx context.Context, params *GetCollectionRootParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionRootItems request
	GetCollectionRootItems(ctx context.Context, params *GetCollectionRootItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionRootTimelines request
	GetCollectionRootTimelines(ctx context.Context, params *GetCollectionRootTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionTrash request
	GetCollectionTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionTree request
	GetCollectionTree(ctx context.Context, params *GetCollectionTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionId request
	GetCollectionId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCollectionIdWithBody request with any body
	PutCollectionIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCollectionId(ctx context.Context, id int, body PutCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionIdItems request
	GetCollectionIdItems(ctx context.Context, id int, params *GetCollectionIdItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionIdTimelines request
	GetCollectionIdTimelines(ctx context.Context, id int, params *GetCollectionIdTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboard request
	GetDashboard(ctx context.Context, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardWithBody request with any body
	PostDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboard(ctx context.Context, body PostDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardEmbeddable request
	GetDashboardEmbeddable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardParamsValidFilterFields request
	GetDashboardParamsValidFilterFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBody request with any body
	PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardPublic request
	GetDashboardPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardSave request
	PostDashboardSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardSaveCollectionParentCollectionId request
	PostDashboardSaveCollectionParentCollectionId(ctx context.Context, parentCollectionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBody request with any body
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBody request with any body
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardDashboardIdDashcardDashcardIdExecute request
	GetDashboardDashboardIdDashcardDashcardIdExecute(ctx context.Context, dashboardId int, dashcardId int, params *GetDashboardDashboardIdDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardDashboardIdDashcardDashcardIdExecuteWithBody request with any body
	PostDashboardDashboardIdDashcardDashcardIdExecuteWithBody(ctx context.Context, dashboardId int, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardDashboardIdDashcardDashcardIdExecute(ctx context.Context, dashboardId int, dashcardId int, body PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardDashboardIdPublicLink request
	DeleteDashboardDashboardIdPublicLink(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardDashboardIdPublicLink request
	PostDashboardDashboardIdPublicLink(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardFromDashboardIdCopyWithBody request with any body
	PostDashboardFromDashboardIdCopyWithBody(ctx context.Context, fromDashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardFromDashboardIdCopy(ctx context.Context, fromDashboardId int, body PostDashboardFromDashboardIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardId request
	DeleteDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardId request
	GetDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDashboardIdWithBody request with any body
	PutDashboardIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDashboardId(ctx context.Context, id int, body PutDashboardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDashboardIdCardsWithBody request with any body
	PutDashboardIdCardsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDashboardIdCards(ctx context.Context, id int, body PutDashboardIdCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardIdParamsParamKeySearchQuery request
	GetDashboardIdParamsParamKeySearchQuery(ctx context.Context, id int, paramKey string, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardIdParamsParamKeyValues request
	GetDashboardIdParamsParamKeyValues(ctx context.Context, id int, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardIdQueryMetadata request
	GetDashboardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardIdRelated request
	GetDashboardIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardIdRevertWithBody request with any body
	PostDashboardIdRevertWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardIdRevert(ctx context.Context, id int, body PostDashboardIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardIdRevisions request
	GetDashboardIdRevisions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabase request
	GetDatabase(ctx context.Context, params *GetDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseWithBody request with any body
	PostDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatabase(ctx context.Context, body PostDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseSampleDatabase request
	PostDatabaseSampleDatabase(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseValidateWithBody request with any body
	PostDatabaseValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatabaseValidate(ctx context.Context, body PostDatabaseValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabaseId request
	DeleteDatabaseId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseId request
	GetDatabaseId(ctx context.Context, id int, params *GetDatabaseIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDatabaseIdWithBody request with any body
	PutDatabaseIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDatabaseId(ctx context.Context, id int, body PutDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdAutocompleteSuggestions request
	GetDatabaseIdAutocompleteSuggestions(ctx context.Context, id int, params *GetDatabaseIdAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdCardAutocompleteSuggestions request
	GetDatabaseIdCardAutocompleteSuggestions(ctx context.Context, id int, params *GetDatabaseIdCardAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdDiscardValues request
	PostDatabaseIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdDismissSpinner request
	PostDatabaseIdDismissSpinner(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdFields request
	GetDatabaseIdFields(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdIdfields request
	GetDatabaseIdIdfields(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdMetadata request
	GetDatabaseIdMetadata(ctx context.Context, id int, params *GetDatabaseIdMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdPersist request
	PostDatabaseIdPersist(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdRescanValues request
	PostDatabaseIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdSchema request
	GetDatabaseIdSchema(ctx context.Context, id int, params *GetDatabaseIdSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdSchemaSchema request
	GetDatabaseIdSchemaSchema(ctx context.Context, id int, schema string, params *GetDatabaseIdSchemaSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdSchemas request
	GetDatabaseIdSchemas(ctx context.Context, id int, params *GetDatabaseIdSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdSyncSchema request
	PostDatabaseIdSyncSchema(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdSyncableSchemas request
	GetDatabaseIdSyncableSchemas(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabaseIdUnpersist request
	PostDatabaseIdUnpersist(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseIdUsageInfo request
	GetDatabaseIdUsageInfo(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseVirtualDbDatasets request
	GetDatabaseVirtualDbDatasets(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseVirtualDbDatasetsSchema request
	GetDatabaseVirtualDbDatasetsSchema(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseVirtualDbMetadata request
	GetDatabaseVirtualDbMetadata(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseVirtualDbSchemaSchema request
	GetDatabaseVirtualDbSchemaSchema(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabaseVirtualDbSchemas request
	GetDatabaseVirtualDbSchemas(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetWithBody request with any body
	PostDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDataset(ctx context.Context, body PostDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetNativeWithBody request with any body
	PostDatasetNativeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetNative(ctx context.Context, body PostDatasetNativeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetParameterSearchQueryWithBody request with any body
	PostDatasetParameterSearchQueryWithBody(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetParameterSearchQuery(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, body PostDatasetParameterSearchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetParameterValuesWithBody request with any body
	PostDatasetParameterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetParameterValues(ctx context.Context, body PostDatasetParameterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetPivotWithBody request with any body
	PostDatasetPivotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetPivot(ctx context.Context, body PostDatasetPivotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetQueryMetadataWithBody request with any body
	PostDatasetQueryMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetQueryMetadata(ctx context.Context, body PostDatasetQueryMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatasetExportFormatWithBody request with any body
	PostDatasetExportFormatWithBody(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatasetExportFormat(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, body PostDatasetExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocs request
	GetDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmail request
	DeleteEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEmailWithBody request with any body
	PutEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEmail(ctx context.Context, body PutEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmailTest request
	PostEmailTest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardToken request
	GetEmbedCardToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenFieldFieldIdRemappingRemappedId request
	GetEmbedCardTokenFieldFieldIdRemappingRemappedId(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenFieldFieldIdSearchSearchFieldId request
	GetEmbedCardTokenFieldFieldIdSearchSearchFieldId(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenFieldFieldIdValues request
	GetEmbedCardTokenFieldFieldIdValues(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenParamsParamKeySearchPrefix request
	GetEmbedCardTokenParamsParamKeySearchPrefix(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenParamsParamKeyValues request
	GetEmbedCardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenQuery request
	GetEmbedCardTokenQuery(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedCardTokenQueryExportFormat request
	GetEmbedCardTokenQueryExportFormat(ctx context.Context, token string, exportFormat GetEmbedCardTokenQueryExportFormatParamsExportFormat, params *GetEmbedCardTokenQueryExportFormatParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardToken request
	GetEmbedDashboardToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenDashcardDashcardIdCardCardId request
	GetEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat request
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat(ctx context.Context, token string, dashcardId int, cardId int, exportFormat GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId request
	GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId request
	GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenFieldFieldIdValues request
	GetEmbedDashboardTokenFieldFieldIdValues(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenParamsParamKeySearchPrefix request
	GetEmbedDashboardTokenParamsParamKeySearchPrefix(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedDashboardTokenParamsParamKeyValues request
	GetEmbedDashboardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedPivotCardTokenQuery request
	GetEmbedPivotCardTokenQuery(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardId request
	GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldId request
	GetFieldId(ctx context.Context, id int, params *GetFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFieldIdWithBody request with any body
	PutFieldIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFieldId(ctx context.Context, id int, body PutFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFieldIdDimension request
	DeleteFieldIdDimension(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFieldIdDimensionWithBody request with any body
	PostFieldIdDimensionWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFieldIdDimension(ctx context.Context, id int, body PostFieldIdDimensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFieldIdDiscardValues request
	PostFieldIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldIdRelated request
	GetFieldIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldIdRemappingRemappedId request
	GetFieldIdRemappingRemappedId(ctx context.Context, id int, remappedId int, params *GetFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFieldIdRescanValues request
	PostFieldIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldIdSearchSearchId request
	GetFieldIdSearchSearchId(ctx context.Context, id int, searchId int, params *GetFieldIdSearchSearchIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldIdSummary request
	GetFieldIdSummary(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFieldIdValues request
	GetFieldIdValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFieldIdValuesWithBody request with any body
	PostFieldIdValuesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFieldIdValues(ctx context.Context, id int, body PostFieldIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeojson request
	GetGeojson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeojsonKey request
	GetGeojsonKey(ctx context.Context, key MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGoogleSettingsWithBody request with any body
	PutGoogleSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGoogleSettings(ctx context.Context, body PutGoogleSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLdapSettingsWithBody request with any body
	PutLdapSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLdapSettings(ctx context.Context, body PutLdapSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoginHistoryCurrent request
	GetLoginHistoryCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetabotDatabaseDatabaseIdWithBody request with any body
	PostMetabotDatabaseDatabaseIdWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetabotDatabaseDatabaseId(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetabotDatabaseDatabaseIdQueryWithBody request with any body
	PostMetabotDatabaseDatabaseIdQueryWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetabotDatabaseDatabaseIdQuery(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetabotFeedback request
	PostMetabotFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetabotModelModelIdWithBody request with any body
	PostMetabotModelModelIdWithBody(ctx context.Context, modelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetabotModelModelId(ctx context.Context, modelId int, body PostMetabotModelModelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelIndex request
	GetModelIndex(ctx context.Context, params *GetModelIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostModelIndexWithBody request with any body
	PostModelIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostModelIndex(ctx context.Context, body PostModelIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModelIndexId request
	DeleteModelIndexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelIndexId request
	GetModelIndexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNativeQuerySnippet request
	GetNativeQuerySnippet(ctx context.Context, params *GetNativeQuerySnippetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNativeQuerySnippetWithBody request with any body
	PostNativeQuerySnippetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNativeQuerySnippet(ctx context.Context, body PostNativeQuerySnippetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNativeQuerySnippetId request
	GetNativeQuerySnippetId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNativeQuerySnippetIdWithBody request with any body
	PutNativeQuerySnippetIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNativeQuerySnippetId(ctx context.Context, id int, body PutNativeQuerySnippetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotifyDbIdWithBody request with any body
	PostNotifyDbIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotifyDbId(ctx context.Context, id int, body PostNotifyDbIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotifyDbIdNewTableWithBody request with any body
	PostNotifyDbIdNewTableWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotifyDbIdNewTable(ctx context.Context, id int, body PostNotifyDbIdNewTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGraph request
	GetPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPermissionsGraphWithBody request with any body
	PutPermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPermissionsGraph(ctx context.Context, body PutPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGraphDbDbId request
	GetPermissionsGraphDbDbId(ctx context.Context, dbId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGraphGroupGroupId request
	GetPermissionsGraphGroupGroupId(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGroup request
	GetPermissionsGroup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPermissionsGroupWithBody request with any body
	PostPermissionsGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPermissionsGroup(ctx context.Context, body PostPermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionsGroupGroupId request
	DeletePermissionsGroupGroupId(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPermissionsGroupGroupIdWithBody request with any body
	PutPermissionsGroupGroupIdWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPermissionsGroupGroupId(ctx context.Context, groupId int, body PutPermissionsGroupGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGroupId request
	GetPermissionsGroupId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsMembership request
	GetPermissionsMembership(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPermissionsMembershipWithBody request with any body
	PostPermissionsMembershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPermissionsMembership(ctx context.Context, body PostPermissionsMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPermissionsMembershipGroupIdClear request
	PutPermissionsMembershipGroupIdClear(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionsMembershipId request
	DeletePermissionsMembershipId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPermissionsMembershipIdWithBody request with any body
	PutPermissionsMembershipIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPermissionsMembershipId(ctx context.Context, id int, body PutPermissionsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersist request
	GetPersist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersistCardCardId request
	GetPersistCardCardId(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPersistDisable request
	PostPersistDisable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPersistEnable request
	PostPersistEnable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPersistSetRefreshScheduleWithBody request with any body
	PostPersistSetRefreshScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPersistSetRefreshSchedule(ctx context.Context, body PostPersistSetRefreshScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersistPersistedInfoId request
	GetPersistPersistedInfoId(ctx context.Context, persistedInfoId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPremiumFeaturesTokenStatus request
	GetPremiumFeaturesTokenStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedCardToken request
	GetPreviewEmbedCardToken(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedCardTokenQuery request
	GetPreviewEmbedCardTokenQuery(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedDashboardToken request
	GetPreviewEmbedDashboardToken(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardId request
	GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedDashboardTokenParamsParamKeyValues request
	GetPreviewEmbedDashboardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedPivotCardTokenQuery request
	GetPreviewEmbedPivotCardTokenQuery(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardId request
	GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicActionUuid request
	GetPublicActionUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicActionUuidExecuteWithBody request with any body
	PostPublicActionUuidExecuteWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicActionUuidExecute(ctx context.Context, uuid string, body PostPublicActionUuidExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuid request
	GetPublicCardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidFieldFieldIdRemappingRemappedId request
	GetPublicCardUuidFieldFieldIdRemappingRemappedId(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidFieldFieldIdSearchSearchFieldId request
	GetPublicCardUuidFieldFieldIdSearchSearchFieldId(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidFieldFieldIdValues request
	GetPublicCardUuidFieldFieldIdValues(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidParamsParamKeySearchQuery request
	GetPublicCardUuidParamsParamKeySearchQuery(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidParamsParamKeyValues request
	GetPublicCardUuidParamsParamKeyValues(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidQuery request
	GetPublicCardUuidQuery(ctx context.Context, uuid string, params *GetPublicCardUuidQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicCardUuidQueryExportFormat request
	GetPublicCardUuidQueryExportFormat(ctx context.Context, uuid string, exportFormat GetPublicCardUuidQueryExportFormatParamsExportFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuid request
	GetPublicDashboardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidDashcardDashcardIdCardCardId request
	GetPublicDashboardUuidDashcardDashcardIdCardCardId(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBody request with any body
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBody(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, body PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidDashcardDashcardIdExecute request
	GetPublicDashboardUuidDashcardDashcardIdExecute(ctx context.Context, uuid string, dashcardId int, params *GetPublicDashboardUuidDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublicDashboardUuidDashcardDashcardIdExecuteWithBody request with any body
	PostPublicDashboardUuidDashcardDashcardIdExecuteWithBody(ctx context.Context, uuid string, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublicDashboardUuidDashcardDashcardIdExecute(ctx context.Context, uuid string, dashcardId int, body PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidFieldFieldIdRemappingRemappedId request
	GetPublicDashboardUuidFieldFieldIdRemappingRemappedId(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId request
	GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidFieldFieldIdValues request
	GetPublicDashboardUuidFieldFieldIdValues(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidParamsParamKeySearchQuery request
	GetPublicDashboardUuidParamsParamKeySearchQuery(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDashboardUuidParamsParamKeyValues request
	GetPublicDashboardUuidParamsParamKeyValues(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicOembed request
	GetPublicOembed(ctx context.Context, params *GetPublicOembedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicPivotCardUuidQuery request
	GetPublicPivotCardUuidQuery(ctx context.Context, uuid string, params *GetPublicPivotCardUuidQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId request
	GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulse request
	GetPulse(ctx context.Context, params *GetPulseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPulseWithBody request with any body
	PostPulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPulse(ctx context.Context, body PostPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulseFormInput request
	GetPulseFormInput(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulsePreviewCardId request
	GetPulsePreviewCardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulsePreviewCardInfoId request
	GetPulsePreviewCardInfoId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulsePreviewCardPngId request
	GetPulsePreviewCardPngId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulsePreviewDashboardId request
	GetPulsePreviewDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPulseTestWithBody request with any body
	PostPulseTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPulseTest(ctx context.Context, body PostPulseTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPulseId request
	GetPulseId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPulseIdWithBody request with any body
	PutPulseIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPulseId(ctx context.Context, id int, body PutPulseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePulseIdSubscription request
	DeletePulseIdSubscription(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRevision request
	GetRevision(ctx context.Context, params *GetRevisionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRevisionRevertWithBody request with any body
	PostRevisionRevertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRevisionRevert(ctx context.Context, body PostRevisionRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchForceReindex request
	PostSearchForceReindex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchModels request
	GetSearchModels(ctx context.Context, params *GetSearchModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegment request
	GetSegment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSegmentWithBody request with any body
	PostSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSegment(ctx context.Context, body PostSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSegmentId request
	DeleteSegmentId(ctx context.Context, id int, params *DeleteSegmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentId request
	GetSegmentId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSegmentIdWithBody request with any body
	PutSegmentIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSegmentId(ctx context.Context, id int, body PutSegmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentIdRelated request
	GetSegmentIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSegmentIdRevertWithBody request with any body
	PostSegmentIdRevertWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSegmentIdRevert(ctx context.Context, id int, body PostSegmentIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentIdRevisions request
	GetSegmentIdRevisions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionWithBody request with any body
	PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionForgotPasswordWithBody request with any body
	PostSessionForgotPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionForgotPassword(ctx context.Context, body PostSessionForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionGoogleAuthWithBody request with any body
	PostSessionGoogleAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionGoogleAuth(ctx context.Context, body PostSessionGoogleAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionPasswordResetTokenValid request
	GetSessionPasswordResetTokenValid(ctx context.Context, params *GetSessionPasswordResetTokenValidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionProperties request
	GetSessionProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionPulseUnsubscribeWithBody request with any body
	PostSessionPulseUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionPulseUnsubscribe(ctx context.Context, body PostSessionPulseUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionPulseUnsubscribeUndoWithBody request with any body
	PostSessionPulseUnsubscribeUndoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionPulseUnsubscribeUndo(ctx context.Context, body PostSessionPulseUnsubscribeUndoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSessionResetPasswordWithBody request with any body
	PostSessionResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSessionResetPassword(ctx context.Context, body PostSessionResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSetting request
	GetSetting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingWithBody request with any body
	PutSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSetting(ctx context.Context, body PutSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingKey request
	GetSettingKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingKey request
	PutSettingKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetupWithBody request with any body
	PostSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetup(ctx context.Context, body PostSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSetupAdminChecklist request
	GetSetupAdminChecklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSetupUserDefaults request
	GetSetupUserDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlackManifest request
	GetSlackManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSlackSettingsWithBody request with any body
	PutSlackSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSlackSettings(ctx context.Context, body PutSlackSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTable request
	GetTable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTableWithBody request with any body
	PutTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTable(ctx context.Context, body PutTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableCardIdFks request
	GetTableCardIdFks(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableCardIdQueryMetadata request
	GetTableCardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableId request
	GetTableId(ctx context.Context, id int, params *GetTableIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTableIdWithBody request with any body
	PutTableIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTableId(ctx context.Context, id int, body PutTableIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTableIdAppendCsv request
	PostTableIdAppendCsv(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTableIdDiscardValues request
	PostTableIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTableIdFieldsOrderWithBody request with any body
	PutTableIdFieldsOrderWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTableIdFieldsOrder(ctx context.Context, id int, body PutTableIdFieldsOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableIdFks request
	GetTableIdFks(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableIdQueryMetadata request
	GetTableIdQueryMetadata(ctx context.Context, id int, params *GetTableIdQueryMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableIdRelated request
	GetTableIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTableIdReplaceCsv request
	PostTableIdReplaceCsv(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTableIdRescanValues request
	PostTableIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskInfo request
	GetTaskInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskId request
	GetTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTilesZoomXYLatFieldLonField request
	GetTilesZoomXYLatFieldLonField(ctx context.Context, zoom int, x int, y int, latField string, lonField string, params *GetTilesZoomXYLatFieldLonFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTimelineEventWithBody request with any body
	PostTimelineEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTimelineEvent(ctx context.Context, body PostTimelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTimelineEventId request
	DeleteTimelineEventId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimelineEventId request
	GetTimelineEventId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTimelineEventIdWithBody request with any body
	PutTimelineEventIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTimelineEventId(ctx context.Context, id int, body PutTimelineEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeline request
	GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTimelineWithBody request with any body
	PostTimelineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTimeline(ctx context.Context, body PostTimelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTimelineId request
	DeleteTimelineId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimelineId request
	GetTimelineId(ctx context.Context, id int, params *GetTimelineIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTimelineIdWithBody request with any body
	PutTimelineIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTimelineId(ctx context.Context, id int, body PutTimelineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserWithBody request with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCurrent request
	GetUserCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRecipients request
	GetUserRecipients(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserId request
	DeleteUserId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserId request
	GetUserId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdWithBody request with any body
	PutUserIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserId(ctx context.Context, id int, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdModalModal request
	PutUserIdModalModal(ctx context.Context, id int, modal string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdPasswordWithBody request with any body
	PutUserIdPasswordWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserIdPassword(ctx context.Context, id int, body PutUserIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserIdReactivate request
	PutUserIdReactivate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserIdSendInvite request
	PostUserIdSendInvite(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUtilBugReportDetails request
	GetUtilBugReportDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUtilDiagnosticInfoConnectionPoolInfo request
	GetUtilDiagnosticInfoConnectionPoolInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUtilEntityIdWithBody request with any body
	PostUtilEntityIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUtilEntityId(ctx context.Context, body PostUtilEntityIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUtilLogs request
	GetUtilLogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUtilPasswordCheckWithBody request with any body
	PostUtilPasswordCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUtilPasswordCheck(ctx context.Context, body PostUtilPasswordCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUtilProductFeedbackWithBody request with any body
	PostUtilProductFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUtilProductFeedback(ctx context.Context, body PostUtilProductFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUtilRandomToken request
	GetUtilRandomToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUtilStats request
	GetUtilStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAction(ctx context.Context, params *GetActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAction(ctx context.Context, body PostActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActionPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActionPublicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActionActionId(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActionActionIdRequest(c.Server, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActionActionId(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActionActionIdRequest(c.Server, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActionActionIdExecute(ctx context.Context, actionId int, params *GetActionActionIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActionActionIdExecuteRequest(c.Server, actionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActionIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActionIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActionId(ctx context.Context, id int, body PutActionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActionIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActionIdExecuteWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionIdExecuteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActionIdExecute(ctx context.Context, id int, body PostActionIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionIdExecuteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActionIdPublicLink(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActionIdPublicLinkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActionIdPublicLink(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActionIdPublicLinkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityMostRecentlyViewedDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityMostRecentlyViewedDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityPopularItems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityPopularItemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityRecentViews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityRecentViewsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityRecents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityRecentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivityRecentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivityRecentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivityRecents(ctx context.Context, body PostActivityRecentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivityRecentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlert(ctx context.Context, params *GetAlertParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlert(ctx context.Context, body PostAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertQuestionId(ctx context.Context, id int, params *GetAlertQuestionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertQuestionIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertId(ctx context.Context, id int, body PutAlertIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertIdSubscription(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertIdSubscriptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiKey(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeyCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKeyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiKeyIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiKeyIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiKeyId(ctx context.Context, id int, body PutApiKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiKeyIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiKeyIdRegenerate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiKeyIdRegenerateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsDatabaseIdCandidates(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsDatabaseIdCandidatesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkId(ctx context.Context, modelIndexId int, pkId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdRequest(c.Server, modelIndexId, pkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity, entityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryRequest(c.Server, entity, entityIdOrQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRequest(c.Server, entity, entityIdOrQuery, cellQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest(c.Server, entity, entityIdOrQuery, cellQuery, comparisonEntity, comparisonEntityIdOrQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateRequest(c.Server, entity, entityIdOrQuery, cellQuery, prefix, dashboardTemplate, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest(c.Server, entity, entityIdOrQuery, cellQuery, prefix, dashboardTemplate, comparisonEntity, comparisonEntityIdOrQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest(c.Server, entity, entityIdOrQuery, comparisonEntity, comparisonEntityIdOrQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity, entityIdOrQuery string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataRequest(c.Server, entity, entityIdOrQuery)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateRequest(c.Server, entity, entityIdOrQuery, prefix, dashboardTemplate, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest(c.Server, entity, entityIdOrQuery, prefix, dashboardTemplate, comparisonEntity, comparisonEntityIdOrQuery, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmark(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBookmarkOrderingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookmarkOrderingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBookmarkOrdering(ctx context.Context, body PutBookmarkOrderingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookmarkOrderingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarkModelId(ctx context.Context, model DeleteBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarkModelIdRequest(c.Server, model, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarkModelId(ctx context.Context, model PostBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarkModelIdRequest(c.Server, model, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCacheRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCache(ctx context.Context, body DeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCacheRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCache(ctx context.Context, params *GetCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCacheRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCacheRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCache(ctx context.Context, body PutCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCacheRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCacheInvalidate(ctx context.Context, params *PostCacheInvalidateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCacheInvalidateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCard(ctx context.Context, params *GetCardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCard(ctx context.Context, body PostCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCollectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCollections(ctx context.Context, body PostCardCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCollectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardEmbeddable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardEmbeddableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardFromCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardFromCsvRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardPivotCardIdQueryWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardPivotCardIdQueryRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardPivotCardIdQuery(ctx context.Context, cardId int, body PostCardPivotCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardPivotCardIdQueryRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardPublicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardCardIdParamsParamKeySearchQuery(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardCardIdParamsParamKeySearchQueryRequest(c.Server, cardId, paramKey, query)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardCardIdParamsParamKeyValues(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardCardIdParamsParamKeyValuesRequest(c.Server, cardId, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdPersist(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdPersistRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCardCardIdPublicLink(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCardCardIdPublicLinkRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdPublicLink(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdPublicLinkRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdQueryWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdQueryRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdQuery(ctx context.Context, cardId int, body PostCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdQueryRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdQueryExportFormatWithBody(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdQueryExportFormatRequestWithBody(c.Server, cardId, exportFormat, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdQueryExportFormat(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, body PostCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdQueryExportFormatRequest(c.Server, cardId, exportFormat, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdRefresh(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdRefreshRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardCardIdUnpersist(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardCardIdUnpersistRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCardIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardId(ctx context.Context, id int, params *GetCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCardIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCardIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCardId(ctx context.Context, id int, body PutCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCardIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardIdCopy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardIdCopyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardIdQueryMetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardIdSeries(ctx context.Context, id int, params *GetCardIdSeriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardIdSeriesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardIdTimelines(ctx context.Context, id int, params *GetCardIdTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardIdTimelinesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannel(ctx context.Context, body PostChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelTest(ctx context.Context, body PostChannelTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelId(ctx context.Context, id int, body PutChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudMigration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudMigrationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCloudMigration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloudMigrationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCloudMigrationCancel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCloudMigrationCancelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollection(ctx context.Context, params *GetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollection(ctx context.Context, body PostCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionGraph(ctx context.Context, params *GetCollectionGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionGraphRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCollectionGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCollectionGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCollectionGraph(ctx context.Context, body PutCollectionGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCollectionGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionRoot(ctx context.Context, params *GetCollectionRootParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRootRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionRootItems(ctx context.Context, params *GetCollectionRootItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRootItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionRootTimelines(ctx context.Context, params *GetCollectionRootTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRootTimelinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionTrashRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionTree(ctx context.Context, params *GetCollectionTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionTreeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCollectionIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCollectionIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCollectionId(ctx context.Context, id int, body PutCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCollectionIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionIdItems(ctx context.Context, id int, params *GetCollectionIdItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionIdItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionIdTimelines(ctx context.Context, id int, params *GetCollectionIdTimelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionIdTimelinesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboard(ctx context.Context, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboard(ctx context.Context, body PostDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardEmbeddable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardEmbeddableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardParamsValidFilterFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardParamsValidFilterFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(c.Server, dashboardId, dashcardId, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequest(c.Server, dashboardId, dashcardId, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardPublic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardPublicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardSaveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardSaveCollectionParentCollectionId(ctx context.Context, parentCollectionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardSaveCollectionParentCollectionIdRequest(c.Server, parentCollectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(c.Server, dashboardId, dashcardId, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequest(c.Server, dashboardId, dashcardId, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBody(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequestWithBody(c.Server, dashboardId, dashcardId, cardId, exportFormat, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequest(c.Server, dashboardId, dashcardId, cardId, exportFormat, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardDashboardIdDashcardDashcardIdExecute(ctx context.Context, dashboardId int, dashcardId int, params *GetDashboardDashboardIdDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardDashboardIdDashcardDashcardIdExecuteRequest(c.Server, dashboardId, dashcardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdExecuteWithBody(ctx context.Context, dashboardId int, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequestWithBody(c.Server, dashboardId, dashcardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdDashcardDashcardIdExecute(ctx context.Context, dashboardId int, dashcardId int, body PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequest(c.Server, dashboardId, dashcardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardDashboardIdPublicLink(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardDashboardIdPublicLinkRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardDashboardIdPublicLink(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardDashboardIdPublicLinkRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardFromDashboardIdCopyWithBody(ctx context.Context, fromDashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardFromDashboardIdCopyRequestWithBody(c.Server, fromDashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardFromDashboardIdCopy(ctx context.Context, fromDashboardId int, body PostDashboardFromDashboardIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardFromDashboardIdCopyRequest(c.Server, fromDashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardId(ctx context.Context, id int, body PutDashboardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardIdCardsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardIdCardsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardIdCards(ctx context.Context, id int, body PutDashboardIdCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardIdCardsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardIdParamsParamKeySearchQuery(ctx context.Context, id int, paramKey string, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdParamsParamKeySearchQueryRequest(c.Server, id, paramKey, query)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardIdParamsParamKeyValues(ctx context.Context, id int, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdParamsParamKeyValuesRequest(c.Server, id, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdQueryMetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdRelatedRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardIdRevertWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardIdRevertRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardIdRevert(ctx context.Context, id int, body PostDashboardIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardIdRevertRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardIdRevisions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardIdRevisionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabase(ctx context.Context, params *GetDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabase(ctx context.Context, body PostDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseSampleDatabase(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseSampleDatabaseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseValidate(ctx context.Context, body PostDatabaseValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseValidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabaseId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseId(ctx context.Context, id int, params *GetDatabaseIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDatabaseIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDatabaseIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDatabaseId(ctx context.Context, id int, body PutDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDatabaseIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdAutocompleteSuggestions(ctx context.Context, id int, params *GetDatabaseIdAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdAutocompleteSuggestionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdCardAutocompleteSuggestions(ctx context.Context, id int, params *GetDatabaseIdCardAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdCardAutocompleteSuggestionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdDiscardValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdDismissSpinner(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdDismissSpinnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdFields(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdFieldsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdIdfields(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdIdfieldsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdMetadata(ctx context.Context, id int, params *GetDatabaseIdMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdMetadataRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdPersist(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdPersistRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdRescanValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdSchema(ctx context.Context, id int, params *GetDatabaseIdSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdSchemaRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdSchemaSchema(ctx context.Context, id int, schema string, params *GetDatabaseIdSchemaSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdSchemaSchemaRequest(c.Server, id, schema, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdSchemas(ctx context.Context, id int, params *GetDatabaseIdSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdSchemasRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdSyncSchema(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdSyncSchemaRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdSyncableSchemas(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdSyncableSchemasRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabaseIdUnpersist(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabaseIdUnpersistRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseIdUsageInfo(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseIdUsageInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseVirtualDbDatasets(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseVirtualDbDatasetsRequest(c.Server, virtualDb)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseVirtualDbDatasetsSchema(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseVirtualDbDatasetsSchemaRequest(c.Server, virtualDb, schema)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseVirtualDbMetadata(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseVirtualDbMetadataRequest(c.Server, virtualDb)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseVirtualDbSchemaSchema(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseVirtualDbSchemaSchemaRequest(c.Server, virtualDb, schema)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabaseVirtualDbSchemas(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseVirtualDbSchemasRequest(c.Server, virtualDb)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDataset(ctx context.Context, body PostDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetNativeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetNativeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetNative(ctx context.Context, body PostDatasetNativeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetNativeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetParameterSearchQueryWithBody(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetParameterSearchQueryRequestWithBody(c.Server, query, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetParameterSearchQuery(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, body PostDatasetParameterSearchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetParameterSearchQueryRequest(c.Server, query, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetParameterValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetParameterValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetParameterValues(ctx context.Context, body PostDatasetParameterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetParameterValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetPivotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetPivotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetPivot(ctx context.Context, body PostDatasetPivotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetPivotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetQueryMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetQueryMetadataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetQueryMetadata(ctx context.Context, body PostDatasetQueryMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetQueryMetadataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetExportFormatWithBody(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetExportFormatRequestWithBody(c.Server, exportFormat, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatasetExportFormat(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, body PostDatasetExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatasetExportFormatRequest(c.Server, exportFormat, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmail(ctx context.Context, body PutEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmailTest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmailTestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenFieldFieldIdRemappingRemappedId(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenFieldFieldIdRemappingRemappedIdRequest(c.Server, token, fieldId, remappedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenFieldFieldIdSearchSearchFieldId(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdRequest(c.Server, token, fieldId, searchFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenFieldFieldIdValues(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenFieldFieldIdValuesRequest(c.Server, token, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenParamsParamKeySearchPrefix(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenParamsParamKeySearchPrefixRequest(c.Server, token, paramKey, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenParamsParamKeyValuesRequest(c.Server, token, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenQuery(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenQueryRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedCardTokenQueryExportFormat(ctx context.Context, token string, exportFormat GetEmbedCardTokenQueryExportFormatParamsExportFormat, params *GetEmbedCardTokenQueryExportFormatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedCardTokenQueryExportFormatRequest(c.Server, token, exportFormat, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest(c.Server, token, dashcardId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat(ctx context.Context, token string, dashcardId int, cardId int, exportFormat GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatRequest(c.Server, token, dashcardId, cardId, exportFormat, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdRequest(c.Server, token, fieldId, remappedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdRequest(c.Server, token, fieldId, searchFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenFieldFieldIdValues(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenFieldFieldIdValuesRequest(c.Server, token, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenParamsParamKeySearchPrefix(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenParamsParamKeySearchPrefixRequest(c.Server, token, paramKey, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedDashboardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedDashboardTokenParamsParamKeyValuesRequest(c.Server, token, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedPivotCardTokenQuery(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedPivotCardTokenQueryRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest(c.Server, token, dashcardId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldId(ctx context.Context, id int, params *GetFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFieldIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFieldIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFieldId(ctx context.Context, id int, body PutFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFieldIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFieldIdDimension(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFieldIdDimensionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdDimensionWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdDimensionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdDimension(ctx context.Context, id int, body PostFieldIdDimensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdDimensionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdDiscardValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdRelatedRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldIdRemappingRemappedId(ctx context.Context, id int, remappedId int, params *GetFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdRemappingRemappedIdRequest(c.Server, id, remappedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdRescanValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldIdSearchSearchId(ctx context.Context, id int, searchId int, params *GetFieldIdSearchSearchIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdSearchSearchIdRequest(c.Server, id, searchId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldIdSummary(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdSummaryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFieldIdValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldIdValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdValuesWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdValuesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFieldIdValues(ctx context.Context, id int, body PostFieldIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFieldIdValuesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeojson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeojsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeojsonKey(ctx context.Context, key MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeojsonKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGoogleSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGoogleSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGoogleSettings(ctx context.Context, body PutGoogleSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGoogleSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdapSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLdapSettings(ctx context.Context, body PutLdapSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLdapSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoginHistoryCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginHistoryCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotDatabaseDatabaseIdWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotDatabaseDatabaseIdRequestWithBody(c.Server, databaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotDatabaseDatabaseId(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotDatabaseDatabaseIdRequest(c.Server, databaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotDatabaseDatabaseIdQueryWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotDatabaseDatabaseIdQueryRequestWithBody(c.Server, databaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotDatabaseDatabaseIdQuery(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotDatabaseDatabaseIdQueryRequest(c.Server, databaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotFeedbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotModelModelIdWithBody(ctx context.Context, modelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotModelModelIdRequestWithBody(c.Server, modelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetabotModelModelId(ctx context.Context, modelId int, body PostMetabotModelModelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetabotModelModelIdRequest(c.Server, modelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelIndex(ctx context.Context, params *GetModelIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostModelIndexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostModelIndexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostModelIndex(ctx context.Context, body PostModelIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostModelIndexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModelIndexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelIndexIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelIndexId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelIndexIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNativeQuerySnippet(ctx context.Context, params *GetNativeQuerySnippetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNativeQuerySnippetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNativeQuerySnippetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNativeQuerySnippetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNativeQuerySnippet(ctx context.Context, body PostNativeQuerySnippetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNativeQuerySnippetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNativeQuerySnippetId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNativeQuerySnippetIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNativeQuerySnippetIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNativeQuerySnippetIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNativeQuerySnippetId(ctx context.Context, id int, body PutNativeQuerySnippetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNativeQuerySnippetIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifyDbIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifyDbIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifyDbId(ctx context.Context, id int, body PostNotifyDbIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifyDbIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifyDbIdNewTableWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifyDbIdNewTableRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotifyDbIdNewTable(ctx context.Context, id int, body PostNotifyDbIdNewTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotifyDbIdNewTableRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGraphRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsGraph(ctx context.Context, body PutPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGraphDbDbId(ctx context.Context, dbId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGraphDbDbIdRequest(c.Server, dbId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGraphGroupGroupId(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGraphGroupGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGroup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGroupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsGroup(ctx context.Context, body PostPermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionsGroupGroupId(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionsGroupGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsGroupGroupIdWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsGroupGroupIdRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsGroupGroupId(ctx context.Context, groupId int, body PutPermissionsGroupGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsGroupGroupIdRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGroupId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGroupIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsMembership(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsMembershipRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsMembershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsMembershipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsMembership(ctx context.Context, body PostPermissionsMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsMembershipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsMembershipGroupIdClear(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsMembershipGroupIdClearRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionsMembershipId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionsMembershipIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsMembershipIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsMembershipIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsMembershipId(ctx context.Context, id int, body PutPermissionsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsMembershipIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersistCardCardId(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersistCardCardIdRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPersistDisable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPersistDisableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPersistEnable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPersistEnableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPersistSetRefreshScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPersistSetRefreshScheduleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPersistSetRefreshSchedule(ctx context.Context, body PostPersistSetRefreshScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPersistSetRefreshScheduleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersistPersistedInfoId(ctx context.Context, persistedInfoId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersistPersistedInfoIdRequest(c.Server, persistedInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPremiumFeaturesTokenStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPremiumFeaturesTokenStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedCardToken(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedCardTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedCardTokenQuery(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedCardTokenQueryRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedDashboardToken(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedDashboardTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest(c.Server, token, dashcardId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedDashboardTokenParamsParamKeyValues(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedDashboardTokenParamsParamKeyValuesRequest(c.Server, token, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedPivotCardTokenQuery(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedPivotCardTokenQueryRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest(c.Server, token, dashcardId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicActionUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicActionUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicActionUuidExecuteWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicActionUuidExecuteRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicActionUuidExecute(ctx context.Context, uuid string, body PostPublicActionUuidExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicActionUuidExecuteRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidFieldFieldIdRemappingRemappedId(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidFieldFieldIdRemappingRemappedIdRequest(c.Server, uuid, fieldId, remappedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidFieldFieldIdSearchSearchFieldId(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidFieldFieldIdSearchSearchFieldIdRequest(c.Server, uuid, fieldId, searchFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidFieldFieldIdValues(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidFieldFieldIdValuesRequest(c.Server, uuid, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidParamsParamKeySearchQuery(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidParamsParamKeySearchQueryRequest(c.Server, uuid, paramKey, query)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidParamsParamKeyValues(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidParamsParamKeyValuesRequest(c.Server, uuid, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidQuery(ctx context.Context, uuid string, params *GetPublicCardUuidQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidQueryRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicCardUuidQueryExportFormat(ctx context.Context, uuid string, exportFormat GetPublicCardUuidQueryExportFormatParamsExportFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicCardUuidQueryExportFormatRequest(c.Server, uuid, exportFormat)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidDashcardDashcardIdCardCardId(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidDashcardDashcardIdCardCardIdRequest(c.Server, uuid, dashcardId, cardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBody(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequestWithBody(c.Server, uuid, dashcardId, cardId, exportFormat, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, body PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequest(c.Server, uuid, dashcardId, cardId, exportFormat, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidDashcardDashcardIdExecute(ctx context.Context, uuid string, dashcardId int, params *GetPublicDashboardUuidDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidDashcardDashcardIdExecuteRequest(c.Server, uuid, dashcardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicDashboardUuidDashcardDashcardIdExecuteWithBody(ctx context.Context, uuid string, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequestWithBody(c.Server, uuid, dashcardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublicDashboardUuidDashcardDashcardIdExecute(ctx context.Context, uuid string, dashcardId int, body PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequest(c.Server, uuid, dashcardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidFieldFieldIdRemappingRemappedId(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdRequest(c.Server, uuid, fieldId, remappedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdRequest(c.Server, uuid, fieldId, searchFieldId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidFieldFieldIdValues(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidFieldFieldIdValuesRequest(c.Server, uuid, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidParamsParamKeySearchQuery(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidParamsParamKeySearchQueryRequest(c.Server, uuid, paramKey, query)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDashboardUuidParamsParamKeyValues(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDashboardUuidParamsParamKeyValuesRequest(c.Server, uuid, paramKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicOembed(ctx context.Context, params *GetPublicOembedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicOembedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicPivotCardUuidQuery(ctx context.Context, uuid string, params *GetPublicPivotCardUuidQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicPivotCardUuidQueryRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdRequest(c.Server, uuid, dashcardId, cardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulse(ctx context.Context, params *GetPulseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPulseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPulseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPulse(ctx context.Context, body PostPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPulseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulseFormInput(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseFormInputRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulsePreviewCardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulsePreviewCardIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulsePreviewCardInfoId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulsePreviewCardInfoIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulsePreviewCardPngId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulsePreviewCardPngIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulsePreviewDashboardId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulsePreviewDashboardIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPulseTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPulseTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPulseTest(ctx context.Context, body PostPulseTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPulseTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPulseId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPulseIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPulseIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPulseIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPulseId(ctx context.Context, id int, body PutPulseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPulseIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePulseIdSubscription(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePulseIdSubscriptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRevision(ctx context.Context, params *GetRevisionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRevisionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionRevertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionRevertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionRevert(ctx context.Context, body PostRevisionRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionRevertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchForceReindex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchForceReindexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchModels(ctx context.Context, params *GetSearchModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchModelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSegmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSegment(ctx context.Context, body PostSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSegmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSegmentId(ctx context.Context, id int, params *DeleteSegmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSegmentIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSegmentIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSegmentIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSegmentId(ctx context.Context, id int, body PutSegmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSegmentIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentIdRelatedRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSegmentIdRevertWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSegmentIdRevertRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSegmentIdRevert(ctx context.Context, id int, body PostSegmentIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSegmentIdRevertRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentIdRevisions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentIdRevisionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSession(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionForgotPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionForgotPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionForgotPassword(ctx context.Context, body PostSessionForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionForgotPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionGoogleAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionGoogleAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionGoogleAuth(ctx context.Context, body PostSessionGoogleAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionGoogleAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionPasswordResetTokenValid(ctx context.Context, params *GetSessionPasswordResetTokenValidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionPasswordResetTokenValidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionPropertiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionPulseUnsubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionPulseUnsubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionPulseUnsubscribe(ctx context.Context, body PostSessionPulseUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionPulseUnsubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionPulseUnsubscribeUndoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionPulseUnsubscribeUndoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionPulseUnsubscribeUndo(ctx context.Context, body PostSessionPulseUnsubscribeUndoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionPulseUnsubscribeUndoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSessionResetPassword(ctx context.Context, body PostSessionResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSessionResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSetting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSetting(ctx context.Context, body PutSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetup(ctx context.Context, body PostSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSetupAdminChecklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSetupAdminChecklistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSetupUserDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSetupUserDefaultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlackManifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlackManifestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlackSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlackSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlackSettings(ctx context.Context, body PutSlackSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlackSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTable(ctx context.Context, body PutTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableCardIdFks(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableCardIdFksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableCardIdQueryMetadata(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableCardIdQueryMetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableId(ctx context.Context, id int, params *GetTableIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTableIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTableId(ctx context.Context, id int, body PutTableIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTableIdAppendCsv(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTableIdAppendCsvRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTableIdDiscardValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTableIdDiscardValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTableIdFieldsOrderWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableIdFieldsOrderRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTableIdFieldsOrder(ctx context.Context, id int, body PutTableIdFieldsOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTableIdFieldsOrderRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableIdFks(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableIdFksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableIdQueryMetadata(ctx context.Context, id int, params *GetTableIdQueryMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableIdQueryMetadataRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableIdRelated(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableIdRelatedRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTableIdReplaceCsv(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTableIdReplaceCsvRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTableIdRescanValues(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTableIdRescanValuesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTilesZoomXYLatFieldLonField(ctx context.Context, zoom int, x int, y int, latField string, lonField string, params *GetTilesZoomXYLatFieldLonFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTilesZoomXYLatFieldLonFieldRequest(c.Server, zoom, x, y, latField, lonField, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimelineEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelineEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimelineEvent(ctx context.Context, body PostTimelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelineEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTimelineEventId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTimelineEventIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimelineEventId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelineEventIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimelineEventIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimelineEventIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimelineEventId(ctx context.Context, id int, body PutTimelineEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimelineEventIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimelineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimeline(ctx context.Context, body PostTimelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimelineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTimelineId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTimelineIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimelineId(ctx context.Context, id int, params *GetTimelineIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelineIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimelineIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimelineIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimelineId(ctx context.Context, id int, body PutTimelineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimelineIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRecipients(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRecipientsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserId(ctx context.Context, id int, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdModalModal(ctx context.Context, id int, modal string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdModalModalRequest(c.Server, id, modal)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdPasswordWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdPassword(ctx context.Context, id int, body PutUserIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserIdReactivate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserIdReactivateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserIdSendInvite(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserIdSendInviteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUtilBugReportDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUtilBugReportDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUtilDiagnosticInfoConnectionPoolInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUtilDiagnosticInfoConnectionPoolInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilEntityIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilEntityIdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilEntityId(ctx context.Context, body PostUtilEntityIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilEntityIdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUtilLogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUtilLogsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilPasswordCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilPasswordCheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilPasswordCheck(ctx context.Context, body PostUtilPasswordCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilPasswordCheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilProductFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilProductFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUtilProductFeedback(ctx context.Context, body PostUtilProductFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUtilProductFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUtilRandomToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUtilRandomTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUtilStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUtilStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetActionRequest generates requests for GetAction
func NewGetActionRequest(server string, params *GetActionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ModelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model-id", runtime.ParamLocationQuery, *params.ModelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActionRequest calls the generic PostAction builder with application/json body
func NewPostActionRequest(server string, body PostActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActionRequestWithBody generates requests for PostAction with any type of body
func NewPostActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActionPublicRequest generates requests for GetActionPublic
func NewGetActionPublicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/public")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteActionActionIdRequest generates requests for DeleteActionActionId
func NewDeleteActionActionIdRequest(server string, actionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action-id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActionActionIdRequest generates requests for GetActionActionId
func NewGetActionActionIdRequest(server string, actionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action-id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActionActionIdExecuteRequest generates requests for GetActionActionIdExecute
func NewGetActionActionIdExecuteRequest(server string, actionId int, params *GetActionActionIdExecuteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action-id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s/execute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, params.Parameters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutActionIdRequest calls the generic PutActionId builder with application/json body
func NewPutActionIdRequest(server string, id int, body PutActionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutActionIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutActionIdRequestWithBody generates requests for PutActionId with any type of body
func NewPutActionIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostActionIdExecuteRequest calls the generic PostActionIdExecute builder with application/json body
func NewPostActionIdExecuteRequest(server string, id int, body PostActionIdExecuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActionIdExecuteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostActionIdExecuteRequestWithBody generates requests for PostActionIdExecute with any type of body
func NewPostActionIdExecuteRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s/execute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActionIdPublicLinkRequest generates requests for DeleteActionIdPublicLink
func NewDeleteActionIdPublicLinkRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActionIdPublicLinkRequest generates requests for PostActionIdPublicLink
func NewPostActionIdPublicLinkRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/action/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityMostRecentlyViewedDashboardRequest generates requests for GetActivityMostRecentlyViewedDashboard
func NewGetActivityMostRecentlyViewedDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/most_recently_viewed_dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityPopularItemsRequest generates requests for GetActivityPopularItems
func NewGetActivityPopularItemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/popular_items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityRecentViewsRequest generates requests for GetActivityRecentViews
func NewGetActivityRecentViewsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/recent_views")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityRecentsRequest generates requests for GetActivityRecents
func NewGetActivityRecentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/recents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActivityRecentsRequest calls the generic PostActivityRecents builder with application/json body
func NewPostActivityRecentsRequest(server string, body PostActivityRecentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActivityRecentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActivityRecentsRequestWithBody generates requests for PostActivityRecents with any type of body
func NewPostActivityRecentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/recents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertRequest generates requests for GetAlert
func NewGetAlertRequest(server string, params *GetAlertParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertRequest calls the generic PostAlert builder with application/json body
func NewPostAlertRequest(server string, body PostAlertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertRequestWithBody generates requests for PostAlert with any type of body
func NewPostAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertQuestionIdRequest generates requests for GetAlertQuestionId
func NewGetAlertQuestionIdRequest(server string, id int, params *GetAlertQuestionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/question/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertIdRequest generates requests for GetAlertId
func NewGetAlertIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertIdRequest calls the generic PutAlertId builder with application/json body
func NewPutAlertIdRequest(server string, id int, body PutAlertIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAlertIdRequestWithBody generates requests for PutAlertId with any type of body
func NewPutAlertIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertIdSubscriptionRequest generates requests for DeleteAlertIdSubscription
func NewDeleteAlertIdSubscriptionRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiKeyRequest calls the generic PostApiKey builder with application/json body
func NewPostApiKeyRequest(server string, body PostApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiKeyRequestWithBody generates requests for PostApiKey with any type of body
func NewPostApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiKeyCountRequest generates requests for GetApiKeyCount
func NewGetApiKeyCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiKeyIdRequest generates requests for DeleteApiKeyId
func NewDeleteApiKeyIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiKeyIdRequest calls the generic PutApiKeyId builder with application/json body
func NewPutApiKeyIdRequest(server string, id int, body PutApiKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiKeyIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiKeyIdRequestWithBody generates requests for PutApiKeyId with any type of body
func NewPutApiKeyIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiKeyIdRegenerateRequest generates requests for PutApiKeyIdRegenerate
func NewPutApiKeyIdRegenerateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s/regenerate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsDatabaseIdCandidatesRequest generates requests for GetAutomagicDashboardsDatabaseIdCandidates
func NewGetAutomagicDashboardsDatabaseIdCandidatesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/database/%s/candidates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdRequest generates requests for GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkId
func NewGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdRequest(server string, modelIndexId int, pkId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model-index-id", runtime.ParamLocationPath, modelIndexId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk-id", runtime.ParamLocationPath, pkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/model_index/%s/primary_key/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity, entityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cell-query", runtime.ParamLocationPath, cellQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/cell/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cell-query", runtime.ParamLocationPath, cellQuery)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity", runtime.ParamLocationPath, comparisonEntity)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity-id-or-query", runtime.ParamLocationPath, comparisonEntityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/cell/%s/compare/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate
func NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cell-query", runtime.ParamLocationPath, cellQuery)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "dashboard-template", runtime.ParamLocationPath, dashboardTemplate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/cell/%s/rule/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cell-query", runtime.ParamLocationPath, cellQuery)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "dashboard-template", runtime.ParamLocationPath, dashboardTemplate)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity", runtime.ParamLocationPath, comparisonEntity)
	if err != nil {
		return nil, err
	}

	var pathParam6 string

	pathParam6, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity-id-or-query", runtime.ParamLocationPath, comparisonEntityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/cell/%s/rule/%s/%s/compare/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5, pathParam6)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity", runtime.ParamLocationPath, comparisonEntity)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity-id-or-query", runtime.ParamLocationPath, comparisonEntityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/compare/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata
func NewGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity, entityIdOrQuery string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/query_metadata", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate
func NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dashboard-template", runtime.ParamLocationPath, dashboardTemplate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/rule/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest generates requests for GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery
func NewGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryRequest(server string, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity", runtime.ParamLocationPath, entity)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entity-id-or-query", runtime.ParamLocationPath, entityIdOrQuery)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dashboard-template", runtime.ParamLocationPath, dashboardTemplate)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity", runtime.ParamLocationPath, comparisonEntity)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "comparison-entity-id-or-query", runtime.ParamLocationPath, comparisonEntityIdOrQuery)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automagic-dashboards/%s/%s/rule/%s/%s/compare/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Show != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show", runtime.ParamLocationQuery, *params.Show); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookmarkRequest generates requests for GetBookmark
func NewGetBookmarkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmark/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBookmarkOrderingRequest calls the generic PutBookmarkOrdering builder with application/json body
func NewPutBookmarkOrderingRequest(server string, body PutBookmarkOrderingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBookmarkOrderingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutBookmarkOrderingRequestWithBody generates requests for PutBookmarkOrdering with any type of body
func NewPutBookmarkOrderingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmark/ordering")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBookmarkModelIdRequest generates requests for DeleteBookmarkModelId
func NewDeleteBookmarkModelIdRequest(server string, model DeleteBookmarkModelIdParamsModel, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmark/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBookmarkModelIdRequest generates requests for PostBookmarkModelId
func NewPostBookmarkModelIdRequest(server string, model PostBookmarkModelIdParamsModel, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmark/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCacheRequest calls the generic DeleteCache builder with application/json body
func NewDeleteCacheRequest(server string, body DeleteCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCacheRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCacheRequestWithBody generates requests for DeleteCache with any type of body
func NewDeleteCacheRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cache/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCacheRequest generates requests for GetCache
func NewGetCacheRequest(server string, params *GetCacheParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cache/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, params.Model); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Collection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection", runtime.ParamLocationQuery, *params.Collection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCacheRequest calls the generic PutCache builder with application/json body
func NewPutCacheRequest(server string, body PutCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCacheRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCacheRequestWithBody generates requests for PutCache with any type of body
func NewPutCacheRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cache/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCacheInvalidateRequest generates requests for PostCacheInvalidate
func NewPostCacheInvalidateRequest(server string, params *PostCacheInvalidateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cache/invalidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Database != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "database", runtime.ParamLocationQuery, *params.Database); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dashboard != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dashboard", runtime.ParamLocationQuery, *params.Dashboard); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Question != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "question", runtime.ParamLocationQuery, *params.Question); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardRequest generates requests for GetCard
func NewGetCardRequest(server string, params *GetCardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model_id", runtime.ParamLocationQuery, *params.ModelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardRequest calls the generic PostCard builder with application/json body
func NewPostCardRequest(server string, body PostCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCardRequestWithBody generates requests for PostCard with any type of body
func NewPostCardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardCollectionsRequest calls the generic PostCardCollections builder with application/json body
func NewPostCardCollectionsRequest(server string, body PostCardCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardCollectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCardCollectionsRequestWithBody generates requests for PostCardCollections with any type of body
func NewPostCardCollectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardEmbeddableRequest generates requests for GetCardEmbeddable
func NewGetCardEmbeddableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/embeddable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardFromCsvRequest generates requests for PostCardFromCsv
func NewPostCardFromCsvRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/from-csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardPivotCardIdQueryRequest calls the generic PostCardPivotCardIdQuery builder with application/json body
func NewPostCardPivotCardIdQueryRequest(server string, cardId int, body PostCardPivotCardIdQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardPivotCardIdQueryRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPostCardPivotCardIdQueryRequestWithBody generates requests for PostCardPivotCardIdQuery with any type of body
func NewPostCardPivotCardIdQueryRequestWithBody(server string, cardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/pivot/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardPublicRequest generates requests for GetCardPublic
func NewGetCardPublicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/public")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardCardIdParamsParamKeySearchQueryRequest generates requests for GetCardCardIdParamsParamKeySearchQuery
func NewGetCardCardIdParamsParamKeySearchQueryRequest(server string, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardCardIdParamsParamKeyValuesRequest generates requests for GetCardCardIdParamsParamKeyValues
func NewGetCardCardIdParamsParamKeyValuesRequest(server string, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardCardIdPersistRequest generates requests for PostCardCardIdPersist
func NewPostCardCardIdPersistRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/persist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCardCardIdPublicLinkRequest generates requests for DeleteCardCardIdPublicLink
func NewDeleteCardCardIdPublicLinkRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardCardIdPublicLinkRequest generates requests for PostCardCardIdPublicLink
func NewPostCardCardIdPublicLinkRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardCardIdQueryRequest calls the generic PostCardCardIdQuery builder with application/json body
func NewPostCardCardIdQueryRequest(server string, cardId int, body PostCardCardIdQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardCardIdQueryRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPostCardCardIdQueryRequestWithBody generates requests for PostCardCardIdQuery with any type of body
func NewPostCardCardIdQueryRequestWithBody(server string, cardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardCardIdQueryExportFormatRequest calls the generic PostCardCardIdQueryExportFormat builder with application/json body
func NewPostCardCardIdQueryExportFormatRequest(server string, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, body PostCardCardIdQueryExportFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardCardIdQueryExportFormatRequestWithBody(server, cardId, exportFormat, "application/json", bodyReader)
}

// NewPostCardCardIdQueryExportFormatRequestWithBody generates requests for PostCardCardIdQueryExportFormat with any type of body
func NewPostCardCardIdQueryExportFormatRequestWithBody(server string, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/query/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardCardIdRefreshRequest generates requests for PostCardCardIdRefresh
func NewPostCardCardIdRefreshRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardCardIdUnpersistRequest generates requests for PostCardCardIdUnpersist
func NewPostCardCardIdUnpersistRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/unpersist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCardIdRequest generates requests for DeleteCardId
func NewDeleteCardIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardIdRequest generates requests for GetCardId
func NewGetCardIdRequest(server string, id int, params *GetCardIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore_view", runtime.ParamLocationQuery, *params.IgnoreView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCardIdRequest calls the generic PutCardId builder with application/json body
func NewPutCardIdRequest(server string, id int, body PutCardIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCardIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCardIdRequestWithBody generates requests for PutCardId with any type of body
func NewPutCardIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardIdCopyRequest generates requests for PostCardIdCopy
func NewPostCardIdCopyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/copy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardIdQueryMetadataRequest generates requests for GetCardIdQueryMetadata
func NewGetCardIdQueryMetadataRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/query_metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardIdSeriesRequest generates requests for GetCardIdSeries
func NewGetCardIdSeriesRequest(server string, id int, params *GetCardIdSeriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/series", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LastCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_cursor", runtime.ParamLocationQuery, *params.LastCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_ids", runtime.ParamLocationQuery, *params.ExcludeIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardIdTimelinesRequest generates requests for GetCardIdTimelines
func NewGetCardIdTimelinesRequest(server string, id int, params *GetCardIdTimelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s/timelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelRequest generates requests for GetChannel
func NewGetChannelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channel/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChannelRequest calls the generic PostChannel builder with application/json body
func NewPostChannelRequest(server string, body PostChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChannelRequestWithBody generates requests for PostChannel with any type of body
func NewPostChannelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channel/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChannelTestRequest calls the generic PostChannelTest builder with application/json body
func NewPostChannelTestRequest(server string, body PostChannelTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChannelTestRequestWithBody generates requests for PostChannelTest with any type of body
func NewPostChannelTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channel/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChannelIdRequest generates requests for GetChannelId
func NewGetChannelIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChannelIdRequest calls the generic PutChannelId builder with application/json body
func NewPutChannelIdRequest(server string, id int, body PutChannelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChannelIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChannelIdRequestWithBody generates requests for PutChannelId with any type of body
func NewPutChannelIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCloudMigrationRequest generates requests for GetCloudMigration
func NewGetCloudMigrationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloud-migration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCloudMigrationRequest generates requests for PostCloudMigration
func NewPostCloudMigrationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloud-migration/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCloudMigrationCancelRequest generates requests for PutCloudMigrationCancel
func NewPutCloudMigrationCancelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cloud-migration/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRequest generates requests for GetCollection
func NewGetCollectionRequest(server string, params *GetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeOtherUserCollections != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude-other-user-collections", runtime.ParamLocationQuery, *params.ExcludeOtherUserCollections); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonalOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personal-only", runtime.ParamLocationQuery, *params.PersonalOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCollectionRequest calls the generic PostCollection builder with application/json body
func NewPostCollectionRequest(server string, body PostCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionRequestWithBody generates requests for PostCollection with any type of body
func NewPostCollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionGraphRequest generates requests for GetCollectionGraph
func NewGetCollectionGraphRequest(server string, params *GetCollectionGraphParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCollectionGraphRequest calls the generic PutCollectionGraph builder with application/json body
func NewPutCollectionGraphRequest(server string, body PutCollectionGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCollectionGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCollectionGraphRequestWithBody generates requests for PutCollectionGraph with any type of body
func NewPutCollectionGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionRootRequest generates requests for GetCollectionRoot
func NewGetCollectionRootRequest(server string, params *GetCollectionRootParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/root")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRootItemsRequest generates requests for GetCollectionRootItems
func NewGetCollectionRootItemsRequest(server string, params *GetCollectionRootItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/root/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Models != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "models", runtime.ParamLocationQuery, *params.Models); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PinnedState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pinned_state", runtime.ParamLocationQuery, *params.PinnedState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortColumn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_column", runtime.ParamLocationQuery, *params.SortColumn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_direction", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OfficialCollectionsFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "official_collections_first", runtime.ParamLocationQuery, *params.OfficialCollectionsFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRootTimelinesRequest generates requests for GetCollectionRootTimelines
func NewGetCollectionRootTimelinesRequest(server string, params *GetCollectionRootTimelinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/root/timelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionTrashRequest generates requests for GetCollectionTrash
func NewGetCollectionTrashRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/trash")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionTreeRequest generates requests for GetCollectionTree
func NewGetCollectionTreeRequest(server string, params *GetCollectionTreeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/tree")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude-archived", runtime.ParamLocationQuery, *params.ExcludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeOtherUserCollections != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude-other-user-collections", runtime.ParamLocationQuery, *params.ExcludeOtherUserCollections); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Namespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shallow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shallow", runtime.ParamLocationQuery, *params.Shallow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CollectionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection-id", runtime.ParamLocationQuery, *params.CollectionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionIdRequest generates requests for GetCollectionId
func NewGetCollectionIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCollectionIdRequest calls the generic PutCollectionId builder with application/json body
func NewPutCollectionIdRequest(server string, id int, body PutCollectionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCollectionIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCollectionIdRequestWithBody generates requests for PutCollectionId with any type of body
func NewPutCollectionIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionIdItemsRequest generates requests for GetCollectionIdItems
func NewGetCollectionIdItemsRequest(server string, id int, params *GetCollectionIdItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Models != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "models", runtime.ParamLocationQuery, *params.Models); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PinnedState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pinned_state", runtime.ParamLocationQuery, *params.PinnedState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortColumn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_column", runtime.ParamLocationQuery, *params.SortColumn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_direction", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OfficialCollectionsFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "official_collections_first", runtime.ParamLocationQuery, *params.OfficialCollectionsFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionIdTimelinesRequest generates requests for GetCollectionIdTimelines
func NewGetCollectionIdTimelinesRequest(server string, id int, params *GetCollectionIdTimelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s/timelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string, params *GetDashboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardRequest calls the generic PostDashboard builder with application/json body
func NewPostDashboardRequest(server string, body PostDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDashboardRequestWithBody generates requests for PostDashboard with any type of body
func NewPostDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardEmbeddableRequest generates requests for GetDashboardEmbeddable
func NewGetDashboardEmbeddableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/embeddable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardParamsValidFilterFieldsRequest generates requests for GetDashboardParamsValidFilterFields
func NewGetDashboardParamsValidFilterFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/params/valid-filter-fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequest calls the generic PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery builder with application/json body
func NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequest(server string, dashboardId int, dashcardId int, cardId int, body PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(server, dashboardId, dashcardId, cardId, "application/json", bodyReader)
}

// NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody generates requests for PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery with any type of body
func NewPostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(server string, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/pivot/%s/dashcard/%s/card/%s/query", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardPublicRequest generates requests for GetDashboardPublic
func NewGetDashboardPublicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/public")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardSaveRequest generates requests for PostDashboardSave
func NewPostDashboardSaveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/save")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardSaveCollectionParentCollectionIdRequest generates requests for PostDashboardSaveCollectionParentCollectionId
func NewPostDashboardSaveCollectionParentCollectionIdRequest(server string, parentCollectionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "parent-collection-id", runtime.ParamLocationPath, parentCollectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/save/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequest calls the generic PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery builder with application/json body
func NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequest(server string, dashboardId int, dashcardId int, cardId int, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(server, dashboardId, dashcardId, cardId, "application/json", bodyReader)
}

// NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody generates requests for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery with any type of body
func NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryRequestWithBody(server string, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/dashcard/%s/card/%s/query", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequest calls the generic PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat builder with application/json body
func NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequest(server string, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequestWithBody(server, dashboardId, dashcardId, cardId, exportFormat, "application/json", bodyReader)
}

// NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequestWithBody generates requests for PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat with any type of body
func NewPostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatRequestWithBody(server string, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/dashcard/%s/card/%s/query/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardDashboardIdDashcardDashcardIdExecuteRequest generates requests for GetDashboardDashboardIdDashcardDashcardIdExecute
func NewGetDashboardDashboardIdDashcardDashcardIdExecuteRequest(server string, dashboardId int, dashcardId int, params *GetDashboardDashboardIdDashcardDashcardIdExecuteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/dashcard/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, params.Parameters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequest calls the generic PostDashboardDashboardIdDashcardDashcardIdExecute builder with application/json body
func NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequest(server string, dashboardId int, dashcardId int, body PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequestWithBody(server, dashboardId, dashcardId, "application/json", bodyReader)
}

// NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequestWithBody generates requests for PostDashboardDashboardIdDashcardDashcardIdExecute with any type of body
func NewPostDashboardDashboardIdDashcardDashcardIdExecuteRequestWithBody(server string, dashboardId int, dashcardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/dashcard/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardDashboardIdPublicLinkRequest generates requests for DeleteDashboardDashboardIdPublicLink
func NewDeleteDashboardDashboardIdPublicLinkRequest(server string, dashboardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardDashboardIdPublicLinkRequest generates requests for PostDashboardDashboardIdPublicLink
func NewPostDashboardDashboardIdPublicLinkRequest(server string, dashboardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboard-id", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/public_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardFromDashboardIdCopyRequest calls the generic PostDashboardFromDashboardIdCopy builder with application/json body
func NewPostDashboardFromDashboardIdCopyRequest(server string, fromDashboardId int, body PostDashboardFromDashboardIdCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardFromDashboardIdCopyRequestWithBody(server, fromDashboardId, "application/json", bodyReader)
}

// NewPostDashboardFromDashboardIdCopyRequestWithBody generates requests for PostDashboardFromDashboardIdCopy with any type of body
func NewPostDashboardFromDashboardIdCopyRequestWithBody(server string, fromDashboardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "from-dashboard-id", runtime.ParamLocationPath, fromDashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/copy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardIdRequest generates requests for DeleteDashboardId
func NewDeleteDashboardIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardIdRequest generates requests for GetDashboardId
func NewGetDashboardIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDashboardIdRequest calls the generic PutDashboardId builder with application/json body
func NewPutDashboardIdRequest(server string, id int, body PutDashboardIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDashboardIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDashboardIdRequestWithBody generates requests for PutDashboardId with any type of body
func NewPutDashboardIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDashboardIdCardsRequest calls the generic PutDashboardIdCards builder with application/json body
func NewPutDashboardIdCardsRequest(server string, id int, body PutDashboardIdCardsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDashboardIdCardsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDashboardIdCardsRequestWithBody generates requests for PutDashboardIdCards with any type of body
func NewPutDashboardIdCardsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardIdParamsParamKeySearchQueryRequest generates requests for GetDashboardIdParamsParamKeySearchQuery
func NewGetDashboardIdParamsParamKeySearchQueryRequest(server string, id int, paramKey string, query MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardIdParamsParamKeyValuesRequest generates requests for GetDashboardIdParamsParamKeyValues
func NewGetDashboardIdParamsParamKeyValuesRequest(server string, id int, paramKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardIdQueryMetadataRequest generates requests for GetDashboardIdQueryMetadata
func NewGetDashboardIdQueryMetadataRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/query_metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardIdRelatedRequest generates requests for GetDashboardIdRelated
func NewGetDashboardIdRelatedRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/related", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardIdRevertRequest calls the generic PostDashboardIdRevert builder with application/json body
func NewPostDashboardIdRevertRequest(server string, id int, body PostDashboardIdRevertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardIdRevertRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostDashboardIdRevertRequestWithBody generates requests for PostDashboardIdRevert with any type of body
func NewPostDashboardIdRevertRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/revert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardIdRevisionsRequest generates requests for GetDashboardIdRevisions
func NewGetDashboardIdRevisionsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/revisions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseRequest generates requests for GetDatabase
func NewGetDatabaseRequest(server string, params *GetDatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeAnalytics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_analytics", runtime.ParamLocationQuery, *params.IncludeAnalytics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Saved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "saved", runtime.ParamLocationQuery, *params.Saved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeUneditableDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_uneditable_details", runtime.ParamLocationQuery, *params.ExcludeUneditableDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeOnlyUploadable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_only_uploadable", runtime.ParamLocationQuery, *params.IncludeOnlyUploadable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseRequest calls the generic PostDatabase builder with application/json body
func NewPostDatabaseRequest(server string, body PostDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatabaseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatabaseRequestWithBody generates requests for PostDatabase with any type of body
func NewPostDatabaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatabaseSampleDatabaseRequest generates requests for PostDatabaseSampleDatabase
func NewPostDatabaseSampleDatabaseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/sample_database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseValidateRequest calls the generic PostDatabaseValidate builder with application/json body
func NewPostDatabaseValidateRequest(server string, body PostDatabaseValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatabaseValidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatabaseValidateRequestWithBody generates requests for PostDatabaseValidate with any type of body
func NewPostDatabaseValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabaseIdRequest generates requests for DeleteDatabaseId
func NewDeleteDatabaseIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdRequest generates requests for GetDatabaseId
func NewGetDatabaseIdRequest(server string, id int, params *GetDatabaseIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDatabaseIdRequest calls the generic PutDatabaseId builder with application/json body
func NewPutDatabaseIdRequest(server string, id int, body PutDatabaseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDatabaseIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDatabaseIdRequestWithBody generates requests for PutDatabaseId with any type of body
func NewPutDatabaseIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabaseIdAutocompleteSuggestionsRequest generates requests for GetDatabaseIdAutocompleteSuggestions
func NewGetDatabaseIdAutocompleteSuggestionsRequest(server string, id int, params *GetDatabaseIdAutocompleteSuggestionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/autocomplete_suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Substring != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "substring", runtime.ParamLocationQuery, *params.Substring); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdCardAutocompleteSuggestionsRequest generates requests for GetDatabaseIdCardAutocompleteSuggestions
func NewGetDatabaseIdCardAutocompleteSuggestionsRequest(server string, id int, params *GetDatabaseIdCardAutocompleteSuggestionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/card_autocomplete_suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdDiscardValuesRequest generates requests for PostDatabaseIdDiscardValues
func NewPostDatabaseIdDiscardValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/discard_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdDismissSpinnerRequest generates requests for PostDatabaseIdDismissSpinner
func NewPostDatabaseIdDismissSpinnerRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/dismiss_spinner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdFieldsRequest generates requests for GetDatabaseIdFields
func NewGetDatabaseIdFieldsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/fields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdIdfieldsRequest generates requests for GetDatabaseIdIdfields
func NewGetDatabaseIdIdfieldsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/idfields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdMetadataRequest generates requests for GetDatabaseIdMetadata
func NewGetDatabaseIdMetadataRequest(server string, id int, params *GetDatabaseIdMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden", runtime.ParamLocationQuery, *params.IncludeHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoveInactive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remove_inactive", runtime.ParamLocationQuery, *params.RemoveInactive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_fields", runtime.ParamLocationQuery, *params.SkipFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdPersistRequest generates requests for PostDatabaseIdPersist
func NewPostDatabaseIdPersistRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/persist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdRescanValuesRequest generates requests for PostDatabaseIdRescanValues
func NewPostDatabaseIdRescanValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/rescan_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdSchemaRequest generates requests for GetDatabaseIdSchema
func NewGetDatabaseIdSchemaRequest(server string, id int, params *GetDatabaseIdSchemaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/schema/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden", runtime.ParamLocationQuery, *params.IncludeHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdSchemaSchemaRequest generates requests for GetDatabaseIdSchemaSchema
func NewGetDatabaseIdSchemaSchemaRequest(server string, id int, schema string, params *GetDatabaseIdSchemaSchemaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schema", runtime.ParamLocationPath, schema)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/schema/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden", runtime.ParamLocationQuery, *params.IncludeHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdSchemasRequest generates requests for GetDatabaseIdSchemas
func NewGetDatabaseIdSchemasRequest(server string, id int, params *GetDatabaseIdSchemasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden", runtime.ParamLocationQuery, *params.IncludeHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdSyncSchemaRequest generates requests for PostDatabaseIdSyncSchema
func NewPostDatabaseIdSyncSchemaRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/sync_schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdSyncableSchemasRequest generates requests for GetDatabaseIdSyncableSchemas
func NewGetDatabaseIdSyncableSchemasRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/syncable_schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabaseIdUnpersistRequest generates requests for PostDatabaseIdUnpersist
func NewPostDatabaseIdUnpersistRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/unpersist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseIdUsageInfoRequest generates requests for GetDatabaseIdUsageInfo
func NewGetDatabaseIdUsageInfoRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/usage_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseVirtualDbDatasetsRequest generates requests for GetDatabaseVirtualDbDatasets
func NewGetDatabaseVirtualDbDatasetsRequest(server string, virtualDb string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual-db", runtime.ParamLocationPath, virtualDb)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseVirtualDbDatasetsSchemaRequest generates requests for GetDatabaseVirtualDbDatasetsSchema
func NewGetDatabaseVirtualDbDatasetsSchemaRequest(server string, virtualDb string, schema string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual-db", runtime.ParamLocationPath, virtualDb)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schema", runtime.ParamLocationPath, schema)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseVirtualDbMetadataRequest generates requests for GetDatabaseVirtualDbMetadata
func NewGetDatabaseVirtualDbMetadataRequest(server string, virtualDb string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual-db", runtime.ParamLocationPath, virtualDb)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseVirtualDbSchemaSchemaRequest generates requests for GetDatabaseVirtualDbSchemaSchema
func NewGetDatabaseVirtualDbSchemaSchemaRequest(server string, virtualDb string, schema string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual-db", runtime.ParamLocationPath, virtualDb)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schema", runtime.ParamLocationPath, schema)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/schema/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseVirtualDbSchemasRequest generates requests for GetDatabaseVirtualDbSchemas
func NewGetDatabaseVirtualDbSchemasRequest(server string, virtualDb string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual-db", runtime.ParamLocationPath, virtualDb)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s/schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatasetRequest calls the generic PostDataset builder with application/json body
func NewPostDatasetRequest(server string, body PostDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatasetRequestWithBody generates requests for PostDataset with any type of body
func NewPostDatasetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetNativeRequest calls the generic PostDatasetNative builder with application/json body
func NewPostDatasetNativeRequest(server string, body PostDatasetNativeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetNativeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatasetNativeRequestWithBody generates requests for PostDatasetNative with any type of body
func NewPostDatasetNativeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/native")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetParameterSearchQueryRequest calls the generic PostDatasetParameterSearchQuery builder with application/json body
func NewPostDatasetParameterSearchQueryRequest(server string, query MetabaseLibSchemaCommonNonBlankString, body PostDatasetParameterSearchQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetParameterSearchQueryRequestWithBody(server, query, "application/json", bodyReader)
}

// NewPostDatasetParameterSearchQueryRequestWithBody generates requests for PostDatasetParameterSearchQuery with any type of body
func NewPostDatasetParameterSearchQueryRequestWithBody(server string, query MetabaseLibSchemaCommonNonBlankString, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/parameter/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetParameterValuesRequest calls the generic PostDatasetParameterValues builder with application/json body
func NewPostDatasetParameterValuesRequest(server string, body PostDatasetParameterValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetParameterValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatasetParameterValuesRequestWithBody generates requests for PostDatasetParameterValues with any type of body
func NewPostDatasetParameterValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/parameter/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetPivotRequest calls the generic PostDatasetPivot builder with application/json body
func NewPostDatasetPivotRequest(server string, body PostDatasetPivotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetPivotRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatasetPivotRequestWithBody generates requests for PostDatasetPivot with any type of body
func NewPostDatasetPivotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/pivot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetQueryMetadataRequest calls the generic PostDatasetQueryMetadata builder with application/json body
func NewPostDatasetQueryMetadataRequest(server string, body PostDatasetQueryMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetQueryMetadataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatasetQueryMetadataRequestWithBody generates requests for PostDatasetQueryMetadata with any type of body
func NewPostDatasetQueryMetadataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/query_metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDatasetExportFormatRequest calls the generic PostDatasetExportFormat builder with application/json body
func NewPostDatasetExportFormatRequest(server string, exportFormat PostDatasetExportFormatParamsExportFormat, body PostDatasetExportFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatasetExportFormatRequestWithBody(server, exportFormat, "application/json", bodyReader)
}

// NewPostDatasetExportFormatRequestWithBody generates requests for PostDatasetExportFormat with any type of body
func NewPostDatasetExportFormatRequestWithBody(server string, exportFormat PostDatasetExportFormatParamsExportFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDocsRequest generates requests for GetDocs
func NewGetDocsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/docs*")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmailRequest generates requests for DeleteEmail
func NewDeleteEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/email/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEmailRequest calls the generic PutEmail builder with application/json body
func NewPutEmailRequest(server string, body PutEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPutEmailRequestWithBody generates requests for PutEmail with any type of body
func NewPutEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/email/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEmailTestRequest generates requests for PostEmailTest
func NewPostEmailTestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/email/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenRequest generates requests for GetEmbedCardToken
func NewGetEmbedCardTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenFieldFieldIdRemappingRemappedIdRequest generates requests for GetEmbedCardTokenFieldFieldIdRemappingRemappedId
func NewGetEmbedCardTokenFieldFieldIdRemappingRemappedIdRequest(server string, token string, fieldId int, remappedId int, params *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "remapped-id", runtime.ParamLocationPath, remappedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/field/%s/remapping/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdRequest generates requests for GetEmbedCardTokenFieldFieldIdSearchSearchFieldId
func NewGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdRequest(server string, token string, fieldId int, searchFieldId int, params *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "search-field-id", runtime.ParamLocationPath, searchFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/field/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenFieldFieldIdValuesRequest generates requests for GetEmbedCardTokenFieldFieldIdValues
func NewGetEmbedCardTokenFieldFieldIdValuesRequest(server string, token string, fieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/field/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenParamsParamKeySearchPrefixRequest generates requests for GetEmbedCardTokenParamsParamKeySearchPrefix
func NewGetEmbedCardTokenParamsParamKeySearchPrefixRequest(server string, token string, paramKey string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenParamsParamKeyValuesRequest generates requests for GetEmbedCardTokenParamsParamKeyValues
func NewGetEmbedCardTokenParamsParamKeyValuesRequest(server string, token string, paramKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenQueryRequest generates requests for GetEmbedCardTokenQuery
func NewGetEmbedCardTokenQueryRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedCardTokenQueryExportFormatRequest generates requests for GetEmbedCardTokenQueryExportFormat
func NewGetEmbedCardTokenQueryExportFormatRequest(server string, token string, exportFormat GetEmbedCardTokenQueryExportFormatParamsExportFormat, params *GetEmbedCardTokenQueryExportFormatParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/card/%s/query/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FormatRows != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format_rows", runtime.ParamLocationQuery, *params.FormatRows); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PivotResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pivot_results", runtime.ParamLocationQuery, *params.PivotResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenRequest generates requests for GetEmbedDashboardToken
func NewGetEmbedDashboardTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest generates requests for GetEmbedDashboardTokenDashcardDashcardIdCardCardId
func NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest(server string, token string, dashcardId int, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatRequest generates requests for GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat
func NewGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatRequest(server string, token string, dashcardId int, cardId int, exportFormat GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/dashcard/%s/card/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FormatRows != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format_rows", runtime.ParamLocationQuery, *params.FormatRows); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PivotResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pivot_results", runtime.ParamLocationQuery, *params.PivotResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdRequest generates requests for GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId
func NewGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdRequest(server string, token string, fieldId int, remappedId int, params *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "remapped-id", runtime.ParamLocationPath, remappedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/field/%s/remapping/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdRequest generates requests for GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId
func NewGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdRequest(server string, token string, fieldId int, searchFieldId int, params *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "search-field-id", runtime.ParamLocationPath, searchFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/field/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenFieldFieldIdValuesRequest generates requests for GetEmbedDashboardTokenFieldFieldIdValues
func NewGetEmbedDashboardTokenFieldFieldIdValuesRequest(server string, token string, fieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/field/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenParamsParamKeySearchPrefixRequest generates requests for GetEmbedDashboardTokenParamsParamKeySearchPrefix
func NewGetEmbedDashboardTokenParamsParamKeySearchPrefixRequest(server string, token string, paramKey string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedDashboardTokenParamsParamKeyValuesRequest generates requests for GetEmbedDashboardTokenParamsParamKeyValues
func NewGetEmbedDashboardTokenParamsParamKeyValuesRequest(server string, token string, paramKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/dashboard/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedPivotCardTokenQueryRequest generates requests for GetEmbedPivotCardTokenQuery
func NewGetEmbedPivotCardTokenQueryRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/pivot/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest generates requests for GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardId
func NewGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest(server string, token string, dashcardId int, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embed/pivot/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdRequest generates requests for GetFieldId
func NewGetFieldIdRequest(server string, id int, params *GetFieldIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, params.IncludeEditableDataModel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFieldIdRequest calls the generic PutFieldId builder with application/json body
func NewPutFieldIdRequest(server string, id int, body PutFieldIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFieldIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFieldIdRequestWithBody generates requests for PutFieldId with any type of body
func NewPutFieldIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFieldIdDimensionRequest generates requests for DeleteFieldIdDimension
func NewDeleteFieldIdDimensionRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/dimension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFieldIdDimensionRequest calls the generic PostFieldIdDimension builder with application/json body
func NewPostFieldIdDimensionRequest(server string, id int, body PostFieldIdDimensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFieldIdDimensionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostFieldIdDimensionRequestWithBody generates requests for PostFieldIdDimension with any type of body
func NewPostFieldIdDimensionRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/dimension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFieldIdDiscardValuesRequest generates requests for PostFieldIdDiscardValues
func NewPostFieldIdDiscardValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/discard_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdRelatedRequest generates requests for GetFieldIdRelated
func NewGetFieldIdRelatedRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/related", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdRemappingRemappedIdRequest generates requests for GetFieldIdRemappingRemappedId
func NewGetFieldIdRemappingRemappedIdRequest(server string, id int, remappedId int, params *GetFieldIdRemappingRemappedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "remapped-id", runtime.ParamLocationPath, remappedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/remapping/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFieldIdRescanValuesRequest generates requests for PostFieldIdRescanValues
func NewPostFieldIdRescanValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/rescan_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdSearchSearchIdRequest generates requests for GetFieldIdSearchSearchId
func NewGetFieldIdSearchSearchIdRequest(server string, id int, searchId int, params *GetFieldIdSearchSearchIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "search-id", runtime.ParamLocationPath, searchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/search/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdSummaryRequest generates requests for GetFieldIdSummary
func NewGetFieldIdSummaryRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFieldIdValuesRequest generates requests for GetFieldIdValues
func NewGetFieldIdValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFieldIdValuesRequest calls the generic PostFieldIdValues builder with application/json body
func NewPostFieldIdValuesRequest(server string, id int, body PostFieldIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFieldIdValuesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostFieldIdValuesRequestWithBody generates requests for PostFieldIdValues with any type of body
func NewPostFieldIdValuesRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGeojsonRequest generates requests for GetGeojson
func NewGetGeojsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geojson/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeojsonKeyRequest generates requests for GetGeojsonKey
func NewGetGeojsonKeyRequest(server string, key MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geojson/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGoogleSettingsRequest calls the generic PutGoogleSettings builder with application/json body
func NewPutGoogleSettingsRequest(server string, body PutGoogleSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGoogleSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGoogleSettingsRequestWithBody generates requests for PutGoogleSettings with any type of body
func NewPutGoogleSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/google/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutLdapSettingsRequest calls the generic PutLdapSettings builder with application/json body
func NewPutLdapSettingsRequest(server string, body PutLdapSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLdapSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutLdapSettingsRequestWithBody generates requests for PutLdapSettings with any type of body
func NewPutLdapSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLoginHistoryCurrentRequest generates requests for GetLoginHistoryCurrent
func NewGetLoginHistoryCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login-history/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMetabotDatabaseDatabaseIdRequest calls the generic PostMetabotDatabaseDatabaseId builder with application/json body
func NewPostMetabotDatabaseDatabaseIdRequest(server string, databaseId int, body PostMetabotDatabaseDatabaseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMetabotDatabaseDatabaseIdRequestWithBody(server, databaseId, "application/json", bodyReader)
}

// NewPostMetabotDatabaseDatabaseIdRequestWithBody generates requests for PostMetabotDatabaseDatabaseId with any type of body
func NewPostMetabotDatabaseDatabaseIdRequestWithBody(server string, databaseId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database-id", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metabot/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMetabotDatabaseDatabaseIdQueryRequest calls the generic PostMetabotDatabaseDatabaseIdQuery builder with application/json body
func NewPostMetabotDatabaseDatabaseIdQueryRequest(server string, databaseId int, body PostMetabotDatabaseDatabaseIdQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMetabotDatabaseDatabaseIdQueryRequestWithBody(server, databaseId, "application/json", bodyReader)
}

// NewPostMetabotDatabaseDatabaseIdQueryRequestWithBody generates requests for PostMetabotDatabaseDatabaseIdQuery with any type of body
func NewPostMetabotDatabaseDatabaseIdQueryRequestWithBody(server string, databaseId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "database-id", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metabot/database/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMetabotFeedbackRequest generates requests for PostMetabotFeedback
func NewPostMetabotFeedbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metabot/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMetabotModelModelIdRequest calls the generic PostMetabotModelModelId builder with application/json body
func NewPostMetabotModelModelIdRequest(server string, modelId int, body PostMetabotModelModelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMetabotModelModelIdRequestWithBody(server, modelId, "application/json", bodyReader)
}

// NewPostMetabotModelModelIdRequestWithBody generates requests for PostMetabotModelModelId with any type of body
func NewPostMetabotModelModelIdRequestWithBody(server string, modelId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model-id", runtime.ParamLocationPath, modelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metabot/model/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetModelIndexRequest generates requests for GetModelIndex
func NewGetModelIndexRequest(server string, params *GetModelIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model-index/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model_id", runtime.ParamLocationQuery, params.ModelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostModelIndexRequest calls the generic PostModelIndex builder with application/json body
func NewPostModelIndexRequest(server string, body PostModelIndexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostModelIndexRequestWithBody(server, "application/json", bodyReader)
}

// NewPostModelIndexRequestWithBody generates requests for PostModelIndex with any type of body
func NewPostModelIndexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model-index/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteModelIndexIdRequest generates requests for DeleteModelIndexId
func NewDeleteModelIndexIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model-index/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModelIndexIdRequest generates requests for GetModelIndexId
func NewGetModelIndexIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/model-index/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNativeQuerySnippetRequest generates requests for GetNativeQuerySnippet
func NewGetNativeQuerySnippetRequest(server string, params *GetNativeQuerySnippetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/native-query-snippet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNativeQuerySnippetRequest calls the generic PostNativeQuerySnippet builder with application/json body
func NewPostNativeQuerySnippetRequest(server string, body PostNativeQuerySnippetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNativeQuerySnippetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNativeQuerySnippetRequestWithBody generates requests for PostNativeQuerySnippet with any type of body
func NewPostNativeQuerySnippetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/native-query-snippet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNativeQuerySnippetIdRequest generates requests for GetNativeQuerySnippetId
func NewGetNativeQuerySnippetIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/native-query-snippet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNativeQuerySnippetIdRequest calls the generic PutNativeQuerySnippetId builder with application/json body
func NewPutNativeQuerySnippetIdRequest(server string, id int, body PutNativeQuerySnippetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNativeQuerySnippetIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutNativeQuerySnippetIdRequestWithBody generates requests for PutNativeQuerySnippetId with any type of body
func NewPutNativeQuerySnippetIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/native-query-snippet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNotifyDbIdRequest calls the generic PostNotifyDbId builder with application/json body
func NewPostNotifyDbIdRequest(server string, id int, body PostNotifyDbIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotifyDbIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostNotifyDbIdRequestWithBody generates requests for PostNotifyDbId with any type of body
func NewPostNotifyDbIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notify/db/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNotifyDbIdNewTableRequest calls the generic PostNotifyDbIdNewTable builder with application/json body
func NewPostNotifyDbIdNewTableRequest(server string, id int, body PostNotifyDbIdNewTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotifyDbIdNewTableRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostNotifyDbIdNewTableRequestWithBody generates requests for PostNotifyDbIdNewTable with any type of body
func NewPostNotifyDbIdNewTableRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notify/db/%s/new-table", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPermissionsGraphRequest generates requests for GetPermissionsGraph
func NewGetPermissionsGraphRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPermissionsGraphRequest calls the generic PutPermissionsGraph builder with application/json body
func NewPutPermissionsGraphRequest(server string, body PutPermissionsGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPermissionsGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPermissionsGraphRequestWithBody generates requests for PutPermissionsGraph with any type of body
func NewPutPermissionsGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPermissionsGraphDbDbIdRequest generates requests for GetPermissionsGraphDbDbId
func NewGetPermissionsGraphDbDbIdRequest(server string, dbId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db-id", runtime.ParamLocationPath, dbId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph/db/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsGraphGroupGroupIdRequest generates requests for GetPermissionsGraphGroupGroupId
func NewGetPermissionsGraphGroupGroupIdRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsGroupRequest generates requests for GetPermissionsGroup
func NewGetPermissionsGroupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPermissionsGroupRequest calls the generic PostPermissionsGroup builder with application/json body
func NewPostPermissionsGroupRequest(server string, body PostPermissionsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPermissionsGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPermissionsGroupRequestWithBody generates requests for PostPermissionsGroup with any type of body
func NewPostPermissionsGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionsGroupGroupIdRequest generates requests for DeletePermissionsGroupGroupId
func NewDeletePermissionsGroupGroupIdRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPermissionsGroupGroupIdRequest calls the generic PutPermissionsGroupGroupId builder with application/json body
func NewPutPermissionsGroupGroupIdRequest(server string, groupId int, body PutPermissionsGroupGroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPermissionsGroupGroupIdRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutPermissionsGroupGroupIdRequestWithBody generates requests for PutPermissionsGroupGroupId with any type of body
func NewPutPermissionsGroupGroupIdRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPermissionsGroupIdRequest generates requests for GetPermissionsGroupId
func NewGetPermissionsGroupIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsMembershipRequest generates requests for GetPermissionsMembership
func NewGetPermissionsMembershipRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/membership")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPermissionsMembershipRequest calls the generic PostPermissionsMembership builder with application/json body
func NewPostPermissionsMembershipRequest(server string, body PostPermissionsMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPermissionsMembershipRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPermissionsMembershipRequestWithBody generates requests for PostPermissionsMembership with any type of body
func NewPostPermissionsMembershipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/membership")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPermissionsMembershipGroupIdClearRequest generates requests for PutPermissionsMembershipGroupIdClear
func NewPutPermissionsMembershipGroupIdClearRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/membership/%s/clear", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePermissionsMembershipIdRequest generates requests for DeletePermissionsMembershipId
func NewDeletePermissionsMembershipIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/membership/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPermissionsMembershipIdRequest calls the generic PutPermissionsMembershipId builder with application/json body
func NewPutPermissionsMembershipIdRequest(server string, id int, body PutPermissionsMembershipIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPermissionsMembershipIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPermissionsMembershipIdRequestWithBody generates requests for PutPermissionsMembershipId with any type of body
func NewPutPermissionsMembershipIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/membership/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersistRequest generates requests for GetPersist
func NewGetPersistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersistCardCardIdRequest generates requests for GetPersistCardCardId
func NewGetPersistCardCardIdRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPersistDisableRequest generates requests for PostPersistDisable
func NewPostPersistDisableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPersistEnableRequest generates requests for PostPersistEnable
func NewPostPersistEnableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPersistSetRefreshScheduleRequest calls the generic PostPersistSetRefreshSchedule builder with application/json body
func NewPostPersistSetRefreshScheduleRequest(server string, body PostPersistSetRefreshScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPersistSetRefreshScheduleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPersistSetRefreshScheduleRequestWithBody generates requests for PostPersistSetRefreshSchedule with any type of body
func NewPostPersistSetRefreshScheduleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/set-refresh-schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersistPersistedInfoIdRequest generates requests for GetPersistPersistedInfoId
func NewGetPersistPersistedInfoIdRequest(server string, persistedInfoId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "persisted-info-id", runtime.ParamLocationPath, persistedInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/persist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPremiumFeaturesTokenStatusRequest generates requests for GetPremiumFeaturesTokenStatus
func NewGetPremiumFeaturesTokenStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/premium-features/token/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedCardTokenRequest generates requests for GetPreviewEmbedCardToken
func NewGetPreviewEmbedCardTokenRequest(server string, token MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedCardTokenQueryRequest generates requests for GetPreviewEmbedCardTokenQuery
func NewGetPreviewEmbedCardTokenQueryRequest(server string, token MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedDashboardTokenRequest generates requests for GetPreviewEmbedDashboardToken
func NewGetPreviewEmbedDashboardTokenRequest(server string, token MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest generates requests for GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardId
func NewGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdRequest(server string, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedDashboardTokenParamsParamKeyValuesRequest generates requests for GetPreviewEmbedDashboardTokenParamsParamKeyValues
func NewGetPreviewEmbedDashboardTokenParamsParamKeyValuesRequest(server string, token string, paramKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/dashboard/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedPivotCardTokenQueryRequest generates requests for GetPreviewEmbedPivotCardTokenQuery
func NewGetPreviewEmbedPivotCardTokenQueryRequest(server string, token MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/pivot/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest generates requests for GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardId
func NewGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdRequest(server string, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview_embed/pivot/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicActionUuidRequest generates requests for GetPublicActionUuid
func NewGetPublicActionUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicActionUuidExecuteRequest calls the generic PostPublicActionUuidExecute builder with application/json body
func NewPostPublicActionUuidExecuteRequest(server string, uuid string, body PostPublicActionUuidExecuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicActionUuidExecuteRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPostPublicActionUuidExecuteRequestWithBody generates requests for PostPublicActionUuidExecute with any type of body
func NewPostPublicActionUuidExecuteRequestWithBody(server string, uuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/action/%s/execute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicCardUuidRequest generates requests for GetPublicCardUuid
func NewGetPublicCardUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidFieldFieldIdRemappingRemappedIdRequest generates requests for GetPublicCardUuidFieldFieldIdRemappingRemappedId
func NewGetPublicCardUuidFieldFieldIdRemappingRemappedIdRequest(server string, uuid string, fieldId int, remappedId int, params *GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "remapped-id", runtime.ParamLocationPath, remappedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/field/%s/remapping/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidFieldFieldIdSearchSearchFieldIdRequest generates requests for GetPublicCardUuidFieldFieldIdSearchSearchFieldId
func NewGetPublicCardUuidFieldFieldIdSearchSearchFieldIdRequest(server string, uuid string, fieldId int, searchFieldId int, params *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "search-field-id", runtime.ParamLocationPath, searchFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/field/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidFieldFieldIdValuesRequest generates requests for GetPublicCardUuidFieldFieldIdValues
func NewGetPublicCardUuidFieldFieldIdValuesRequest(server string, uuid string, fieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/field/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidParamsParamKeySearchQueryRequest generates requests for GetPublicCardUuidParamsParamKeySearchQuery
func NewGetPublicCardUuidParamsParamKeySearchQueryRequest(server string, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidParamsParamKeyValuesRequest generates requests for GetPublicCardUuidParamsParamKeyValues
func NewGetPublicCardUuidParamsParamKeyValuesRequest(server string, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidQueryRequest generates requests for GetPublicCardUuidQuery
func NewGetPublicCardUuidQueryRequest(server string, uuid string, params *GetPublicCardUuidQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicCardUuidQueryExportFormatRequest generates requests for GetPublicCardUuidQueryExportFormat
func NewGetPublicCardUuidQueryExportFormatRequest(server string, uuid string, exportFormat GetPublicCardUuidQueryExportFormatParamsExportFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/card/%s/query/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidRequest generates requests for GetPublicDashboardUuid
func NewGetPublicDashboardUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidDashcardDashcardIdCardCardIdRequest generates requests for GetPublicDashboardUuidDashcardDashcardIdCardCardId
func NewGetPublicDashboardUuidDashcardDashcardIdCardCardIdRequest(server string, uuid string, dashcardId int, cardId int, params *GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequest calls the generic PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat builder with application/json body
func NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequest(server string, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, body PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequestWithBody(server, uuid, dashcardId, cardId, exportFormat, params, "application/json", bodyReader)
}

// NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequestWithBody generates requests for PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat with any type of body
func NewPostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatRequestWithBody(server string, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "export-format", runtime.ParamLocationPath, exportFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/dashcard/%s/card/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicDashboardUuidDashcardDashcardIdExecuteRequest generates requests for GetPublicDashboardUuidDashcardDashcardIdExecute
func NewGetPublicDashboardUuidDashcardDashcardIdExecuteRequest(server string, uuid string, dashcardId int, params *GetPublicDashboardUuidDashcardDashcardIdExecuteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/dashcard/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, params.Parameters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequest calls the generic PostPublicDashboardUuidDashcardDashcardIdExecute builder with application/json body
func NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequest(server string, uuid string, dashcardId int, body PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequestWithBody(server, uuid, dashcardId, "application/json", bodyReader)
}

// NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequestWithBody generates requests for PostPublicDashboardUuidDashcardDashcardIdExecute with any type of body
func NewPostPublicDashboardUuidDashcardDashcardIdExecuteRequestWithBody(server string, uuid string, dashcardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/dashcard/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdRequest generates requests for GetPublicDashboardUuidFieldFieldIdRemappingRemappedId
func NewGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdRequest(server string, uuid string, fieldId int, remappedId int, params *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "remapped-id", runtime.ParamLocationPath, remappedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/field/%s/remapping/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdRequest generates requests for GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId
func NewGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdRequest(server string, uuid string, fieldId int, searchFieldId int, params *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "search-field-id", runtime.ParamLocationPath, searchFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/field/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidFieldFieldIdValuesRequest generates requests for GetPublicDashboardUuidFieldFieldIdValues
func NewGetPublicDashboardUuidFieldFieldIdValuesRequest(server string, uuid string, fieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field-id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/field/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidParamsParamKeySearchQueryRequest generates requests for GetPublicDashboardUuidParamsParamKeySearchQuery
func NewGetPublicDashboardUuidParamsParamKeySearchQueryRequest(server string, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "query", runtime.ParamLocationPath, query)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/params/%s/search/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDashboardUuidParamsParamKeyValuesRequest generates requests for GetPublicDashboardUuidParamsParamKeyValues
func NewGetPublicDashboardUuidParamsParamKeyValuesRequest(server string, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "param-key", runtime.ParamLocationPath, paramKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/dashboard/%s/params/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicOembedRequest generates requests for GetPublicOembed
func NewGetPublicOembedRequest(server string, params *GetPublicOembedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/oembed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxheight != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxheight", runtime.ParamLocationQuery, *params.Maxheight); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxwidth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxwidth", runtime.ParamLocationQuery, *params.Maxwidth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicPivotCardUuidQueryRequest generates requests for GetPublicPivotCardUuidQuery
func NewGetPublicPivotCardUuidQueryRequest(server string, uuid string, params *GetPublicPivotCardUuidQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/pivot/card/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdRequest generates requests for GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId
func NewGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdRequest(server string, uuid string, dashcardId int, cardId int, params *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dashcard-id", runtime.ParamLocationPath, dashcardId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "card-id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/pivot/dashboard/%s/dashcard/%s/card/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPulseRequest generates requests for GetPulse
func NewGetPulseRequest(server string, params *GetPulseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DashboardId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dashboard_id", runtime.ParamLocationQuery, *params.DashboardId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorOrRecipient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creator_or_recipient", runtime.ParamLocationQuery, *params.CreatorOrRecipient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPulseRequest calls the generic PostPulse builder with application/json body
func NewPostPulseRequest(server string, body PostPulseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPulseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPulseRequestWithBody generates requests for PostPulse with any type of body
func NewPostPulseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseFormInputRequest generates requests for GetPulseFormInput
func NewGetPulseFormInputRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/form_input")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPulsePreviewCardIdRequest generates requests for GetPulsePreviewCardId
func NewGetPulsePreviewCardIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/preview_card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPulsePreviewCardInfoIdRequest generates requests for GetPulsePreviewCardInfoId
func NewGetPulsePreviewCardInfoIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/preview_card_info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPulsePreviewCardPngIdRequest generates requests for GetPulsePreviewCardPngId
func NewGetPulsePreviewCardPngIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/preview_card_png/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPulsePreviewDashboardIdRequest generates requests for GetPulsePreviewDashboardId
func NewGetPulsePreviewDashboardIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/preview_dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPulseTestRequest calls the generic PostPulseTest builder with application/json body
func NewPostPulseTestRequest(server string, body PostPulseTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPulseTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPulseTestRequestWithBody generates requests for PostPulseTest with any type of body
func NewPostPulseTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPulseIdRequest generates requests for GetPulseId
func NewGetPulseIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPulseIdRequest calls the generic PutPulseId builder with application/json body
func NewPutPulseIdRequest(server string, id int, body PutPulseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPulseIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPulseIdRequestWithBody generates requests for PutPulseId with any type of body
func NewPutPulseIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePulseIdSubscriptionRequest generates requests for DeletePulseIdSubscription
func NewDeletePulseIdSubscriptionRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pulse/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRevisionRequest generates requests for GetRevision
func NewGetRevisionRequest(server string, params *GetRevisionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revision/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entity", runtime.ParamLocationQuery, params.Entity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRevisionRevertRequest calls the generic PostRevisionRevert builder with application/json body
func NewPostRevisionRevertRequest(server string, body PostRevisionRevertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRevisionRevertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRevisionRevertRequestWithBody generates requests for PostRevisionRevert with any type of body
func NewPostRevisionRevertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revision/revert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchNativeQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_native_query", runtime.ParamLocationQuery, *params.SearchNativeQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Models != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "models", runtime.ParamLocationQuery, *params.Models); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastEditedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_edited_by", runtime.ParamLocationQuery, *params.LastEditedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchEngine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_engine", runtime.ParamLocationQuery, *params.SearchEngine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastEditedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_edited_at", runtime.ParamLocationQuery, *params.LastEditedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModelAncestors != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model_ancestors", runtime.ParamLocationQuery, *params.ModelAncestors); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TableDbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "table_db_id", runtime.ParamLocationQuery, *params.TableDbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterItemsInPersonalCollection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter_items_in_personal_collection", runtime.ParamLocationQuery, *params.FilterItemsInPersonalCollection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSearchForceReindexRequest generates requests for PostSearchForceReindex
func NewPostSearchForceReindexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/force-reindex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchModelsRequest generates requests for GetSearchModels
func NewGetSearchModelsRequest(server string, params *GetSearchModelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchNativeQuery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_native_query", runtime.ParamLocationQuery, *params.SearchNativeQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastEditedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_edited_by", runtime.ParamLocationQuery, *params.LastEditedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchEngine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_engine", runtime.ParamLocationQuery, *params.SearchEngine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TableDbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "table-db-id", runtime.ParamLocationQuery, *params.TableDbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastEditedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_edited_at", runtime.ParamLocationQuery, *params.LastEditedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentRequest generates requests for GetSegment
func NewGetSegmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSegmentRequest calls the generic PostSegment builder with application/json body
func NewPostSegmentRequest(server string, body PostSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSegmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSegmentRequestWithBody generates requests for PostSegment with any type of body
func NewPostSegmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSegmentIdRequest generates requests for DeleteSegmentId
func NewDeleteSegmentIdRequest(server string, id int, params *DeleteSegmentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revision_message", runtime.ParamLocationQuery, params.RevisionMessage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentIdRequest generates requests for GetSegmentId
func NewGetSegmentIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSegmentIdRequest calls the generic PutSegmentId builder with application/json body
func NewPutSegmentIdRequest(server string, id int, body PutSegmentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSegmentIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSegmentIdRequestWithBody generates requests for PutSegmentId with any type of body
func NewPutSegmentIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSegmentIdRelatedRequest generates requests for GetSegmentIdRelated
func NewGetSegmentIdRelatedRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s/related", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSegmentIdRevertRequest calls the generic PostSegmentIdRevert builder with application/json body
func NewPostSegmentIdRevertRequest(server string, id int, body PostSegmentIdRevertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSegmentIdRevertRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSegmentIdRevertRequestWithBody generates requests for PostSegmentIdRevert with any type of body
func NewPostSegmentIdRevertRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s/revert", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSegmentIdRevisionsRequest generates requests for GetSegmentIdRevisions
func NewGetSegmentIdRevisionsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segment/%s/revisions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSessionRequest calls the generic PostSession builder with application/json body
func NewPostSessionRequest(server string, body PostSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionRequestWithBody generates requests for PostSession with any type of body
func NewPostSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionForgotPasswordRequest calls the generic PostSessionForgotPassword builder with application/json body
func NewPostSessionForgotPasswordRequest(server string, body PostSessionForgotPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionForgotPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionForgotPasswordRequestWithBody generates requests for PostSessionForgotPassword with any type of body
func NewPostSessionForgotPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/forgot_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionGoogleAuthRequest calls the generic PostSessionGoogleAuth builder with application/json body
func NewPostSessionGoogleAuthRequest(server string, body PostSessionGoogleAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionGoogleAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionGoogleAuthRequestWithBody generates requests for PostSessionGoogleAuth with any type of body
func NewPostSessionGoogleAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/google_auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSessionPasswordResetTokenValidRequest generates requests for GetSessionPasswordResetTokenValid
func NewGetSessionPasswordResetTokenValidRequest(server string, params *GetSessionPasswordResetTokenValidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/password_reset_token_valid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionPropertiesRequest generates requests for GetSessionProperties
func NewGetSessionPropertiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSessionPulseUnsubscribeRequest calls the generic PostSessionPulseUnsubscribe builder with application/json body
func NewPostSessionPulseUnsubscribeRequest(server string, body PostSessionPulseUnsubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionPulseUnsubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionPulseUnsubscribeRequestWithBody generates requests for PostSessionPulseUnsubscribe with any type of body
func NewPostSessionPulseUnsubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/pulse/unsubscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionPulseUnsubscribeUndoRequest calls the generic PostSessionPulseUnsubscribeUndo builder with application/json body
func NewPostSessionPulseUnsubscribeUndoRequest(server string, body PostSessionPulseUnsubscribeUndoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionPulseUnsubscribeUndoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionPulseUnsubscribeUndoRequestWithBody generates requests for PostSessionPulseUnsubscribeUndo with any type of body
func NewPostSessionPulseUnsubscribeUndoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/pulse/unsubscribe/undo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSessionResetPasswordRequest calls the generic PostSessionResetPassword builder with application/json body
func NewPostSessionResetPasswordRequest(server string, body PostSessionResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSessionResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSessionResetPasswordRequestWithBody generates requests for PostSessionResetPassword with any type of body
func NewPostSessionResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/reset_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingRequest generates requests for GetSetting
func NewGetSettingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingRequest calls the generic PutSetting builder with application/json body
func NewPutSettingRequest(server string, body PutSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingRequestWithBody generates requests for PutSetting with any type of body
func NewPutSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingKeyRequest generates requests for GetSettingKey
func NewGetSettingKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingKeyRequest generates requests for PutSettingKey
func NewPutSettingKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSetupRequest calls the generic PostSetup builder with application/json body
func NewPostSetupRequest(server string, body PostSetupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetupRequestWithBody generates requests for PostSetup with any type of body
func NewPostSetupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSetupAdminChecklistRequest generates requests for GetSetupAdminChecklist
func NewGetSetupAdminChecklistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/admin_checklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSetupUserDefaultsRequest generates requests for GetSetupUserDefaults
func NewGetSetupUserDefaultsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup/user_defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSlackManifestRequest generates requests for GetSlackManifest
func NewGetSlackManifestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slack/manifest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSlackSettingsRequest calls the generic PutSlackSettings builder with application/json body
func NewPutSlackSettingsRequest(server string, body PutSlackSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSlackSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSlackSettingsRequestWithBody generates requests for PutSlackSettings with any type of body
func NewPutSlackSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slack/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableRequest generates requests for GetTable
func NewGetTableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTableRequest calls the generic PutTable builder with application/json body
func NewPutTableRequest(server string, body PutTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTableRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTableRequestWithBody generates requests for PutTable with any type of body
func NewPutTableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableCardIdFksRequest generates requests for GetTableCardIdFks
func NewGetTableCardIdFksRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/card__%s/fks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTableCardIdQueryMetadataRequest generates requests for GetTableCardIdQueryMetadata
func NewGetTableCardIdQueryMetadataRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/card__%s/query_metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTableIdRequest generates requests for GetTableId
func NewGetTableIdRequest(server string, id int, params *GetTableIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTableIdRequest calls the generic PutTableId builder with application/json body
func NewPutTableIdRequest(server string, id int, body PutTableIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTableIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTableIdRequestWithBody generates requests for PutTableId with any type of body
func NewPutTableIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTableIdAppendCsvRequest generates requests for PostTableIdAppendCsv
func NewPostTableIdAppendCsvRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/append-csv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTableIdDiscardValuesRequest generates requests for PostTableIdDiscardValues
func NewPostTableIdDiscardValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/discard_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTableIdFieldsOrderRequest calls the generic PutTableIdFieldsOrder builder with application/json body
func NewPutTableIdFieldsOrderRequest(server string, id int, body PutTableIdFieldsOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTableIdFieldsOrderRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTableIdFieldsOrderRequestWithBody generates requests for PutTableIdFieldsOrder with any type of body
func NewPutTableIdFieldsOrderRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/fields/order", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableIdFksRequest generates requests for GetTableIdFks
func NewGetTableIdFksRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/fks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTableIdQueryMetadataRequest generates requests for GetTableIdQueryMetadata
func NewGetTableIdQueryMetadataRequest(server string, id int, params *GetTableIdQueryMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/query_metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeSensitiveFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_sensitive_fields", runtime.ParamLocationQuery, *params.IncludeSensitiveFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeHiddenFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden_fields", runtime.ParamLocationQuery, *params.IncludeHiddenFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeEditableDataModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_editable_data_model", runtime.ParamLocationQuery, *params.IncludeEditableDataModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTableIdRelatedRequest generates requests for GetTableIdRelated
func NewGetTableIdRelatedRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/related", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTableIdReplaceCsvRequest generates requests for PostTableIdReplaceCsv
func NewPostTableIdReplaceCsvRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/replace-csv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTableIdRescanValuesRequest generates requests for PostTableIdRescanValues
func NewPostTableIdRescanValuesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/rescan_values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskInfoRequest generates requests for GetTaskInfo
func NewGetTaskInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskIdRequest generates requests for GetTaskId
func NewGetTaskIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTilesZoomXYLatFieldLonFieldRequest generates requests for GetTilesZoomXYLatFieldLonField
func NewGetTilesZoomXYLatFieldLonFieldRequest(server string, zoom int, x int, y int, latField string, lonField string, params *GetTilesZoomXYLatFieldLonFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "lat-field", runtime.ParamLocationPath, latField)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "lon-field", runtime.ParamLocationPath, lonField)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tiles/%s/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTimelineEventRequest calls the generic PostTimelineEvent builder with application/json body
func NewPostTimelineEventRequest(server string, body PostTimelineEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTimelineEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTimelineEventRequestWithBody generates requests for PostTimelineEvent with any type of body
func NewPostTimelineEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline-event/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTimelineEventIdRequest generates requests for DeleteTimelineEventId
func NewDeleteTimelineEventIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline-event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimelineEventIdRequest generates requests for GetTimelineEventId
func NewGetTimelineEventIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline-event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTimelineEventIdRequest calls the generic PutTimelineEventId builder with application/json body
func NewPutTimelineEventIdRequest(server string, id int, body PutTimelineEventIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTimelineEventIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTimelineEventIdRequestWithBody generates requests for PutTimelineEventId with any type of body
func NewPutTimelineEventIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline-event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimelineRequest generates requests for GetTimeline
func NewGetTimelineRequest(server string, params *GetTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTimelineRequest calls the generic PostTimeline builder with application/json body
func NewPostTimelineRequest(server string, body PostTimelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTimelineRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTimelineRequestWithBody generates requests for PostTimeline with any type of body
func NewPostTimelineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTimelineIdRequest generates requests for DeleteTimelineId
func NewDeleteTimelineIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimelineIdRequest generates requests for GetTimelineId
func NewGetTimelineIdRequest(server string, id int, params *GetTimelineIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTimelineIdRequest calls the generic PutTimelineId builder with application/json body
func NewPutTimelineIdRequest(server string, id int, body PutTimelineIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTimelineIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTimelineIdRequestWithBody generates requests for PutTimelineId with any type of body
func NewPutTimelineIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeactivated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_deactivated", runtime.ParamLocationQuery, *params.IncludeDeactivated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCurrentRequest generates requests for GetUserCurrent
func NewGetUserCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRecipientsRequest generates requests for GetUserRecipients
func NewGetUserRecipientsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/recipients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserIdRequest generates requests for DeleteUserId
func NewDeleteUserIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserIdRequest generates requests for GetUserId
func NewGetUserIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserIdRequest calls the generic PutUserId builder with application/json body
func NewPutUserIdRequest(server string, id int, body PutUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUserIdRequestWithBody generates requests for PutUserId with any type of body
func NewPutUserIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUserIdModalModalRequest generates requests for PutUserIdModalModal
func NewPutUserIdModalModalRequest(server string, id int, modal string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "modal", runtime.ParamLocationPath, modal)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/modal/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserIdPasswordRequest calls the generic PutUserIdPassword builder with application/json body
func NewPutUserIdPasswordRequest(server string, id int, body PutUserIdPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserIdPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUserIdPasswordRequestWithBody generates requests for PutUserIdPassword with any type of body
func NewPutUserIdPasswordRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUserIdReactivateRequest generates requests for PutUserIdReactivate
func NewPutUserIdReactivateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/reactivate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserIdSendInviteRequest generates requests for PostUserIdSendInvite
func NewPostUserIdSendInviteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/send_invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUtilBugReportDetailsRequest generates requests for GetUtilBugReportDetails
func NewGetUtilBugReportDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/bug_report_details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUtilDiagnosticInfoConnectionPoolInfoRequest generates requests for GetUtilDiagnosticInfoConnectionPoolInfo
func NewGetUtilDiagnosticInfoConnectionPoolInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/diagnostic_info/connection_pool_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUtilEntityIdRequest calls the generic PostUtilEntityId builder with application/json body
func NewPostUtilEntityIdRequest(server string, body PostUtilEntityIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUtilEntityIdRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUtilEntityIdRequestWithBody generates requests for PostUtilEntityId with any type of body
func NewPostUtilEntityIdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/entity_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUtilLogsRequest generates requests for GetUtilLogs
func NewGetUtilLogsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUtilPasswordCheckRequest calls the generic PostUtilPasswordCheck builder with application/json body
func NewPostUtilPasswordCheckRequest(server string, body PostUtilPasswordCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUtilPasswordCheckRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUtilPasswordCheckRequestWithBody generates requests for PostUtilPasswordCheck with any type of body
func NewPostUtilPasswordCheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/password_check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUtilProductFeedbackRequest calls the generic PostUtilProductFeedback builder with application/json body
func NewPostUtilProductFeedbackRequest(server string, body PostUtilProductFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUtilProductFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUtilProductFeedbackRequestWithBody generates requests for PostUtilProductFeedback with any type of body
func NewPostUtilProductFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/product-feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUtilRandomTokenRequest generates requests for GetUtilRandomToken
func NewGetUtilRandomTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/random_token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUtilStatsRequest generates requests for GetUtilStats
func NewGetUtilStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/util/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetActionWithResponse request
	GetActionWithResponse(ctx context.Context, params *GetActionParams, reqEditors ...RequestEditorFn) (*GetActionResponse, error)

	// PostActionWithBodyWithResponse request with any body
	PostActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionResponse, error)

	PostActionWithResponse(ctx context.Context, body PostActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionResponse, error)

	// GetActionPublicWithResponse request
	GetActionPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActionPublicResponse, error)

	// DeleteActionActionIdWithResponse request
	DeleteActionActionIdWithResponse(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*DeleteActionActionIdResponse, error)

	// GetActionActionIdWithResponse request
	GetActionActionIdWithResponse(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*GetActionActionIdResponse, error)

	// GetActionActionIdExecuteWithResponse request
	GetActionActionIdExecuteWithResponse(ctx context.Context, actionId int, params *GetActionActionIdExecuteParams, reqEditors ...RequestEditorFn) (*GetActionActionIdExecuteResponse, error)

	// PutActionIdWithBodyWithResponse request with any body
	PutActionIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActionIdResponse, error)

	PutActionIdWithResponse(ctx context.Context, id int, body PutActionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActionIdResponse, error)

	// PostActionIdExecuteWithBodyWithResponse request with any body
	PostActionIdExecuteWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionIdExecuteResponse, error)

	PostActionIdExecuteWithResponse(ctx context.Context, id int, body PostActionIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionIdExecuteResponse, error)

	// DeleteActionIdPublicLinkWithResponse request
	DeleteActionIdPublicLinkWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteActionIdPublicLinkResponse, error)

	// PostActionIdPublicLinkWithResponse request
	PostActionIdPublicLinkWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostActionIdPublicLinkResponse, error)

	// GetActivityMostRecentlyViewedDashboardWithResponse request
	GetActivityMostRecentlyViewedDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityMostRecentlyViewedDashboardResponse, error)

	// GetActivityPopularItemsWithResponse request
	GetActivityPopularItemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityPopularItemsResponse, error)

	// GetActivityRecentViewsWithResponse request
	GetActivityRecentViewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityRecentViewsResponse, error)

	// GetActivityRecentsWithResponse request
	GetActivityRecentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityRecentsResponse, error)

	// PostActivityRecentsWithBodyWithResponse request with any body
	PostActivityRecentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivityRecentsResponse, error)

	PostActivityRecentsWithResponse(ctx context.Context, body PostActivityRecentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivityRecentsResponse, error)

	// GetAlertWithResponse request
	GetAlertWithResponse(ctx context.Context, params *GetAlertParams, reqEditors ...RequestEditorFn) (*GetAlertResponse, error)

	// PostAlertWithBodyWithResponse request with any body
	PostAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertResponse, error)

	PostAlertWithResponse(ctx context.Context, body PostAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertResponse, error)

	// GetAlertQuestionIdWithResponse request
	GetAlertQuestionIdWithResponse(ctx context.Context, id int, params *GetAlertQuestionIdParams, reqEditors ...RequestEditorFn) (*GetAlertQuestionIdResponse, error)

	// GetAlertIdWithResponse request
	GetAlertIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAlertIdResponse, error)

	// PutAlertIdWithBodyWithResponse request with any body
	PutAlertIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertIdResponse, error)

	PutAlertIdWithResponse(ctx context.Context, id int, body PutAlertIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertIdResponse, error)

	// DeleteAlertIdSubscriptionWithResponse request
	DeleteAlertIdSubscriptionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAlertIdSubscriptionResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// PostApiKeyWithBodyWithResponse request with any body
	PostApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error)

	PostApiKeyWithResponse(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error)

	// GetApiKeyCountWithResponse request
	GetApiKeyCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyCountResponse, error)

	// DeleteApiKeyIdWithResponse request
	DeleteApiKeyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiKeyIdResponse, error)

	// PutApiKeyIdWithBodyWithResponse request with any body
	PutApiKeyIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiKeyIdResponse, error)

	PutApiKeyIdWithResponse(ctx context.Context, id int, body PutApiKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiKeyIdResponse, error)

	// PutApiKeyIdRegenerateWithResponse request
	PutApiKeyIdRegenerateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutApiKeyIdRegenerateResponse, error)

	// GetAutomagicDashboardsDatabaseIdCandidatesWithResponse request
	GetAutomagicDashboardsDatabaseIdCandidatesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsDatabaseIdCandidatesResponse, error)

	// GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdWithResponse request
	GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdWithResponse(ctx context.Context, modelIndexId int, pkId int, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity, entityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity, entityIdOrQuery string, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse, error)

	// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request
	GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error)

	// GetBookmarkWithResponse request
	GetBookmarkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBookmarkResponse, error)

	// PutBookmarkOrderingWithBodyWithResponse request with any body
	PutBookmarkOrderingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookmarkOrderingResponse, error)

	PutBookmarkOrderingWithResponse(ctx context.Context, body PutBookmarkOrderingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookmarkOrderingResponse, error)

	// DeleteBookmarkModelIdWithResponse request
	DeleteBookmarkModelIdWithResponse(ctx context.Context, model DeleteBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*DeleteBookmarkModelIdResponse, error)

	// PostBookmarkModelIdWithResponse request
	PostBookmarkModelIdWithResponse(ctx context.Context, model PostBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*PostBookmarkModelIdResponse, error)

	// DeleteCacheWithBodyWithResponse request with any body
	DeleteCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error)

	DeleteCacheWithResponse(ctx context.Context, body DeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error)

	// GetCacheWithResponse request
	GetCacheWithResponse(ctx context.Context, params *GetCacheParams, reqEditors ...RequestEditorFn) (*GetCacheResponse, error)

	// PutCacheWithBodyWithResponse request with any body
	PutCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCacheResponse, error)

	PutCacheWithResponse(ctx context.Context, body PutCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCacheResponse, error)

	// PostCacheInvalidateWithResponse request
	PostCacheInvalidateWithResponse(ctx context.Context, params *PostCacheInvalidateParams, reqEditors ...RequestEditorFn) (*PostCacheInvalidateResponse, error)

	// GetCardWithResponse request
	GetCardWithResponse(ctx context.Context, params *GetCardParams, reqEditors ...RequestEditorFn) (*GetCardResponse, error)

	// PostCardWithBodyWithResponse request with any body
	PostCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardResponse, error)

	PostCardWithResponse(ctx context.Context, body PostCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardResponse, error)

	// PostCardCollectionsWithBodyWithResponse request with any body
	PostCardCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCollectionsResponse, error)

	PostCardCollectionsWithResponse(ctx context.Context, body PostCardCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCollectionsResponse, error)

	// GetCardEmbeddableWithResponse request
	GetCardEmbeddableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCardEmbeddableResponse, error)

	// PostCardFromCsvWithResponse request
	PostCardFromCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCardFromCsvResponse, error)

	// PostCardPivotCardIdQueryWithBodyWithResponse request with any body
	PostCardPivotCardIdQueryWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardPivotCardIdQueryResponse, error)

	PostCardPivotCardIdQueryWithResponse(ctx context.Context, cardId int, body PostCardPivotCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardPivotCardIdQueryResponse, error)

	// GetCardPublicWithResponse request
	GetCardPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCardPublicResponse, error)

	// GetCardCardIdParamsParamKeySearchQueryWithResponse request
	GetCardCardIdParamsParamKeySearchQueryWithResponse(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetCardCardIdParamsParamKeySearchQueryResponse, error)

	// GetCardCardIdParamsParamKeyValuesWithResponse request
	GetCardCardIdParamsParamKeyValuesWithResponse(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetCardCardIdParamsParamKeyValuesResponse, error)

	// PostCardCardIdPersistWithResponse request
	PostCardCardIdPersistWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdPersistResponse, error)

	// DeleteCardCardIdPublicLinkWithResponse request
	DeleteCardCardIdPublicLinkWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*DeleteCardCardIdPublicLinkResponse, error)

	// PostCardCardIdPublicLinkWithResponse request
	PostCardCardIdPublicLinkWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdPublicLinkResponse, error)

	// PostCardCardIdQueryWithBodyWithResponse request with any body
	PostCardCardIdQueryWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryResponse, error)

	PostCardCardIdQueryWithResponse(ctx context.Context, cardId int, body PostCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryResponse, error)

	// PostCardCardIdQueryExportFormatWithBodyWithResponse request with any body
	PostCardCardIdQueryExportFormatWithBodyWithResponse(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryExportFormatResponse, error)

	PostCardCardIdQueryExportFormatWithResponse(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, body PostCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryExportFormatResponse, error)

	// PostCardCardIdRefreshWithResponse request
	PostCardCardIdRefreshWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdRefreshResponse, error)

	// PostCardCardIdUnpersistWithResponse request
	PostCardCardIdUnpersistWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdUnpersistResponse, error)

	// DeleteCardIdWithResponse request
	DeleteCardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCardIdResponse, error)

	// GetCardIdWithResponse request
	GetCardIdWithResponse(ctx context.Context, id int, params *GetCardIdParams, reqEditors ...RequestEditorFn) (*GetCardIdResponse, error)

	// PutCardIdWithBodyWithResponse request with any body
	PutCardIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCardIdResponse, error)

	PutCardIdWithResponse(ctx context.Context, id int, body PutCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCardIdResponse, error)

	// PostCardIdCopyWithResponse request
	PostCardIdCopyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostCardIdCopyResponse, error)

	// GetCardIdQueryMetadataWithResponse request
	GetCardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCardIdQueryMetadataResponse, error)

	// GetCardIdSeriesWithResponse request
	GetCardIdSeriesWithResponse(ctx context.Context, id int, params *GetCardIdSeriesParams, reqEditors ...RequestEditorFn) (*GetCardIdSeriesResponse, error)

	// GetCardIdTimelinesWithResponse request
	GetCardIdTimelinesWithResponse(ctx context.Context, id int, params *GetCardIdTimelinesParams, reqEditors ...RequestEditorFn) (*GetCardIdTimelinesResponse, error)

	// GetChannelWithResponse request
	GetChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChannelResponse, error)

	// PostChannelWithBodyWithResponse request with any body
	PostChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelResponse, error)

	PostChannelWithResponse(ctx context.Context, body PostChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelResponse, error)

	// PostChannelTestWithBodyWithResponse request with any body
	PostChannelTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelTestResponse, error)

	PostChannelTestWithResponse(ctx context.Context, body PostChannelTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelTestResponse, error)

	// GetChannelIdWithResponse request
	GetChannelIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetChannelIdResponse, error)

	// PutChannelIdWithBodyWithResponse request with any body
	PutChannelIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelIdResponse, error)

	PutChannelIdWithResponse(ctx context.Context, id int, body PutChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelIdResponse, error)

	// GetCloudMigrationWithResponse request
	GetCloudMigrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudMigrationResponse, error)

	// PostCloudMigrationWithResponse request
	PostCloudMigrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCloudMigrationResponse, error)

	// PutCloudMigrationCancelWithResponse request
	PutCloudMigrationCancelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutCloudMigrationCancelResponse, error)

	// GetCollectionWithResponse request
	GetCollectionWithResponse(ctx context.Context, params *GetCollectionParams, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error)

	// PostCollectionWithBodyWithResponse request with any body
	PostCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionResponse, error)

	PostCollectionWithResponse(ctx context.Context, body PostCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionResponse, error)

	// GetCollectionGraphWithResponse request
	GetCollectionGraphWithResponse(ctx context.Context, params *GetCollectionGraphParams, reqEditors ...RequestEditorFn) (*GetCollectionGraphResponse, error)

	// PutCollectionGraphWithBodyWithResponse request with any body
	PutCollectionGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCollectionGraphResponse, error)

	PutCollectionGraphWithResponse(ctx context.Context, body PutCollectionGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCollectionGraphResponse, error)

	// GetCollectionRootWithResponse request
	GetCollectionRootWithResponse(ctx context.Context, params *GetCollectionRootParams, reqEditors ...RequestEditorFn) (*GetCollectionRootResponse, error)

	// GetCollectionRootItemsWithResponse request
	GetCollectionRootItemsWithResponse(ctx context.Context, params *GetCollectionRootItemsParams, reqEditors ...RequestEditorFn) (*GetCollectionRootItemsResponse, error)

	// GetCollectionRootTimelinesWithResponse request
	GetCollectionRootTimelinesWithResponse(ctx context.Context, params *GetCollectionRootTimelinesParams, reqEditors ...RequestEditorFn) (*GetCollectionRootTimelinesResponse, error)

	// GetCollectionTrashWithResponse request
	GetCollectionTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionTrashResponse, error)

	// GetCollectionTreeWithResponse request
	GetCollectionTreeWithResponse(ctx context.Context, params *GetCollectionTreeParams, reqEditors ...RequestEditorFn) (*GetCollectionTreeResponse, error)

	// GetCollectionIdWithResponse request
	GetCollectionIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCollectionIdResponse, error)

	// PutCollectionIdWithBodyWithResponse request with any body
	PutCollectionIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCollectionIdResponse, error)

	PutCollectionIdWithResponse(ctx context.Context, id int, body PutCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCollectionIdResponse, error)

	// GetCollectionIdItemsWithResponse request
	GetCollectionIdItemsWithResponse(ctx context.Context, id int, params *GetCollectionIdItemsParams, reqEditors ...RequestEditorFn) (*GetCollectionIdItemsResponse, error)

	// GetCollectionIdTimelinesWithResponse request
	GetCollectionIdTimelinesWithResponse(ctx context.Context, id int, params *GetCollectionIdTimelinesParams, reqEditors ...RequestEditorFn) (*GetCollectionIdTimelinesResponse, error)

	// GetDashboardWithResponse request
	GetDashboardWithResponse(ctx context.Context, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// PostDashboardWithBodyWithResponse request with any body
	PostDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardResponse, error)

	PostDashboardWithResponse(ctx context.Context, body PostDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardResponse, error)

	// GetDashboardEmbeddableWithResponse request
	GetDashboardEmbeddableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardEmbeddableResponse, error)

	// GetDashboardParamsValidFilterFieldsWithResponse request
	GetDashboardParamsValidFilterFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardParamsValidFilterFieldsResponse, error)

	// PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse request with any body
	PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error)

	PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error)

	// GetDashboardPublicWithResponse request
	GetDashboardPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardPublicResponse, error)

	// PostDashboardSaveWithResponse request
	PostDashboardSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDashboardSaveResponse, error)

	// PostDashboardSaveCollectionParentCollectionIdWithResponse request
	PostDashboardSaveCollectionParentCollectionIdWithResponse(ctx context.Context, parentCollectionId int, reqEditors ...RequestEditorFn) (*PostDashboardSaveCollectionParentCollectionIdResponse, error)

	// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse request with any body
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error)

	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error)

	// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBodyWithResponse request with any body
	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse, error)

	PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse, error)

	// GetDashboardDashboardIdDashcardDashcardIdExecuteWithResponse request
	GetDashboardDashboardIdDashcardDashcardIdExecuteWithResponse(ctx context.Context, dashboardId int, dashcardId int, params *GetDashboardDashboardIdDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*GetDashboardDashboardIdDashcardDashcardIdExecuteResponse, error)

	// PostDashboardDashboardIdDashcardDashcardIdExecuteWithBodyWithResponse request with any body
	PostDashboardDashboardIdDashcardDashcardIdExecuteWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdExecuteResponse, error)

	PostDashboardDashboardIdDashcardDashcardIdExecuteWithResponse(ctx context.Context, dashboardId int, dashcardId int, body PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdExecuteResponse, error)

	// DeleteDashboardDashboardIdPublicLinkWithResponse request
	DeleteDashboardDashboardIdPublicLinkWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*DeleteDashboardDashboardIdPublicLinkResponse, error)

	// PostDashboardDashboardIdPublicLinkWithResponse request
	PostDashboardDashboardIdPublicLinkWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdPublicLinkResponse, error)

	// PostDashboardFromDashboardIdCopyWithBodyWithResponse request with any body
	PostDashboardFromDashboardIdCopyWithBodyWithResponse(ctx context.Context, fromDashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardFromDashboardIdCopyResponse, error)

	PostDashboardFromDashboardIdCopyWithResponse(ctx context.Context, fromDashboardId int, body PostDashboardFromDashboardIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardFromDashboardIdCopyResponse, error)

	// DeleteDashboardIdWithResponse request
	DeleteDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteDashboardIdResponse, error)

	// GetDashboardIdWithResponse request
	GetDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdResponse, error)

	// PutDashboardIdWithBodyWithResponse request with any body
	PutDashboardIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardIdResponse, error)

	PutDashboardIdWithResponse(ctx context.Context, id int, body PutDashboardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardIdResponse, error)

	// PutDashboardIdCardsWithBodyWithResponse request with any body
	PutDashboardIdCardsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardIdCardsResponse, error)

	PutDashboardIdCardsWithResponse(ctx context.Context, id int, body PutDashboardIdCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardIdCardsResponse, error)

	// GetDashboardIdParamsParamKeySearchQueryWithResponse request
	GetDashboardIdParamsParamKeySearchQueryWithResponse(ctx context.Context, id int, paramKey string, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetDashboardIdParamsParamKeySearchQueryResponse, error)

	// GetDashboardIdParamsParamKeyValuesWithResponse request
	GetDashboardIdParamsParamKeyValuesWithResponse(ctx context.Context, id int, paramKey string, reqEditors ...RequestEditorFn) (*GetDashboardIdParamsParamKeyValuesResponse, error)

	// GetDashboardIdQueryMetadataWithResponse request
	GetDashboardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdQueryMetadataResponse, error)

	// GetDashboardIdRelatedWithResponse request
	GetDashboardIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdRelatedResponse, error)

	// PostDashboardIdRevertWithBodyWithResponse request with any body
	PostDashboardIdRevertWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardIdRevertResponse, error)

	PostDashboardIdRevertWithResponse(ctx context.Context, id int, body PostDashboardIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardIdRevertResponse, error)

	// GetDashboardIdRevisionsWithResponse request
	GetDashboardIdRevisionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdRevisionsResponse, error)

	// GetDatabaseWithResponse request
	GetDatabaseWithResponse(ctx context.Context, params *GetDatabaseParams, reqEditors ...RequestEditorFn) (*GetDatabaseResponse, error)

	// PostDatabaseWithBodyWithResponse request with any body
	PostDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabaseResponse, error)

	PostDatabaseWithResponse(ctx context.Context, body PostDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabaseResponse, error)

	// PostDatabaseSampleDatabaseWithResponse request
	PostDatabaseSampleDatabaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDatabaseSampleDatabaseResponse, error)

	// PostDatabaseValidateWithBodyWithResponse request with any body
	PostDatabaseValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabaseValidateResponse, error)

	PostDatabaseValidateWithResponse(ctx context.Context, body PostDatabaseValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabaseValidateResponse, error)

	// DeleteDatabaseIdWithResponse request
	DeleteDatabaseIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteDatabaseIdResponse, error)

	// GetDatabaseIdWithResponse request
	GetDatabaseIdWithResponse(ctx context.Context, id int, params *GetDatabaseIdParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdResponse, error)

	// PutDatabaseIdWithBodyWithResponse request with any body
	PutDatabaseIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDatabaseIdResponse, error)

	PutDatabaseIdWithResponse(ctx context.Context, id int, body PutDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDatabaseIdResponse, error)

	// GetDatabaseIdAutocompleteSuggestionsWithResponse request
	GetDatabaseIdAutocompleteSuggestionsWithResponse(ctx context.Context, id int, params *GetDatabaseIdAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdAutocompleteSuggestionsResponse, error)

	// GetDatabaseIdCardAutocompleteSuggestionsWithResponse request
	GetDatabaseIdCardAutocompleteSuggestionsWithResponse(ctx context.Context, id int, params *GetDatabaseIdCardAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdCardAutocompleteSuggestionsResponse, error)

	// PostDatabaseIdDiscardValuesWithResponse request
	PostDatabaseIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdDiscardValuesResponse, error)

	// PostDatabaseIdDismissSpinnerWithResponse request
	PostDatabaseIdDismissSpinnerWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdDismissSpinnerResponse, error)

	// GetDatabaseIdFieldsWithResponse request
	GetDatabaseIdFieldsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdFieldsResponse, error)

	// GetDatabaseIdIdfieldsWithResponse request
	GetDatabaseIdIdfieldsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdIdfieldsResponse, error)

	// GetDatabaseIdMetadataWithResponse request
	GetDatabaseIdMetadataWithResponse(ctx context.Context, id int, params *GetDatabaseIdMetadataParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdMetadataResponse, error)

	// PostDatabaseIdPersistWithResponse request
	PostDatabaseIdPersistWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdPersistResponse, error)

	// PostDatabaseIdRescanValuesWithResponse request
	PostDatabaseIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdRescanValuesResponse, error)

	// GetDatabaseIdSchemaWithResponse request
	GetDatabaseIdSchemaWithResponse(ctx context.Context, id int, params *GetDatabaseIdSchemaParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemaResponse, error)

	// GetDatabaseIdSchemaSchemaWithResponse request
	GetDatabaseIdSchemaSchemaWithResponse(ctx context.Context, id int, schema string, params *GetDatabaseIdSchemaSchemaParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemaSchemaResponse, error)

	// GetDatabaseIdSchemasWithResponse request
	GetDatabaseIdSchemasWithResponse(ctx context.Context, id int, params *GetDatabaseIdSchemasParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemasResponse, error)

	// PostDatabaseIdSyncSchemaWithResponse request
	PostDatabaseIdSyncSchemaWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdSyncSchemaResponse, error)

	// GetDatabaseIdSyncableSchemasWithResponse request
	GetDatabaseIdSyncableSchemasWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdSyncableSchemasResponse, error)

	// PostDatabaseIdUnpersistWithResponse request
	PostDatabaseIdUnpersistWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdUnpersistResponse, error)

	// GetDatabaseIdUsageInfoWithResponse request
	GetDatabaseIdUsageInfoWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdUsageInfoResponse, error)

	// GetDatabaseVirtualDbDatasetsWithResponse request
	GetDatabaseVirtualDbDatasetsWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbDatasetsResponse, error)

	// GetDatabaseVirtualDbDatasetsSchemaWithResponse request
	GetDatabaseVirtualDbDatasetsSchemaWithResponse(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbDatasetsSchemaResponse, error)

	// GetDatabaseVirtualDbMetadataWithResponse request
	GetDatabaseVirtualDbMetadataWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbMetadataResponse, error)

	// GetDatabaseVirtualDbSchemaSchemaWithResponse request
	GetDatabaseVirtualDbSchemaSchemaWithResponse(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbSchemaSchemaResponse, error)

	// GetDatabaseVirtualDbSchemasWithResponse request
	GetDatabaseVirtualDbSchemasWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbSchemasResponse, error)

	// PostDatasetWithBodyWithResponse request with any body
	PostDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetResponse, error)

	PostDatasetWithResponse(ctx context.Context, body PostDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetResponse, error)

	// PostDatasetNativeWithBodyWithResponse request with any body
	PostDatasetNativeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetNativeResponse, error)

	PostDatasetNativeWithResponse(ctx context.Context, body PostDatasetNativeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetNativeResponse, error)

	// PostDatasetParameterSearchQueryWithBodyWithResponse request with any body
	PostDatasetParameterSearchQueryWithBodyWithResponse(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetParameterSearchQueryResponse, error)

	PostDatasetParameterSearchQueryWithResponse(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, body PostDatasetParameterSearchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetParameterSearchQueryResponse, error)

	// PostDatasetParameterValuesWithBodyWithResponse request with any body
	PostDatasetParameterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetParameterValuesResponse, error)

	PostDatasetParameterValuesWithResponse(ctx context.Context, body PostDatasetParameterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetParameterValuesResponse, error)

	// PostDatasetPivotWithBodyWithResponse request with any body
	PostDatasetPivotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetPivotResponse, error)

	PostDatasetPivotWithResponse(ctx context.Context, body PostDatasetPivotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetPivotResponse, error)

	// PostDatasetQueryMetadataWithBodyWithResponse request with any body
	PostDatasetQueryMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetQueryMetadataResponse, error)

	PostDatasetQueryMetadataWithResponse(ctx context.Context, body PostDatasetQueryMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetQueryMetadataResponse, error)

	// PostDatasetExportFormatWithBodyWithResponse request with any body
	PostDatasetExportFormatWithBodyWithResponse(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetExportFormatResponse, error)

	PostDatasetExportFormatWithResponse(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, body PostDatasetExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetExportFormatResponse, error)

	// GetDocsWithResponse request
	GetDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocsResponse, error)

	// DeleteEmailWithResponse request
	DeleteEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteEmailResponse, error)

	// PutEmailWithBodyWithResponse request with any body
	PutEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmailResponse, error)

	PutEmailWithResponse(ctx context.Context, body PutEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmailResponse, error)

	// PostEmailTestWithResponse request
	PostEmailTestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostEmailTestResponse, error)

	// GetEmbedCardTokenWithResponse request
	GetEmbedCardTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenResponse, error)

	// GetEmbedCardTokenFieldFieldIdRemappingRemappedIdWithResponse request
	GetEmbedCardTokenFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse, error)

	// GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdWithResponse request
	GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse, error)

	// GetEmbedCardTokenFieldFieldIdValuesWithResponse request
	GetEmbedCardTokenFieldFieldIdValuesWithResponse(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdValuesResponse, error)

	// GetEmbedCardTokenParamsParamKeySearchPrefixWithResponse request
	GetEmbedCardTokenParamsParamKeySearchPrefixWithResponse(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenParamsParamKeySearchPrefixResponse, error)

	// GetEmbedCardTokenParamsParamKeyValuesWithResponse request
	GetEmbedCardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenParamsParamKeyValuesResponse, error)

	// GetEmbedCardTokenQueryWithResponse request
	GetEmbedCardTokenQueryWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenQueryResponse, error)

	// GetEmbedCardTokenQueryExportFormatWithResponse request
	GetEmbedCardTokenQueryExportFormatWithResponse(ctx context.Context, token string, exportFormat GetEmbedCardTokenQueryExportFormatParamsExportFormat, params *GetEmbedCardTokenQueryExportFormatParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenQueryExportFormatResponse, error)

	// GetEmbedDashboardTokenWithResponse request
	GetEmbedDashboardTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenResponse, error)

	// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse request
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error)

	// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatWithResponse request
	GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatWithResponse(ctx context.Context, token string, dashcardId int, cardId int, exportFormat GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse, error)

	// GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdWithResponse request
	GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse, error)

	// GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdWithResponse request
	GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse, error)

	// GetEmbedDashboardTokenFieldFieldIdValuesWithResponse request
	GetEmbedDashboardTokenFieldFieldIdValuesWithResponse(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdValuesResponse, error)

	// GetEmbedDashboardTokenParamsParamKeySearchPrefixWithResponse request
	GetEmbedDashboardTokenParamsParamKeySearchPrefixWithResponse(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse, error)

	// GetEmbedDashboardTokenParamsParamKeyValuesWithResponse request
	GetEmbedDashboardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenParamsParamKeyValuesResponse, error)

	// GetEmbedPivotCardTokenQueryWithResponse request
	GetEmbedPivotCardTokenQueryWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedPivotCardTokenQueryResponse, error)

	// GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse request
	GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error)

	// GetFieldIdWithResponse request
	GetFieldIdWithResponse(ctx context.Context, id int, params *GetFieldIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdResponse, error)

	// PutFieldIdWithBodyWithResponse request with any body
	PutFieldIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFieldIdResponse, error)

	PutFieldIdWithResponse(ctx context.Context, id int, body PutFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFieldIdResponse, error)

	// DeleteFieldIdDimensionWithResponse request
	DeleteFieldIdDimensionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFieldIdDimensionResponse, error)

	// PostFieldIdDimensionWithBodyWithResponse request with any body
	PostFieldIdDimensionWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFieldIdDimensionResponse, error)

	PostFieldIdDimensionWithResponse(ctx context.Context, id int, body PostFieldIdDimensionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFieldIdDimensionResponse, error)

	// PostFieldIdDiscardValuesWithResponse request
	PostFieldIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostFieldIdDiscardValuesResponse, error)

	// GetFieldIdRelatedWithResponse request
	GetFieldIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdRelatedResponse, error)

	// GetFieldIdRemappingRemappedIdWithResponse request
	GetFieldIdRemappingRemappedIdWithResponse(ctx context.Context, id int, remappedId int, params *GetFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdRemappingRemappedIdResponse, error)

	// PostFieldIdRescanValuesWithResponse request
	PostFieldIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostFieldIdRescanValuesResponse, error)

	// GetFieldIdSearchSearchIdWithResponse request
	GetFieldIdSearchSearchIdWithResponse(ctx context.Context, id int, searchId int, params *GetFieldIdSearchSearchIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdSearchSearchIdResponse, error)

	// GetFieldIdSummaryWithResponse request
	GetFieldIdSummaryWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdSummaryResponse, error)

	// GetFieldIdValuesWithResponse request
	GetFieldIdValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdValuesResponse, error)

	// PostFieldIdValuesWithBodyWithResponse request with any body
	PostFieldIdValuesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFieldIdValuesResponse, error)

	PostFieldIdValuesWithResponse(ctx context.Context, id int, body PostFieldIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFieldIdValuesResponse, error)

	// GetGeojsonWithResponse request
	GetGeojsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGeojsonResponse, error)

	// GetGeojsonKeyWithResponse request
	GetGeojsonKeyWithResponse(ctx context.Context, key MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetGeojsonKeyResponse, error)

	// PutGoogleSettingsWithBodyWithResponse request with any body
	PutGoogleSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGoogleSettingsResponse, error)

	PutGoogleSettingsWithResponse(ctx context.Context, body PutGoogleSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGoogleSettingsResponse, error)

	// PutLdapSettingsWithBodyWithResponse request with any body
	PutLdapSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLdapSettingsResponse, error)

	PutLdapSettingsWithResponse(ctx context.Context, body PutLdapSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLdapSettingsResponse, error)

	// GetLoginHistoryCurrentWithResponse request
	GetLoginHistoryCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginHistoryCurrentResponse, error)

	// PostMetabotDatabaseDatabaseIdWithBodyWithResponse request with any body
	PostMetabotDatabaseDatabaseIdWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdResponse, error)

	PostMetabotDatabaseDatabaseIdWithResponse(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdResponse, error)

	// PostMetabotDatabaseDatabaseIdQueryWithBodyWithResponse request with any body
	PostMetabotDatabaseDatabaseIdQueryWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdQueryResponse, error)

	PostMetabotDatabaseDatabaseIdQueryWithResponse(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdQueryResponse, error)

	// PostMetabotFeedbackWithResponse request
	PostMetabotFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMetabotFeedbackResponse, error)

	// PostMetabotModelModelIdWithBodyWithResponse request with any body
	PostMetabotModelModelIdWithBodyWithResponse(ctx context.Context, modelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotModelModelIdResponse, error)

	PostMetabotModelModelIdWithResponse(ctx context.Context, modelId int, body PostMetabotModelModelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotModelModelIdResponse, error)

	// GetModelIndexWithResponse request
	GetModelIndexWithResponse(ctx context.Context, params *GetModelIndexParams, reqEditors ...RequestEditorFn) (*GetModelIndexResponse, error)

	// PostModelIndexWithBodyWithResponse request with any body
	PostModelIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostModelIndexResponse, error)

	PostModelIndexWithResponse(ctx context.Context, body PostModelIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostModelIndexResponse, error)

	// DeleteModelIndexIdWithResponse request
	DeleteModelIndexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteModelIndexIdResponse, error)

	// GetModelIndexIdWithResponse request
	GetModelIndexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetModelIndexIdResponse, error)

	// GetNativeQuerySnippetWithResponse request
	GetNativeQuerySnippetWithResponse(ctx context.Context, params *GetNativeQuerySnippetParams, reqEditors ...RequestEditorFn) (*GetNativeQuerySnippetResponse, error)

	// PostNativeQuerySnippetWithBodyWithResponse request with any body
	PostNativeQuerySnippetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNativeQuerySnippetResponse, error)

	PostNativeQuerySnippetWithResponse(ctx context.Context, body PostNativeQuerySnippetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNativeQuerySnippetResponse, error)

	// GetNativeQuerySnippetIdWithResponse request
	GetNativeQuerySnippetIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetNativeQuerySnippetIdResponse, error)

	// PutNativeQuerySnippetIdWithBodyWithResponse request with any body
	PutNativeQuerySnippetIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNativeQuerySnippetIdResponse, error)

	PutNativeQuerySnippetIdWithResponse(ctx context.Context, id int, body PutNativeQuerySnippetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNativeQuerySnippetIdResponse, error)

	// PostNotifyDbIdWithBodyWithResponse request with any body
	PostNotifyDbIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifyDbIdResponse, error)

	PostNotifyDbIdWithResponse(ctx context.Context, id int, body PostNotifyDbIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifyDbIdResponse, error)

	// PostNotifyDbIdNewTableWithBodyWithResponse request with any body
	PostNotifyDbIdNewTableWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifyDbIdNewTableResponse, error)

	PostNotifyDbIdNewTableWithResponse(ctx context.Context, id int, body PostNotifyDbIdNewTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifyDbIdNewTableResponse, error)

	// GetPermissionsGraphWithResponse request
	GetPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGraphResponse, error)

	// PutPermissionsGraphWithBodyWithResponse request with any body
	PutPermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsGraphResponse, error)

	PutPermissionsGraphWithResponse(ctx context.Context, body PutPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsGraphResponse, error)

	// GetPermissionsGraphDbDbIdWithResponse request
	GetPermissionsGraphDbDbIdWithResponse(ctx context.Context, dbId int, reqEditors ...RequestEditorFn) (*GetPermissionsGraphDbDbIdResponse, error)

	// GetPermissionsGraphGroupGroupIdWithResponse request
	GetPermissionsGraphGroupGroupIdWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetPermissionsGraphGroupGroupIdResponse, error)

	// GetPermissionsGroupWithResponse request
	GetPermissionsGroupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGroupResponse, error)

	// PostPermissionsGroupWithBodyWithResponse request with any body
	PostPermissionsGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsGroupResponse, error)

	PostPermissionsGroupWithResponse(ctx context.Context, body PostPermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsGroupResponse, error)

	// DeletePermissionsGroupGroupIdWithResponse request
	DeletePermissionsGroupGroupIdWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*DeletePermissionsGroupGroupIdResponse, error)

	// PutPermissionsGroupGroupIdWithBodyWithResponse request with any body
	PutPermissionsGroupGroupIdWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsGroupGroupIdResponse, error)

	PutPermissionsGroupGroupIdWithResponse(ctx context.Context, groupId int, body PutPermissionsGroupGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsGroupGroupIdResponse, error)

	// GetPermissionsGroupIdWithResponse request
	GetPermissionsGroupIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPermissionsGroupIdResponse, error)

	// GetPermissionsMembershipWithResponse request
	GetPermissionsMembershipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsMembershipResponse, error)

	// PostPermissionsMembershipWithBodyWithResponse request with any body
	PostPermissionsMembershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsMembershipResponse, error)

	PostPermissionsMembershipWithResponse(ctx context.Context, body PostPermissionsMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsMembershipResponse, error)

	// PutPermissionsMembershipGroupIdClearWithResponse request
	PutPermissionsMembershipGroupIdClearWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipGroupIdClearResponse, error)

	// DeletePermissionsMembershipIdWithResponse request
	DeletePermissionsMembershipIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePermissionsMembershipIdResponse, error)

	// PutPermissionsMembershipIdWithBodyWithResponse request with any body
	PutPermissionsMembershipIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipIdResponse, error)

	PutPermissionsMembershipIdWithResponse(ctx context.Context, id int, body PutPermissionsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipIdResponse, error)

	// GetPersistWithResponse request
	GetPersistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPersistResponse, error)

	// GetPersistCardCardIdWithResponse request
	GetPersistCardCardIdWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*GetPersistCardCardIdResponse, error)

	// PostPersistDisableWithResponse request
	PostPersistDisableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPersistDisableResponse, error)

	// PostPersistEnableWithResponse request
	PostPersistEnableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPersistEnableResponse, error)

	// PostPersistSetRefreshScheduleWithBodyWithResponse request with any body
	PostPersistSetRefreshScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPersistSetRefreshScheduleResponse, error)

	PostPersistSetRefreshScheduleWithResponse(ctx context.Context, body PostPersistSetRefreshScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPersistSetRefreshScheduleResponse, error)

	// GetPersistPersistedInfoIdWithResponse request
	GetPersistPersistedInfoIdWithResponse(ctx context.Context, persistedInfoId int, reqEditors ...RequestEditorFn) (*GetPersistPersistedInfoIdResponse, error)

	// GetPremiumFeaturesTokenStatusWithResponse request
	GetPremiumFeaturesTokenStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPremiumFeaturesTokenStatusResponse, error)

	// GetPreviewEmbedCardTokenWithResponse request
	GetPreviewEmbedCardTokenWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedCardTokenResponse, error)

	// GetPreviewEmbedCardTokenQueryWithResponse request
	GetPreviewEmbedCardTokenQueryWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedCardTokenQueryResponse, error)

	// GetPreviewEmbedDashboardTokenWithResponse request
	GetPreviewEmbedDashboardTokenWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenResponse, error)

	// GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse request
	GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error)

	// GetPreviewEmbedDashboardTokenParamsParamKeyValuesWithResponse request
	GetPreviewEmbedDashboardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse, error)

	// GetPreviewEmbedPivotCardTokenQueryWithResponse request
	GetPreviewEmbedPivotCardTokenQueryWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedPivotCardTokenQueryResponse, error)

	// GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse request
	GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error)

	// GetPublicActionUuidWithResponse request
	GetPublicActionUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicActionUuidResponse, error)

	// PostPublicActionUuidExecuteWithBodyWithResponse request with any body
	PostPublicActionUuidExecuteWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicActionUuidExecuteResponse, error)

	PostPublicActionUuidExecuteWithResponse(ctx context.Context, uuid string, body PostPublicActionUuidExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicActionUuidExecuteResponse, error)

	// GetPublicCardUuidWithResponse request
	GetPublicCardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicCardUuidResponse, error)

	// GetPublicCardUuidFieldFieldIdRemappingRemappedIdWithResponse request
	GetPublicCardUuidFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse, error)

	// GetPublicCardUuidFieldFieldIdSearchSearchFieldIdWithResponse request
	GetPublicCardUuidFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse, error)

	// GetPublicCardUuidFieldFieldIdValuesWithResponse request
	GetPublicCardUuidFieldFieldIdValuesWithResponse(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdValuesResponse, error)

	// GetPublicCardUuidParamsParamKeySearchQueryWithResponse request
	GetPublicCardUuidParamsParamKeySearchQueryWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicCardUuidParamsParamKeySearchQueryResponse, error)

	// GetPublicCardUuidParamsParamKeyValuesWithResponse request
	GetPublicCardUuidParamsParamKeyValuesWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicCardUuidParamsParamKeyValuesResponse, error)

	// GetPublicCardUuidQueryWithResponse request
	GetPublicCardUuidQueryWithResponse(ctx context.Context, uuid string, params *GetPublicCardUuidQueryParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidQueryResponse, error)

	// GetPublicCardUuidQueryExportFormatWithResponse request
	GetPublicCardUuidQueryExportFormatWithResponse(ctx context.Context, uuid string, exportFormat GetPublicCardUuidQueryExportFormatParamsExportFormat, reqEditors ...RequestEditorFn) (*GetPublicCardUuidQueryExportFormatResponse, error)

	// GetPublicDashboardUuidWithResponse request
	GetPublicDashboardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidResponse, error)

	// GetPublicDashboardUuidDashcardDashcardIdCardCardIdWithResponse request
	GetPublicDashboardUuidDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse, error)

	// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBodyWithResponse request with any body
	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBodyWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse, error)

	PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, body PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse, error)

	// GetPublicDashboardUuidDashcardDashcardIdExecuteWithResponse request
	GetPublicDashboardUuidDashcardDashcardIdExecuteWithResponse(ctx context.Context, uuid string, dashcardId int, params *GetPublicDashboardUuidDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidDashcardDashcardIdExecuteResponse, error)

	// PostPublicDashboardUuidDashcardDashcardIdExecuteWithBodyWithResponse request with any body
	PostPublicDashboardUuidDashcardDashcardIdExecuteWithBodyWithResponse(ctx context.Context, uuid string, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdExecuteResponse, error)

	PostPublicDashboardUuidDashcardDashcardIdExecuteWithResponse(ctx context.Context, uuid string, dashcardId int, body PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdExecuteResponse, error)

	// GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdWithResponse request
	GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse, error)

	// GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdWithResponse request
	GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse, error)

	// GetPublicDashboardUuidFieldFieldIdValuesWithResponse request
	GetPublicDashboardUuidFieldFieldIdValuesWithResponse(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdValuesResponse, error)

	// GetPublicDashboardUuidParamsParamKeySearchQueryWithResponse request
	GetPublicDashboardUuidParamsParamKeySearchQueryWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidParamsParamKeySearchQueryResponse, error)

	// GetPublicDashboardUuidParamsParamKeyValuesWithResponse request
	GetPublicDashboardUuidParamsParamKeyValuesWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidParamsParamKeyValuesResponse, error)

	// GetPublicOembedWithResponse request
	GetPublicOembedWithResponse(ctx context.Context, params *GetPublicOembedParams, reqEditors ...RequestEditorFn) (*GetPublicOembedResponse, error)

	// GetPublicPivotCardUuidQueryWithResponse request
	GetPublicPivotCardUuidQueryWithResponse(ctx context.Context, uuid string, params *GetPublicPivotCardUuidQueryParams, reqEditors ...RequestEditorFn) (*GetPublicPivotCardUuidQueryResponse, error)

	// GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdWithResponse request
	GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse, error)

	// GetPulseWithResponse request
	GetPulseWithResponse(ctx context.Context, params *GetPulseParams, reqEditors ...RequestEditorFn) (*GetPulseResponse, error)

	// PostPulseWithBodyWithResponse request with any body
	PostPulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPulseResponse, error)

	PostPulseWithResponse(ctx context.Context, body PostPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPulseResponse, error)

	// GetPulseFormInputWithResponse request
	GetPulseFormInputWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPulseFormInputResponse, error)

	// GetPulsePreviewCardIdWithResponse request
	GetPulsePreviewCardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardIdResponse, error)

	// GetPulsePreviewCardInfoIdWithResponse request
	GetPulsePreviewCardInfoIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardInfoIdResponse, error)

	// GetPulsePreviewCardPngIdWithResponse request
	GetPulsePreviewCardPngIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardPngIdResponse, error)

	// GetPulsePreviewDashboardIdWithResponse request
	GetPulsePreviewDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewDashboardIdResponse, error)

	// PostPulseTestWithBodyWithResponse request with any body
	PostPulseTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPulseTestResponse, error)

	PostPulseTestWithResponse(ctx context.Context, body PostPulseTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPulseTestResponse, error)

	// GetPulseIdWithResponse request
	GetPulseIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulseIdResponse, error)

	// PutPulseIdWithBodyWithResponse request with any body
	PutPulseIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPulseIdResponse, error)

	PutPulseIdWithResponse(ctx context.Context, id int, body PutPulseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPulseIdResponse, error)

	// DeletePulseIdSubscriptionWithResponse request
	DeletePulseIdSubscriptionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePulseIdSubscriptionResponse, error)

	// GetRevisionWithResponse request
	GetRevisionWithResponse(ctx context.Context, params *GetRevisionParams, reqEditors ...RequestEditorFn) (*GetRevisionResponse, error)

	// PostRevisionRevertWithBodyWithResponse request with any body
	PostRevisionRevertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionRevertResponse, error)

	PostRevisionRevertWithResponse(ctx context.Context, body PostRevisionRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionRevertResponse, error)

	// GetSearchWithResponse request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)

	// PostSearchForceReindexWithResponse request
	PostSearchForceReindexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSearchForceReindexResponse, error)

	// GetSearchModelsWithResponse request
	GetSearchModelsWithResponse(ctx context.Context, params *GetSearchModelsParams, reqEditors ...RequestEditorFn) (*GetSearchModelsResponse, error)

	// GetSegmentWithResponse request
	GetSegmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error)

	// PostSegmentWithBodyWithResponse request with any body
	PostSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSegmentResponse, error)

	PostSegmentWithResponse(ctx context.Context, body PostSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSegmentResponse, error)

	// DeleteSegmentIdWithResponse request
	DeleteSegmentIdWithResponse(ctx context.Context, id int, params *DeleteSegmentIdParams, reqEditors ...RequestEditorFn) (*DeleteSegmentIdResponse, error)

	// GetSegmentIdWithResponse request
	GetSegmentIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdResponse, error)

	// PutSegmentIdWithBodyWithResponse request with any body
	PutSegmentIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSegmentIdResponse, error)

	PutSegmentIdWithResponse(ctx context.Context, id int, body PutSegmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSegmentIdResponse, error)

	// GetSegmentIdRelatedWithResponse request
	GetSegmentIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdRelatedResponse, error)

	// PostSegmentIdRevertWithBodyWithResponse request with any body
	PostSegmentIdRevertWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSegmentIdRevertResponse, error)

	PostSegmentIdRevertWithResponse(ctx context.Context, id int, body PostSegmentIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSegmentIdRevertResponse, error)

	// GetSegmentIdRevisionsWithResponse request
	GetSegmentIdRevisionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdRevisionsResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// PostSessionWithBodyWithResponse request with any body
	PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)

	PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error)

	// PostSessionForgotPasswordWithBodyWithResponse request with any body
	PostSessionForgotPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionForgotPasswordResponse, error)

	PostSessionForgotPasswordWithResponse(ctx context.Context, body PostSessionForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionForgotPasswordResponse, error)

	// PostSessionGoogleAuthWithBodyWithResponse request with any body
	PostSessionGoogleAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionGoogleAuthResponse, error)

	PostSessionGoogleAuthWithResponse(ctx context.Context, body PostSessionGoogleAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionGoogleAuthResponse, error)

	// GetSessionPasswordResetTokenValidWithResponse request
	GetSessionPasswordResetTokenValidWithResponse(ctx context.Context, params *GetSessionPasswordResetTokenValidParams, reqEditors ...RequestEditorFn) (*GetSessionPasswordResetTokenValidResponse, error)

	// GetSessionPropertiesWithResponse request
	GetSessionPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionPropertiesResponse, error)

	// PostSessionPulseUnsubscribeWithBodyWithResponse request with any body
	PostSessionPulseUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeResponse, error)

	PostSessionPulseUnsubscribeWithResponse(ctx context.Context, body PostSessionPulseUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeResponse, error)

	// PostSessionPulseUnsubscribeUndoWithBodyWithResponse request with any body
	PostSessionPulseUnsubscribeUndoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeUndoResponse, error)

	PostSessionPulseUnsubscribeUndoWithResponse(ctx context.Context, body PostSessionPulseUnsubscribeUndoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeUndoResponse, error)

	// PostSessionResetPasswordWithBodyWithResponse request with any body
	PostSessionResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResetPasswordResponse, error)

	PostSessionResetPasswordWithResponse(ctx context.Context, body PostSessionResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResetPasswordResponse, error)

	// GetSettingWithResponse request
	GetSettingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingResponse, error)

	// PutSettingWithBodyWithResponse request with any body
	PutSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingResponse, error)

	PutSettingWithResponse(ctx context.Context, body PutSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingResponse, error)

	// GetSettingKeyWithResponse request
	GetSettingKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetSettingKeyResponse, error)

	// PutSettingKeyWithResponse request
	PutSettingKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*PutSettingKeyResponse, error)

	// PostSetupWithBodyWithResponse request with any body
	PostSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetupResponse, error)

	PostSetupWithResponse(ctx context.Context, body PostSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetupResponse, error)

	// GetSetupAdminChecklistWithResponse request
	GetSetupAdminChecklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupAdminChecklistResponse, error)

	// GetSetupUserDefaultsWithResponse request
	GetSetupUserDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupUserDefaultsResponse, error)

	// GetSlackManifestWithResponse request
	GetSlackManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSlackManifestResponse, error)

	// PutSlackSettingsWithBodyWithResponse request with any body
	PutSlackSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlackSettingsResponse, error)

	PutSlackSettingsWithResponse(ctx context.Context, body PutSlackSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlackSettingsResponse, error)

	// GetTableWithResponse request
	GetTableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTableResponse, error)

	// PutTableWithBodyWithResponse request with any body
	PutTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableResponse, error)

	PutTableWithResponse(ctx context.Context, body PutTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableResponse, error)

	// GetTableCardIdFksWithResponse request
	GetTableCardIdFksWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableCardIdFksResponse, error)

	// GetTableCardIdQueryMetadataWithResponse request
	GetTableCardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableCardIdQueryMetadataResponse, error)

	// GetTableIdWithResponse request
	GetTableIdWithResponse(ctx context.Context, id int, params *GetTableIdParams, reqEditors ...RequestEditorFn) (*GetTableIdResponse, error)

	// PutTableIdWithBodyWithResponse request with any body
	PutTableIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableIdResponse, error)

	PutTableIdWithResponse(ctx context.Context, id int, body PutTableIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableIdResponse, error)

	// PostTableIdAppendCsvWithResponse request
	PostTableIdAppendCsvWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdAppendCsvResponse, error)

	// PostTableIdDiscardValuesWithResponse request
	PostTableIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdDiscardValuesResponse, error)

	// PutTableIdFieldsOrderWithBodyWithResponse request with any body
	PutTableIdFieldsOrderWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableIdFieldsOrderResponse, error)

	PutTableIdFieldsOrderWithResponse(ctx context.Context, id int, body PutTableIdFieldsOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableIdFieldsOrderResponse, error)

	// GetTableIdFksWithResponse request
	GetTableIdFksWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableIdFksResponse, error)

	// GetTableIdQueryMetadataWithResponse request
	GetTableIdQueryMetadataWithResponse(ctx context.Context, id int, params *GetTableIdQueryMetadataParams, reqEditors ...RequestEditorFn) (*GetTableIdQueryMetadataResponse, error)

	// GetTableIdRelatedWithResponse request
	GetTableIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableIdRelatedResponse, error)

	// PostTableIdReplaceCsvWithResponse request
	PostTableIdReplaceCsvWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdReplaceCsvResponse, error)

	// PostTableIdRescanValuesWithResponse request
	PostTableIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdRescanValuesResponse, error)

	// GetTaskWithResponse request
	GetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// GetTaskInfoWithResponse request
	GetTaskInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskInfoResponse, error)

	// GetTaskIdWithResponse request
	GetTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error)

	// GetTilesZoomXYLatFieldLonFieldWithResponse request
	GetTilesZoomXYLatFieldLonFieldWithResponse(ctx context.Context, zoom int, x int, y int, latField string, lonField string, params *GetTilesZoomXYLatFieldLonFieldParams, reqEditors ...RequestEditorFn) (*GetTilesZoomXYLatFieldLonFieldResponse, error)

	// PostTimelineEventWithBodyWithResponse request with any body
	PostTimelineEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelineEventResponse, error)

	PostTimelineEventWithResponse(ctx context.Context, body PostTimelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelineEventResponse, error)

	// DeleteTimelineEventIdWithResponse request
	DeleteTimelineEventIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTimelineEventIdResponse, error)

	// GetTimelineEventIdWithResponse request
	GetTimelineEventIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTimelineEventIdResponse, error)

	// PutTimelineEventIdWithBodyWithResponse request with any body
	PutTimelineEventIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimelineEventIdResponse, error)

	PutTimelineEventIdWithResponse(ctx context.Context, id int, body PutTimelineEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimelineEventIdResponse, error)

	// GetTimelineWithResponse request
	GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error)

	// PostTimelineWithBodyWithResponse request with any body
	PostTimelineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelineResponse, error)

	PostTimelineWithResponse(ctx context.Context, body PostTimelineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelineResponse, error)

	// DeleteTimelineIdWithResponse request
	DeleteTimelineIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTimelineIdResponse, error)

	// GetTimelineIdWithResponse request
	GetTimelineIdWithResponse(ctx context.Context, id int, params *GetTimelineIdParams, reqEditors ...RequestEditorFn) (*GetTimelineIdResponse, error)

	// PutTimelineIdWithBodyWithResponse request with any body
	PutTimelineIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimelineIdResponse, error)

	PutTimelineIdWithResponse(ctx context.Context, id int, body PutTimelineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimelineIdResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PostUserWithBodyWithResponse request with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	// GetUserCurrentWithResponse request
	GetUserCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserCurrentResponse, error)

	// GetUserRecipientsWithResponse request
	GetUserRecipientsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserRecipientsResponse, error)

	// DeleteUserIdWithResponse request
	DeleteUserIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUserIdResponse, error)

	// GetUserIdWithResponse request
	GetUserIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetUserIdResponse, error)

	// PutUserIdWithBodyWithResponse request with any body
	PutUserIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error)

	PutUserIdWithResponse(ctx context.Context, id int, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error)

	// PutUserIdModalModalWithResponse request
	PutUserIdModalModalWithResponse(ctx context.Context, id int, modal string, reqEditors ...RequestEditorFn) (*PutUserIdModalModalResponse, error)

	// PutUserIdPasswordWithBodyWithResponse request with any body
	PutUserIdPasswordWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdPasswordResponse, error)

	PutUserIdPasswordWithResponse(ctx context.Context, id int, body PutUserIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdPasswordResponse, error)

	// PutUserIdReactivateWithResponse request
	PutUserIdReactivateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutUserIdReactivateResponse, error)

	// PostUserIdSendInviteWithResponse request
	PostUserIdSendInviteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUserIdSendInviteResponse, error)

	// GetUtilBugReportDetailsWithResponse request
	GetUtilBugReportDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilBugReportDetailsResponse, error)

	// GetUtilDiagnosticInfoConnectionPoolInfoWithResponse request
	GetUtilDiagnosticInfoConnectionPoolInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilDiagnosticInfoConnectionPoolInfoResponse, error)

	// PostUtilEntityIdWithBodyWithResponse request with any body
	PostUtilEntityIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilEntityIdResponse, error)

	PostUtilEntityIdWithResponse(ctx context.Context, body PostUtilEntityIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilEntityIdResponse, error)

	// GetUtilLogsWithResponse request
	GetUtilLogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilLogsResponse, error)

	// PostUtilPasswordCheckWithBodyWithResponse request with any body
	PostUtilPasswordCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilPasswordCheckResponse, error)

	PostUtilPasswordCheckWithResponse(ctx context.Context, body PostUtilPasswordCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilPasswordCheckResponse, error)

	// PostUtilProductFeedbackWithBodyWithResponse request with any body
	PostUtilProductFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilProductFeedbackResponse, error)

	PostUtilProductFeedbackWithResponse(ctx context.Context, body PostUtilProductFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilProductFeedbackResponse, error)

	// GetUtilRandomTokenWithResponse request
	GetUtilRandomTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilRandomTokenResponse, error)

	// GetUtilStatsWithResponse request
	GetUtilStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilStatsResponse, error)
}

type GetActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActionPublicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActionPublicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActionPublicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActionActionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteActionActionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActionActionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActionActionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActionActionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActionActionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActionActionIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActionActionIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActionActionIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutActionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutActionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutActionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActionIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostActionIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActionIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActionIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteActionIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActionIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActionIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostActionIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActionIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityMostRecentlyViewedDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActivityMostRecentlyViewedDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityMostRecentlyViewedDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityPopularItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActivityPopularItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityPopularItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityRecentViewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActivityRecentViewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityRecentViewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityRecentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetActivityRecentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityRecentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActivityRecentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostActivityRecentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActivityRecentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertQuestionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAlertQuestionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertQuestionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAlertIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutAlertIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertIdSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteAlertIdSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertIdSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiKeyCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiKeyIdRegenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutApiKeyIdRegenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiKeyIdRegenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsDatabaseIdCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsDatabaseIdCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsDatabaseIdCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetBookmarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBookmarkOrderingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutBookmarkOrderingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBookmarkOrderingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarkModelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarkModelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarkModelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarkModelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostBookmarkModelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarkModelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCacheInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCacheInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCacheInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardEmbeddableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardEmbeddableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardEmbeddableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardFromCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardFromCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardFromCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardPivotCardIdQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardPivotCardIdQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardPivotCardIdQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardPublicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardPublicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardPublicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardCardIdParamsParamKeySearchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardCardIdParamsParamKeySearchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardCardIdParamsParamKeySearchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardCardIdParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardCardIdParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardCardIdParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdPersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdPersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdPersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCardCardIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteCardCardIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCardCardIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdQueryExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdQueryExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdQueryExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardCardIdUnpersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardCardIdUnpersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardCardIdUnpersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardIdCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCardIdCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardIdCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardIdQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardIdQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardIdQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardIdSeriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardIdSeriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardIdSeriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardIdTimelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCardIdTimelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardIdTimelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChannelTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostChannelTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCloudMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloudMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCloudMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloudMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCloudMigrationCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutCloudMigrationCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCloudMigrationCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCollectionGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutCollectionGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCollectionGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionRootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionRootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionRootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionRootItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionRootItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionRootItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionRootTimelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionRootTimelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionRootTimelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionIdItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionIdItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionIdItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionIdTimelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCollectionIdTimelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionIdTimelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardEmbeddableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardEmbeddableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardEmbeddableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardParamsValidFilterFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardParamsValidFilterFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardParamsValidFilterFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardPublicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardPublicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardPublicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardSaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardSaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardSaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardSaveCollectionParentCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardSaveCollectionParentCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardSaveCollectionParentCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardDashboardIdDashcardDashcardIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardDashboardIdDashcardDashcardIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardDashboardIdDashcardDashcardIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardDashboardIdDashcardDashcardIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardDashboardIdDashcardDashcardIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardDashboardIdDashcardDashcardIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardDashboardIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardDashboardIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardDashboardIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardDashboardIdPublicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardDashboardIdPublicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardDashboardIdPublicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardFromDashboardIdCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardFromDashboardIdCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardFromDashboardIdCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDashboardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutDashboardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDashboardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDashboardIdCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutDashboardIdCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDashboardIdCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdParamsParamKeySearchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdParamsParamKeySearchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdParamsParamKeySearchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardIdRevertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDashboardIdRevertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardIdRevertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardIdRevisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDashboardIdRevisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardIdRevisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseSampleDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseSampleDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseSampleDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdAutocompleteSuggestionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdAutocompleteSuggestionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdAutocompleteSuggestionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdCardAutocompleteSuggestionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdCardAutocompleteSuggestionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdCardAutocompleteSuggestionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdDiscardValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdDiscardValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdDiscardValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdDismissSpinnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdDismissSpinnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdDismissSpinnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdIdfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdIdfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdIdfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdPersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdPersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdPersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdRescanValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdRescanValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdRescanValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdSchemaSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdSchemaSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdSchemaSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdSyncSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdSyncSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdSyncSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdSyncableSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdSyncableSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdSyncableSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabaseIdUnpersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatabaseIdUnpersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabaseIdUnpersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseIdUsageInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseIdUsageInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseIdUsageInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseVirtualDbDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseVirtualDbDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseVirtualDbDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseVirtualDbDatasetsSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseVirtualDbDatasetsSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseVirtualDbDatasetsSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseVirtualDbMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseVirtualDbMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseVirtualDbMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseVirtualDbSchemaSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseVirtualDbSchemaSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseVirtualDbSchemaSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseVirtualDbSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDatabaseVirtualDbSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseVirtualDbSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetNativeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetNativeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetNativeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetParameterSearchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetParameterSearchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetParameterSearchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetParameterValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetParameterValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetParameterValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetPivotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetPivotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetPivotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatasetExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostDatasetExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatasetExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDocsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmailTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostEmailTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmailTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenFieldFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenFieldFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenFieldFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenParamsParamKeySearchPrefixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenParamsParamKeySearchPrefixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenParamsParamKeySearchPrefixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedCardTokenQueryExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedCardTokenQueryExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedCardTokenQueryExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenFieldFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenFieldFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenFieldFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedDashboardTokenParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedDashboardTokenParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedDashboardTokenParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedPivotCardTokenQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedPivotCardTokenQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedPivotCardTokenQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFieldIdDimensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteFieldIdDimensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFieldIdDimensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFieldIdDimensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostFieldIdDimensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFieldIdDimensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFieldIdDiscardValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostFieldIdDiscardValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFieldIdDiscardValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdRemappingRemappedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdRemappingRemappedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdRemappingRemappedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFieldIdRescanValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostFieldIdRescanValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFieldIdRescanValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdSearchSearchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdSearchSearchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdSearchSearchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeojsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGeojsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeojsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeojsonKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetGeojsonKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeojsonKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGoogleSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutGoogleSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGoogleSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLdapSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutLdapSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLdapSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginHistoryCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetLoginHistoryCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginHistoryCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetabotDatabaseDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMetabotDatabaseDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetabotDatabaseDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetabotDatabaseDatabaseIdQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMetabotDatabaseDatabaseIdQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetabotDatabaseDatabaseIdQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetabotFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMetabotFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetabotFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetabotModelModelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMetabotModelModelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetabotModelModelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetModelIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostModelIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostModelIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostModelIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelIndexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteModelIndexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelIndexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelIndexIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetModelIndexIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelIndexIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNativeQuerySnippetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetNativeQuerySnippetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNativeQuerySnippetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNativeQuerySnippetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostNativeQuerySnippetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNativeQuerySnippetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNativeQuerySnippetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetNativeQuerySnippetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNativeQuerySnippetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNativeQuerySnippetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutNativeQuerySnippetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNativeQuerySnippetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotifyDbIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostNotifyDbIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotifyDbIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotifyDbIdNewTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostNotifyDbIdNewTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotifyDbIdNewTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutPermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGraphDbDbIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGraphDbDbIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGraphDbDbIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGraphGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGraphGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGraphGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionsGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeletePermissionsGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionsGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPermissionsGroupGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutPermissionsGroupGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPermissionsGroupGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPermissionsMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPermissionsMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPermissionsMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPermissionsMembershipGroupIdClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutPermissionsMembershipGroupIdClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPermissionsMembershipGroupIdClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeletePermissionsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPermissionsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutPermissionsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPermissionsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersistCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPersistCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersistCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPersistDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPersistDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPersistDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPersistEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPersistEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPersistEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPersistSetRefreshScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPersistSetRefreshScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPersistSetRefreshScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersistPersistedInfoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPersistPersistedInfoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersistPersistedInfoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPremiumFeaturesTokenStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPremiumFeaturesTokenStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPremiumFeaturesTokenStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedCardTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedCardTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedCardTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedCardTokenQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedCardTokenQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedCardTokenQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedDashboardTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedDashboardTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedDashboardTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedPivotCardTokenQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedPivotCardTokenQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedPivotCardTokenQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicActionUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicActionUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicActionUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicActionUuidExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPublicActionUuidExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicActionUuidExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidFieldFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidFieldFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidFieldFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidParamsParamKeySearchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidParamsParamKeySearchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidParamsParamKeySearchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicCardUuidQueryExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicCardUuidQueryExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicCardUuidQueryExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidDashcardDashcardIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidDashcardDashcardIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidDashcardDashcardIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublicDashboardUuidDashcardDashcardIdExecuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPublicDashboardUuidDashcardDashcardIdExecuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublicDashboardUuidDashcardDashcardIdExecuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidFieldFieldIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidFieldFieldIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidFieldFieldIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidParamsParamKeySearchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidParamsParamKeySearchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidParamsParamKeySearchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDashboardUuidParamsParamKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicDashboardUuidParamsParamKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDashboardUuidParamsParamKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicOembedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicOembedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicOembedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicPivotCardUuidQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicPivotCardUuidQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicPivotCardUuidQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseFormInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulseFormInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseFormInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulsePreviewCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulsePreviewCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulsePreviewCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulsePreviewCardInfoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulsePreviewCardInfoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulsePreviewCardInfoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulsePreviewCardPngIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulsePreviewCardPngIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulsePreviewCardPngIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulsePreviewDashboardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulsePreviewDashboardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulsePreviewDashboardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPulseTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostPulseTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPulseTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPulseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPulseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPulseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPulseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutPulseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPulseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePulseIdSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeletePulseIdSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePulseIdSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRevisionRevertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostRevisionRevertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRevisionRevertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchForceReindexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSearchForceReindexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchForceReindexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSearchModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSegmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteSegmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSegmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSegmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSegmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutSegmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSegmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentIdRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSegmentIdRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentIdRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSegmentIdRevertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSegmentIdRevertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSegmentIdRevertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentIdRevisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSegmentIdRevisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentIdRevisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionForgotPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionForgotPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionForgotPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionGoogleAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionGoogleAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionGoogleAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionPasswordResetTokenValidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSessionPasswordResetTokenValidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionPasswordResetTokenValidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSessionPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionPulseUnsubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionPulseUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionPulseUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionPulseUnsubscribeUndoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionPulseUnsubscribeUndoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionPulseUnsubscribeUndoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSessionResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSessionResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSessionResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSettingKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutSettingKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSetupAdminChecklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSetupAdminChecklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSetupAdminChecklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSetupUserDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSetupUserDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSetupUserDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlackManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSlackManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlackManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSlackSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutSlackSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSlackSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableCardIdFksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableCardIdFksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableCardIdFksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableCardIdQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableCardIdQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableCardIdQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTableIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutTableIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTableIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTableIdAppendCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTableIdAppendCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTableIdAppendCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTableIdDiscardValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTableIdDiscardValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTableIdDiscardValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTableIdFieldsOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutTableIdFieldsOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTableIdFieldsOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableIdFksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableIdFksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableIdFksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableIdQueryMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableIdQueryMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableIdQueryMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableIdRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTableIdRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableIdRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTableIdReplaceCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTableIdReplaceCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTableIdReplaceCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTableIdRescanValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTableIdRescanValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTableIdRescanValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTaskInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTilesZoomXYLatFieldLonFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTilesZoomXYLatFieldLonFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTilesZoomXYLatFieldLonFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTimelineEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTimelineEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTimelineEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTimelineEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteTimelineEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTimelineEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelineEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTimelineEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelineEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTimelineEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutTimelineEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTimelineEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTimelineIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteTimelineIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTimelineIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelineIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTimelineIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelineIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTimelineIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutTimelineIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTimelineIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdModalModalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutUserIdModalModalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdModalModalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutUserIdPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserIdReactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutUserIdReactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserIdReactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserIdSendInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUserIdSendInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserIdSendInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUtilBugReportDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUtilBugReportDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUtilBugReportDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUtilDiagnosticInfoConnectionPoolInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUtilDiagnosticInfoConnectionPoolInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUtilDiagnosticInfoConnectionPoolInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUtilEntityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUtilEntityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUtilEntityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUtilLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUtilLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUtilLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUtilPasswordCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUtilPasswordCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUtilPasswordCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUtilProductFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUtilProductFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUtilProductFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUtilRandomTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUtilRandomTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUtilRandomTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUtilStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUtilStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUtilStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetActionWithResponse request returning *GetActionResponse
func (c *ClientWithResponses) GetActionWithResponse(ctx context.Context, params *GetActionParams, reqEditors ...RequestEditorFn) (*GetActionResponse, error) {
	rsp, err := c.GetAction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActionResponse(rsp)
}

// PostActionWithBodyWithResponse request with arbitrary body returning *PostActionResponse
func (c *ClientWithResponses) PostActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionResponse, error) {
	rsp, err := c.PostActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionResponse(rsp)
}

func (c *ClientWithResponses) PostActionWithResponse(ctx context.Context, body PostActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionResponse, error) {
	rsp, err := c.PostAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionResponse(rsp)
}

// GetActionPublicWithResponse request returning *GetActionPublicResponse
func (c *ClientWithResponses) GetActionPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActionPublicResponse, error) {
	rsp, err := c.GetActionPublic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActionPublicResponse(rsp)
}

// DeleteActionActionIdWithResponse request returning *DeleteActionActionIdResponse
func (c *ClientWithResponses) DeleteActionActionIdWithResponse(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*DeleteActionActionIdResponse, error) {
	rsp, err := c.DeleteActionActionId(ctx, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActionActionIdResponse(rsp)
}

// GetActionActionIdWithResponse request returning *GetActionActionIdResponse
func (c *ClientWithResponses) GetActionActionIdWithResponse(ctx context.Context, actionId int, reqEditors ...RequestEditorFn) (*GetActionActionIdResponse, error) {
	rsp, err := c.GetActionActionId(ctx, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActionActionIdResponse(rsp)
}

// GetActionActionIdExecuteWithResponse request returning *GetActionActionIdExecuteResponse
func (c *ClientWithResponses) GetActionActionIdExecuteWithResponse(ctx context.Context, actionId int, params *GetActionActionIdExecuteParams, reqEditors ...RequestEditorFn) (*GetActionActionIdExecuteResponse, error) {
	rsp, err := c.GetActionActionIdExecute(ctx, actionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActionActionIdExecuteResponse(rsp)
}

// PutActionIdWithBodyWithResponse request with arbitrary body returning *PutActionIdResponse
func (c *ClientWithResponses) PutActionIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActionIdResponse, error) {
	rsp, err := c.PutActionIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActionIdResponse(rsp)
}

func (c *ClientWithResponses) PutActionIdWithResponse(ctx context.Context, id int, body PutActionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActionIdResponse, error) {
	rsp, err := c.PutActionId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActionIdResponse(rsp)
}

// PostActionIdExecuteWithBodyWithResponse request with arbitrary body returning *PostActionIdExecuteResponse
func (c *ClientWithResponses) PostActionIdExecuteWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActionIdExecuteResponse, error) {
	rsp, err := c.PostActionIdExecuteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionIdExecuteResponse(rsp)
}

func (c *ClientWithResponses) PostActionIdExecuteWithResponse(ctx context.Context, id int, body PostActionIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActionIdExecuteResponse, error) {
	rsp, err := c.PostActionIdExecute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionIdExecuteResponse(rsp)
}

// DeleteActionIdPublicLinkWithResponse request returning *DeleteActionIdPublicLinkResponse
func (c *ClientWithResponses) DeleteActionIdPublicLinkWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteActionIdPublicLinkResponse, error) {
	rsp, err := c.DeleteActionIdPublicLink(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActionIdPublicLinkResponse(rsp)
}

// PostActionIdPublicLinkWithResponse request returning *PostActionIdPublicLinkResponse
func (c *ClientWithResponses) PostActionIdPublicLinkWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostActionIdPublicLinkResponse, error) {
	rsp, err := c.PostActionIdPublicLink(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActionIdPublicLinkResponse(rsp)
}

// GetActivityMostRecentlyViewedDashboardWithResponse request returning *GetActivityMostRecentlyViewedDashboardResponse
func (c *ClientWithResponses) GetActivityMostRecentlyViewedDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityMostRecentlyViewedDashboardResponse, error) {
	rsp, err := c.GetActivityMostRecentlyViewedDashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityMostRecentlyViewedDashboardResponse(rsp)
}

// GetActivityPopularItemsWithResponse request returning *GetActivityPopularItemsResponse
func (c *ClientWithResponses) GetActivityPopularItemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityPopularItemsResponse, error) {
	rsp, err := c.GetActivityPopularItems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityPopularItemsResponse(rsp)
}

// GetActivityRecentViewsWithResponse request returning *GetActivityRecentViewsResponse
func (c *ClientWithResponses) GetActivityRecentViewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityRecentViewsResponse, error) {
	rsp, err := c.GetActivityRecentViews(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityRecentViewsResponse(rsp)
}

// GetActivityRecentsWithResponse request returning *GetActivityRecentsResponse
func (c *ClientWithResponses) GetActivityRecentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActivityRecentsResponse, error) {
	rsp, err := c.GetActivityRecents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityRecentsResponse(rsp)
}

// PostActivityRecentsWithBodyWithResponse request with arbitrary body returning *PostActivityRecentsResponse
func (c *ClientWithResponses) PostActivityRecentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivityRecentsResponse, error) {
	rsp, err := c.PostActivityRecentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivityRecentsResponse(rsp)
}

func (c *ClientWithResponses) PostActivityRecentsWithResponse(ctx context.Context, body PostActivityRecentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivityRecentsResponse, error) {
	rsp, err := c.PostActivityRecents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivityRecentsResponse(rsp)
}

// GetAlertWithResponse request returning *GetAlertResponse
func (c *ClientWithResponses) GetAlertWithResponse(ctx context.Context, params *GetAlertParams, reqEditors ...RequestEditorFn) (*GetAlertResponse, error) {
	rsp, err := c.GetAlert(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertResponse(rsp)
}

// PostAlertWithBodyWithResponse request with arbitrary body returning *PostAlertResponse
func (c *ClientWithResponses) PostAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertResponse, error) {
	rsp, err := c.PostAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertResponse(rsp)
}

func (c *ClientWithResponses) PostAlertWithResponse(ctx context.Context, body PostAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertResponse, error) {
	rsp, err := c.PostAlert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertResponse(rsp)
}

// GetAlertQuestionIdWithResponse request returning *GetAlertQuestionIdResponse
func (c *ClientWithResponses) GetAlertQuestionIdWithResponse(ctx context.Context, id int, params *GetAlertQuestionIdParams, reqEditors ...RequestEditorFn) (*GetAlertQuestionIdResponse, error) {
	rsp, err := c.GetAlertQuestionId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertQuestionIdResponse(rsp)
}

// GetAlertIdWithResponse request returning *GetAlertIdResponse
func (c *ClientWithResponses) GetAlertIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAlertIdResponse, error) {
	rsp, err := c.GetAlertId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertIdResponse(rsp)
}

// PutAlertIdWithBodyWithResponse request with arbitrary body returning *PutAlertIdResponse
func (c *ClientWithResponses) PutAlertIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertIdResponse, error) {
	rsp, err := c.PutAlertIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertIdResponse(rsp)
}

func (c *ClientWithResponses) PutAlertIdWithResponse(ctx context.Context, id int, body PutAlertIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertIdResponse, error) {
	rsp, err := c.PutAlertId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertIdResponse(rsp)
}

// DeleteAlertIdSubscriptionWithResponse request returning *DeleteAlertIdSubscriptionResponse
func (c *ClientWithResponses) DeleteAlertIdSubscriptionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAlertIdSubscriptionResponse, error) {
	rsp, err := c.DeleteAlertIdSubscription(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertIdSubscriptionResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// PostApiKeyWithBodyWithResponse request with arbitrary body returning *PostApiKeyResponse
func (c *ClientWithResponses) PostApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error) {
	rsp, err := c.PostApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiKeyWithResponse(ctx context.Context, body PostApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiKeyResponse, error) {
	rsp, err := c.PostApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiKeyResponse(rsp)
}

// GetApiKeyCountWithResponse request returning *GetApiKeyCountResponse
func (c *ClientWithResponses) GetApiKeyCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyCountResponse, error) {
	rsp, err := c.GetApiKeyCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyCountResponse(rsp)
}

// DeleteApiKeyIdWithResponse request returning *DeleteApiKeyIdResponse
func (c *ClientWithResponses) DeleteApiKeyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiKeyIdResponse, error) {
	rsp, err := c.DeleteApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyIdResponse(rsp)
}

// PutApiKeyIdWithBodyWithResponse request with arbitrary body returning *PutApiKeyIdResponse
func (c *ClientWithResponses) PutApiKeyIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiKeyIdResponse, error) {
	rsp, err := c.PutApiKeyIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiKeyIdWithResponse(ctx context.Context, id int, body PutApiKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiKeyIdResponse, error) {
	rsp, err := c.PutApiKeyId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiKeyIdResponse(rsp)
}

// PutApiKeyIdRegenerateWithResponse request returning *PutApiKeyIdRegenerateResponse
func (c *ClientWithResponses) PutApiKeyIdRegenerateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutApiKeyIdRegenerateResponse, error) {
	rsp, err := c.PutApiKeyIdRegenerate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiKeyIdRegenerateResponse(rsp)
}

// GetAutomagicDashboardsDatabaseIdCandidatesWithResponse request returning *GetAutomagicDashboardsDatabaseIdCandidatesResponse
func (c *ClientWithResponses) GetAutomagicDashboardsDatabaseIdCandidatesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsDatabaseIdCandidatesResponse, error) {
	rsp, err := c.GetAutomagicDashboardsDatabaseIdCandidates(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsDatabaseIdCandidatesResponse(rsp)
}

// GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdWithResponse request returning *GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse
func (c *ClientWithResponses) GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdWithResponse(ctx context.Context, modelIndexId int, pkId int, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse, error) {
	rsp, err := c.GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkId(ctx, modelIndexId, pkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryParamsEntity, entityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQuery(ctx, entity, entityIdOrQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQuery(ctx, entity, entityIdOrQuery, cellQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx, entity, entityIdOrQuery, cellQuery, comparisonEntity, comparisonEntityIdOrQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplate(ctx, entity, entityIdOrQuery, cellQuery, prefix, dashboardTemplate, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, cellQuery interface{}, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx, entity, entityIdOrQuery, cellQuery, prefix, dashboardTemplate, comparisonEntity, comparisonEntityIdOrQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQuery(ctx, entity, entityIdOrQuery, comparisonEntity, comparisonEntityIdOrQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataParamsEntity, entityIdOrQuery string, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadata(ctx, entity, entityIdOrQuery, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplate(ctx, entity, entityIdOrQuery, prefix, dashboardTemplate, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse(rsp)
}

// GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse request returning *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse
func (c *ClientWithResponses) GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse(ctx context.Context, entity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsEntity, entityIdOrQuery MetabaseLibSchemaCommonNonBlankString, prefix interface{}, dashboardTemplate interface{}, comparisonEntity GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParamsComparisonEntity, comparisonEntityIdOrQuery string, params *GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryParams, reqEditors ...RequestEditorFn) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	rsp, err := c.GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQuery(ctx, entity, entityIdOrQuery, prefix, dashboardTemplate, comparisonEntity, comparisonEntityIdOrQuery, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp)
}

// GetBookmarkWithResponse request returning *GetBookmarkResponse
func (c *ClientWithResponses) GetBookmarkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBookmarkResponse, error) {
	rsp, err := c.GetBookmark(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarkResponse(rsp)
}

// PutBookmarkOrderingWithBodyWithResponse request with arbitrary body returning *PutBookmarkOrderingResponse
func (c *ClientWithResponses) PutBookmarkOrderingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookmarkOrderingResponse, error) {
	rsp, err := c.PutBookmarkOrderingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookmarkOrderingResponse(rsp)
}

func (c *ClientWithResponses) PutBookmarkOrderingWithResponse(ctx context.Context, body PutBookmarkOrderingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookmarkOrderingResponse, error) {
	rsp, err := c.PutBookmarkOrdering(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookmarkOrderingResponse(rsp)
}

// DeleteBookmarkModelIdWithResponse request returning *DeleteBookmarkModelIdResponse
func (c *ClientWithResponses) DeleteBookmarkModelIdWithResponse(ctx context.Context, model DeleteBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*DeleteBookmarkModelIdResponse, error) {
	rsp, err := c.DeleteBookmarkModelId(ctx, model, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarkModelIdResponse(rsp)
}

// PostBookmarkModelIdWithResponse request returning *PostBookmarkModelIdResponse
func (c *ClientWithResponses) PostBookmarkModelIdWithResponse(ctx context.Context, model PostBookmarkModelIdParamsModel, id int, reqEditors ...RequestEditorFn) (*PostBookmarkModelIdResponse, error) {
	rsp, err := c.PostBookmarkModelId(ctx, model, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarkModelIdResponse(rsp)
}

// DeleteCacheWithBodyWithResponse request with arbitrary body returning *DeleteCacheResponse
func (c *ClientWithResponses) DeleteCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error) {
	rsp, err := c.DeleteCacheWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCacheResponse(rsp)
}

func (c *ClientWithResponses) DeleteCacheWithResponse(ctx context.Context, body DeleteCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCacheResponse, error) {
	rsp, err := c.DeleteCache(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCacheResponse(rsp)
}

// GetCacheWithResponse request returning *GetCacheResponse
func (c *ClientWithResponses) GetCacheWithResponse(ctx context.Context, params *GetCacheParams, reqEditors ...RequestEditorFn) (*GetCacheResponse, error) {
	rsp, err := c.GetCache(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCacheResponse(rsp)
}

// PutCacheWithBodyWithResponse request with arbitrary body returning *PutCacheResponse
func (c *ClientWithResponses) PutCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCacheResponse, error) {
	rsp, err := c.PutCacheWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCacheResponse(rsp)
}

func (c *ClientWithResponses) PutCacheWithResponse(ctx context.Context, body PutCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCacheResponse, error) {
	rsp, err := c.PutCache(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCacheResponse(rsp)
}

// PostCacheInvalidateWithResponse request returning *PostCacheInvalidateResponse
func (c *ClientWithResponses) PostCacheInvalidateWithResponse(ctx context.Context, params *PostCacheInvalidateParams, reqEditors ...RequestEditorFn) (*PostCacheInvalidateResponse, error) {
	rsp, err := c.PostCacheInvalidate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCacheInvalidateResponse(rsp)
}

// GetCardWithResponse request returning *GetCardResponse
func (c *ClientWithResponses) GetCardWithResponse(ctx context.Context, params *GetCardParams, reqEditors ...RequestEditorFn) (*GetCardResponse, error) {
	rsp, err := c.GetCard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardResponse(rsp)
}

// PostCardWithBodyWithResponse request with arbitrary body returning *PostCardResponse
func (c *ClientWithResponses) PostCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardResponse, error) {
	rsp, err := c.PostCardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardResponse(rsp)
}

func (c *ClientWithResponses) PostCardWithResponse(ctx context.Context, body PostCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardResponse, error) {
	rsp, err := c.PostCard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardResponse(rsp)
}

// PostCardCollectionsWithBodyWithResponse request with arbitrary body returning *PostCardCollectionsResponse
func (c *ClientWithResponses) PostCardCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCollectionsResponse, error) {
	rsp, err := c.PostCardCollectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostCardCollectionsWithResponse(ctx context.Context, body PostCardCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCollectionsResponse, error) {
	rsp, err := c.PostCardCollections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCollectionsResponse(rsp)
}

// GetCardEmbeddableWithResponse request returning *GetCardEmbeddableResponse
func (c *ClientWithResponses) GetCardEmbeddableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCardEmbeddableResponse, error) {
	rsp, err := c.GetCardEmbeddable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardEmbeddableResponse(rsp)
}

// PostCardFromCsvWithResponse request returning *PostCardFromCsvResponse
func (c *ClientWithResponses) PostCardFromCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCardFromCsvResponse, error) {
	rsp, err := c.PostCardFromCsv(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardFromCsvResponse(rsp)
}

// PostCardPivotCardIdQueryWithBodyWithResponse request with arbitrary body returning *PostCardPivotCardIdQueryResponse
func (c *ClientWithResponses) PostCardPivotCardIdQueryWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardPivotCardIdQueryResponse, error) {
	rsp, err := c.PostCardPivotCardIdQueryWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardPivotCardIdQueryResponse(rsp)
}

func (c *ClientWithResponses) PostCardPivotCardIdQueryWithResponse(ctx context.Context, cardId int, body PostCardPivotCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardPivotCardIdQueryResponse, error) {
	rsp, err := c.PostCardPivotCardIdQuery(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardPivotCardIdQueryResponse(rsp)
}

// GetCardPublicWithResponse request returning *GetCardPublicResponse
func (c *ClientWithResponses) GetCardPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCardPublicResponse, error) {
	rsp, err := c.GetCardPublic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardPublicResponse(rsp)
}

// GetCardCardIdParamsParamKeySearchQueryWithResponse request returning *GetCardCardIdParamsParamKeySearchQueryResponse
func (c *ClientWithResponses) GetCardCardIdParamsParamKeySearchQueryWithResponse(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetCardCardIdParamsParamKeySearchQueryResponse, error) {
	rsp, err := c.GetCardCardIdParamsParamKeySearchQuery(ctx, cardId, paramKey, query, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardCardIdParamsParamKeySearchQueryResponse(rsp)
}

// GetCardCardIdParamsParamKeyValuesWithResponse request returning *GetCardCardIdParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetCardCardIdParamsParamKeyValuesWithResponse(ctx context.Context, cardId int, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetCardCardIdParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetCardCardIdParamsParamKeyValues(ctx, cardId, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardCardIdParamsParamKeyValuesResponse(rsp)
}

// PostCardCardIdPersistWithResponse request returning *PostCardCardIdPersistResponse
func (c *ClientWithResponses) PostCardCardIdPersistWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdPersistResponse, error) {
	rsp, err := c.PostCardCardIdPersist(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdPersistResponse(rsp)
}

// DeleteCardCardIdPublicLinkWithResponse request returning *DeleteCardCardIdPublicLinkResponse
func (c *ClientWithResponses) DeleteCardCardIdPublicLinkWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*DeleteCardCardIdPublicLinkResponse, error) {
	rsp, err := c.DeleteCardCardIdPublicLink(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCardCardIdPublicLinkResponse(rsp)
}

// PostCardCardIdPublicLinkWithResponse request returning *PostCardCardIdPublicLinkResponse
func (c *ClientWithResponses) PostCardCardIdPublicLinkWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdPublicLinkResponse, error) {
	rsp, err := c.PostCardCardIdPublicLink(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdPublicLinkResponse(rsp)
}

// PostCardCardIdQueryWithBodyWithResponse request with arbitrary body returning *PostCardCardIdQueryResponse
func (c *ClientWithResponses) PostCardCardIdQueryWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryResponse, error) {
	rsp, err := c.PostCardCardIdQueryWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdQueryResponse(rsp)
}

func (c *ClientWithResponses) PostCardCardIdQueryWithResponse(ctx context.Context, cardId int, body PostCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryResponse, error) {
	rsp, err := c.PostCardCardIdQuery(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdQueryResponse(rsp)
}

// PostCardCardIdQueryExportFormatWithBodyWithResponse request with arbitrary body returning *PostCardCardIdQueryExportFormatResponse
func (c *ClientWithResponses) PostCardCardIdQueryExportFormatWithBodyWithResponse(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryExportFormatResponse, error) {
	rsp, err := c.PostCardCardIdQueryExportFormatWithBody(ctx, cardId, exportFormat, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdQueryExportFormatResponse(rsp)
}

func (c *ClientWithResponses) PostCardCardIdQueryExportFormatWithResponse(ctx context.Context, cardId int, exportFormat PostCardCardIdQueryExportFormatParamsExportFormat, body PostCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardCardIdQueryExportFormatResponse, error) {
	rsp, err := c.PostCardCardIdQueryExportFormat(ctx, cardId, exportFormat, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdQueryExportFormatResponse(rsp)
}

// PostCardCardIdRefreshWithResponse request returning *PostCardCardIdRefreshResponse
func (c *ClientWithResponses) PostCardCardIdRefreshWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdRefreshResponse, error) {
	rsp, err := c.PostCardCardIdRefresh(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdRefreshResponse(rsp)
}

// PostCardCardIdUnpersistWithResponse request returning *PostCardCardIdUnpersistResponse
func (c *ClientWithResponses) PostCardCardIdUnpersistWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*PostCardCardIdUnpersistResponse, error) {
	rsp, err := c.PostCardCardIdUnpersist(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardCardIdUnpersistResponse(rsp)
}

// DeleteCardIdWithResponse request returning *DeleteCardIdResponse
func (c *ClientWithResponses) DeleteCardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteCardIdResponse, error) {
	rsp, err := c.DeleteCardId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCardIdResponse(rsp)
}

// GetCardIdWithResponse request returning *GetCardIdResponse
func (c *ClientWithResponses) GetCardIdWithResponse(ctx context.Context, id int, params *GetCardIdParams, reqEditors ...RequestEditorFn) (*GetCardIdResponse, error) {
	rsp, err := c.GetCardId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardIdResponse(rsp)
}

// PutCardIdWithBodyWithResponse request with arbitrary body returning *PutCardIdResponse
func (c *ClientWithResponses) PutCardIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCardIdResponse, error) {
	rsp, err := c.PutCardIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCardIdResponse(rsp)
}

func (c *ClientWithResponses) PutCardIdWithResponse(ctx context.Context, id int, body PutCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCardIdResponse, error) {
	rsp, err := c.PutCardId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCardIdResponse(rsp)
}

// PostCardIdCopyWithResponse request returning *PostCardIdCopyResponse
func (c *ClientWithResponses) PostCardIdCopyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostCardIdCopyResponse, error) {
	rsp, err := c.PostCardIdCopy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardIdCopyResponse(rsp)
}

// GetCardIdQueryMetadataWithResponse request returning *GetCardIdQueryMetadataResponse
func (c *ClientWithResponses) GetCardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCardIdQueryMetadataResponse, error) {
	rsp, err := c.GetCardIdQueryMetadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardIdQueryMetadataResponse(rsp)
}

// GetCardIdSeriesWithResponse request returning *GetCardIdSeriesResponse
func (c *ClientWithResponses) GetCardIdSeriesWithResponse(ctx context.Context, id int, params *GetCardIdSeriesParams, reqEditors ...RequestEditorFn) (*GetCardIdSeriesResponse, error) {
	rsp, err := c.GetCardIdSeries(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardIdSeriesResponse(rsp)
}

// GetCardIdTimelinesWithResponse request returning *GetCardIdTimelinesResponse
func (c *ClientWithResponses) GetCardIdTimelinesWithResponse(ctx context.Context, id int, params *GetCardIdTimelinesParams, reqEditors ...RequestEditorFn) (*GetCardIdTimelinesResponse, error) {
	rsp, err := c.GetCardIdTimelines(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardIdTimelinesResponse(rsp)
}

// GetChannelWithResponse request returning *GetChannelResponse
func (c *ClientWithResponses) GetChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChannelResponse, error) {
	rsp, err := c.GetChannel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelResponse(rsp)
}

// PostChannelWithBodyWithResponse request with arbitrary body returning *PostChannelResponse
func (c *ClientWithResponses) PostChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelResponse, error) {
	rsp, err := c.PostChannelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelResponse(rsp)
}

func (c *ClientWithResponses) PostChannelWithResponse(ctx context.Context, body PostChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelResponse, error) {
	rsp, err := c.PostChannel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelResponse(rsp)
}

// PostChannelTestWithBodyWithResponse request with arbitrary body returning *PostChannelTestResponse
func (c *ClientWithResponses) PostChannelTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelTestResponse, error) {
	rsp, err := c.PostChannelTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelTestResponse(rsp)
}

func (c *ClientWithResponses) PostChannelTestWithResponse(ctx context.Context, body PostChannelTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelTestResponse, error) {
	rsp, err := c.PostChannelTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelTestResponse(rsp)
}

// GetChannelIdWithResponse request returning *GetChannelIdResponse
func (c *ClientWithResponses) GetChannelIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetChannelIdResponse, error) {
	rsp, err := c.GetChannelId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelIdResponse(rsp)
}

// PutChannelIdWithBodyWithResponse request with arbitrary body returning *PutChannelIdResponse
func (c *ClientWithResponses) PutChannelIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelIdResponse, error) {
	rsp, err := c.PutChannelIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelIdResponse(rsp)
}

func (c *ClientWithResponses) PutChannelIdWithResponse(ctx context.Context, id int, body PutChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelIdResponse, error) {
	rsp, err := c.PutChannelId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelIdResponse(rsp)
}

// GetCloudMigrationWithResponse request returning *GetCloudMigrationResponse
func (c *ClientWithResponses) GetCloudMigrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCloudMigrationResponse, error) {
	rsp, err := c.GetCloudMigration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudMigrationResponse(rsp)
}

// PostCloudMigrationWithResponse request returning *PostCloudMigrationResponse
func (c *ClientWithResponses) PostCloudMigrationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCloudMigrationResponse, error) {
	rsp, err := c.PostCloudMigration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloudMigrationResponse(rsp)
}

// PutCloudMigrationCancelWithResponse request returning *PutCloudMigrationCancelResponse
func (c *ClientWithResponses) PutCloudMigrationCancelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutCloudMigrationCancelResponse, error) {
	rsp, err := c.PutCloudMigrationCancel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCloudMigrationCancelResponse(rsp)
}

// GetCollectionWithResponse request returning *GetCollectionResponse
func (c *ClientWithResponses) GetCollectionWithResponse(ctx context.Context, params *GetCollectionParams, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error) {
	rsp, err := c.GetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionResponse(rsp)
}

// PostCollectionWithBodyWithResponse request with arbitrary body returning *PostCollectionResponse
func (c *ClientWithResponses) PostCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionResponse, error) {
	rsp, err := c.PostCollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionWithResponse(ctx context.Context, body PostCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionResponse, error) {
	rsp, err := c.PostCollection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionResponse(rsp)
}

// GetCollectionGraphWithResponse request returning *GetCollectionGraphResponse
func (c *ClientWithResponses) GetCollectionGraphWithResponse(ctx context.Context, params *GetCollectionGraphParams, reqEditors ...RequestEditorFn) (*GetCollectionGraphResponse, error) {
	rsp, err := c.GetCollectionGraph(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionGraphResponse(rsp)
}

// PutCollectionGraphWithBodyWithResponse request with arbitrary body returning *PutCollectionGraphResponse
func (c *ClientWithResponses) PutCollectionGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCollectionGraphResponse, error) {
	rsp, err := c.PutCollectionGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCollectionGraphResponse(rsp)
}

func (c *ClientWithResponses) PutCollectionGraphWithResponse(ctx context.Context, body PutCollectionGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCollectionGraphResponse, error) {
	rsp, err := c.PutCollectionGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCollectionGraphResponse(rsp)
}

// GetCollectionRootWithResponse request returning *GetCollectionRootResponse
func (c *ClientWithResponses) GetCollectionRootWithResponse(ctx context.Context, params *GetCollectionRootParams, reqEditors ...RequestEditorFn) (*GetCollectionRootResponse, error) {
	rsp, err := c.GetCollectionRoot(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionRootResponse(rsp)
}

// GetCollectionRootItemsWithResponse request returning *GetCollectionRootItemsResponse
func (c *ClientWithResponses) GetCollectionRootItemsWithResponse(ctx context.Context, params *GetCollectionRootItemsParams, reqEditors ...RequestEditorFn) (*GetCollectionRootItemsResponse, error) {
	rsp, err := c.GetCollectionRootItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionRootItemsResponse(rsp)
}

// GetCollectionRootTimelinesWithResponse request returning *GetCollectionRootTimelinesResponse
func (c *ClientWithResponses) GetCollectionRootTimelinesWithResponse(ctx context.Context, params *GetCollectionRootTimelinesParams, reqEditors ...RequestEditorFn) (*GetCollectionRootTimelinesResponse, error) {
	rsp, err := c.GetCollectionRootTimelines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionRootTimelinesResponse(rsp)
}

// GetCollectionTrashWithResponse request returning *GetCollectionTrashResponse
func (c *ClientWithResponses) GetCollectionTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionTrashResponse, error) {
	rsp, err := c.GetCollectionTrash(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionTrashResponse(rsp)
}

// GetCollectionTreeWithResponse request returning *GetCollectionTreeResponse
func (c *ClientWithResponses) GetCollectionTreeWithResponse(ctx context.Context, params *GetCollectionTreeParams, reqEditors ...RequestEditorFn) (*GetCollectionTreeResponse, error) {
	rsp, err := c.GetCollectionTree(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionTreeResponse(rsp)
}

// GetCollectionIdWithResponse request returning *GetCollectionIdResponse
func (c *ClientWithResponses) GetCollectionIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCollectionIdResponse, error) {
	rsp, err := c.GetCollectionId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionIdResponse(rsp)
}

// PutCollectionIdWithBodyWithResponse request with arbitrary body returning *PutCollectionIdResponse
func (c *ClientWithResponses) PutCollectionIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCollectionIdResponse, error) {
	rsp, err := c.PutCollectionIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCollectionIdResponse(rsp)
}

func (c *ClientWithResponses) PutCollectionIdWithResponse(ctx context.Context, id int, body PutCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCollectionIdResponse, error) {
	rsp, err := c.PutCollectionId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCollectionIdResponse(rsp)
}

// GetCollectionIdItemsWithResponse request returning *GetCollectionIdItemsResponse
func (c *ClientWithResponses) GetCollectionIdItemsWithResponse(ctx context.Context, id int, params *GetCollectionIdItemsParams, reqEditors ...RequestEditorFn) (*GetCollectionIdItemsResponse, error) {
	rsp, err := c.GetCollectionIdItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionIdItemsResponse(rsp)
}

// GetCollectionIdTimelinesWithResponse request returning *GetCollectionIdTimelinesResponse
func (c *ClientWithResponses) GetCollectionIdTimelinesWithResponse(ctx context.Context, id int, params *GetCollectionIdTimelinesParams, reqEditors ...RequestEditorFn) (*GetCollectionIdTimelinesResponse, error) {
	rsp, err := c.GetCollectionIdTimelines(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionIdTimelinesResponse(rsp)
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, params *GetDashboardParams, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// PostDashboardWithBodyWithResponse request with arbitrary body returning *PostDashboardResponse
func (c *ClientWithResponses) PostDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardResponse, error) {
	rsp, err := c.PostDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardWithResponse(ctx context.Context, body PostDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardResponse, error) {
	rsp, err := c.PostDashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardResponse(rsp)
}

// GetDashboardEmbeddableWithResponse request returning *GetDashboardEmbeddableResponse
func (c *ClientWithResponses) GetDashboardEmbeddableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardEmbeddableResponse, error) {
	rsp, err := c.GetDashboardEmbeddable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardEmbeddableResponse(rsp)
}

// GetDashboardParamsValidFilterFieldsWithResponse request returning *GetDashboardParamsValidFilterFieldsResponse
func (c *ClientWithResponses) GetDashboardParamsValidFilterFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardParamsValidFilterFieldsResponse, error) {
	rsp, err := c.GetDashboardParamsValidFilterFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardParamsValidFilterFieldsResponse(rsp)
}

// PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse request with arbitrary body returning *PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse
func (c *ClientWithResponses) PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	rsp, err := c.PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx, dashboardId, dashcardId, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	rsp, err := c.PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQuery(ctx, dashboardId, dashcardId, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp)
}

// GetDashboardPublicWithResponse request returning *GetDashboardPublicResponse
func (c *ClientWithResponses) GetDashboardPublicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardPublicResponse, error) {
	rsp, err := c.GetDashboardPublic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardPublicResponse(rsp)
}

// PostDashboardSaveWithResponse request returning *PostDashboardSaveResponse
func (c *ClientWithResponses) PostDashboardSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDashboardSaveResponse, error) {
	rsp, err := c.PostDashboardSave(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardSaveResponse(rsp)
}

// PostDashboardSaveCollectionParentCollectionIdWithResponse request returning *PostDashboardSaveCollectionParentCollectionIdResponse
func (c *ClientWithResponses) PostDashboardSaveCollectionParentCollectionIdWithResponse(ctx context.Context, parentCollectionId int, reqEditors ...RequestEditorFn) (*PostDashboardSaveCollectionParentCollectionIdResponse, error) {
	rsp, err := c.PostDashboardSaveCollectionParentCollectionId(ctx, parentCollectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardSaveCollectionParentCollectionIdResponse(rsp)
}

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse request with arbitrary body returning *PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse
func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithBody(ctx, dashboardId, dashcardId, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdCardCardIdQuery(ctx, dashboardId, dashcardId, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp)
}

// PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBodyWithResponse request with arbitrary body returning *PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse
func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithBody(ctx, dashboardId, dashcardId, cardId, exportFormat, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithResponse(ctx context.Context, dashboardId int, dashcardId int, cardId int, exportFormat PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatParamsExportFormat, body PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormat(ctx, dashboardId, dashcardId, cardId, exportFormat, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse(rsp)
}

// GetDashboardDashboardIdDashcardDashcardIdExecuteWithResponse request returning *GetDashboardDashboardIdDashcardDashcardIdExecuteResponse
func (c *ClientWithResponses) GetDashboardDashboardIdDashcardDashcardIdExecuteWithResponse(ctx context.Context, dashboardId int, dashcardId int, params *GetDashboardDashboardIdDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*GetDashboardDashboardIdDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.GetDashboardDashboardIdDashcardDashcardIdExecute(ctx, dashboardId, dashcardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardDashboardIdDashcardDashcardIdExecuteResponse(rsp)
}

// PostDashboardDashboardIdDashcardDashcardIdExecuteWithBodyWithResponse request with arbitrary body returning *PostDashboardDashboardIdDashcardDashcardIdExecuteResponse
func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdExecuteWithBodyWithResponse(ctx context.Context, dashboardId int, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdExecuteWithBody(ctx, dashboardId, dashcardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdExecuteResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardDashboardIdDashcardDashcardIdExecuteWithResponse(ctx context.Context, dashboardId int, dashcardId int, body PostDashboardDashboardIdDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.PostDashboardDashboardIdDashcardDashcardIdExecute(ctx, dashboardId, dashcardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdDashcardDashcardIdExecuteResponse(rsp)
}

// DeleteDashboardDashboardIdPublicLinkWithResponse request returning *DeleteDashboardDashboardIdPublicLinkResponse
func (c *ClientWithResponses) DeleteDashboardDashboardIdPublicLinkWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*DeleteDashboardDashboardIdPublicLinkResponse, error) {
	rsp, err := c.DeleteDashboardDashboardIdPublicLink(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardDashboardIdPublicLinkResponse(rsp)
}

// PostDashboardDashboardIdPublicLinkWithResponse request returning *PostDashboardDashboardIdPublicLinkResponse
func (c *ClientWithResponses) PostDashboardDashboardIdPublicLinkWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*PostDashboardDashboardIdPublicLinkResponse, error) {
	rsp, err := c.PostDashboardDashboardIdPublicLink(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardDashboardIdPublicLinkResponse(rsp)
}

// PostDashboardFromDashboardIdCopyWithBodyWithResponse request with arbitrary body returning *PostDashboardFromDashboardIdCopyResponse
func (c *ClientWithResponses) PostDashboardFromDashboardIdCopyWithBodyWithResponse(ctx context.Context, fromDashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardFromDashboardIdCopyResponse, error) {
	rsp, err := c.PostDashboardFromDashboardIdCopyWithBody(ctx, fromDashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardFromDashboardIdCopyResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardFromDashboardIdCopyWithResponse(ctx context.Context, fromDashboardId int, body PostDashboardFromDashboardIdCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardFromDashboardIdCopyResponse, error) {
	rsp, err := c.PostDashboardFromDashboardIdCopy(ctx, fromDashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardFromDashboardIdCopyResponse(rsp)
}

// DeleteDashboardIdWithResponse request returning *DeleteDashboardIdResponse
func (c *ClientWithResponses) DeleteDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteDashboardIdResponse, error) {
	rsp, err := c.DeleteDashboardId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardIdResponse(rsp)
}

// GetDashboardIdWithResponse request returning *GetDashboardIdResponse
func (c *ClientWithResponses) GetDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdResponse, error) {
	rsp, err := c.GetDashboardId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdResponse(rsp)
}

// PutDashboardIdWithBodyWithResponse request with arbitrary body returning *PutDashboardIdResponse
func (c *ClientWithResponses) PutDashboardIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardIdResponse, error) {
	rsp, err := c.PutDashboardIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardIdResponse(rsp)
}

func (c *ClientWithResponses) PutDashboardIdWithResponse(ctx context.Context, id int, body PutDashboardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardIdResponse, error) {
	rsp, err := c.PutDashboardId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardIdResponse(rsp)
}

// PutDashboardIdCardsWithBodyWithResponse request with arbitrary body returning *PutDashboardIdCardsResponse
func (c *ClientWithResponses) PutDashboardIdCardsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardIdCardsResponse, error) {
	rsp, err := c.PutDashboardIdCardsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardIdCardsResponse(rsp)
}

func (c *ClientWithResponses) PutDashboardIdCardsWithResponse(ctx context.Context, id int, body PutDashboardIdCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardIdCardsResponse, error) {
	rsp, err := c.PutDashboardIdCards(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardIdCardsResponse(rsp)
}

// GetDashboardIdParamsParamKeySearchQueryWithResponse request returning *GetDashboardIdParamsParamKeySearchQueryResponse
func (c *ClientWithResponses) GetDashboardIdParamsParamKeySearchQueryWithResponse(ctx context.Context, id int, paramKey string, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetDashboardIdParamsParamKeySearchQueryResponse, error) {
	rsp, err := c.GetDashboardIdParamsParamKeySearchQuery(ctx, id, paramKey, query, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdParamsParamKeySearchQueryResponse(rsp)
}

// GetDashboardIdParamsParamKeyValuesWithResponse request returning *GetDashboardIdParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetDashboardIdParamsParamKeyValuesWithResponse(ctx context.Context, id int, paramKey string, reqEditors ...RequestEditorFn) (*GetDashboardIdParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetDashboardIdParamsParamKeyValues(ctx, id, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdParamsParamKeyValuesResponse(rsp)
}

// GetDashboardIdQueryMetadataWithResponse request returning *GetDashboardIdQueryMetadataResponse
func (c *ClientWithResponses) GetDashboardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdQueryMetadataResponse, error) {
	rsp, err := c.GetDashboardIdQueryMetadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdQueryMetadataResponse(rsp)
}

// GetDashboardIdRelatedWithResponse request returning *GetDashboardIdRelatedResponse
func (c *ClientWithResponses) GetDashboardIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdRelatedResponse, error) {
	rsp, err := c.GetDashboardIdRelated(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdRelatedResponse(rsp)
}

// PostDashboardIdRevertWithBodyWithResponse request with arbitrary body returning *PostDashboardIdRevertResponse
func (c *ClientWithResponses) PostDashboardIdRevertWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardIdRevertResponse, error) {
	rsp, err := c.PostDashboardIdRevertWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardIdRevertResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardIdRevertWithResponse(ctx context.Context, id int, body PostDashboardIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardIdRevertResponse, error) {
	rsp, err := c.PostDashboardIdRevert(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardIdRevertResponse(rsp)
}

// GetDashboardIdRevisionsWithResponse request returning *GetDashboardIdRevisionsResponse
func (c *ClientWithResponses) GetDashboardIdRevisionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDashboardIdRevisionsResponse, error) {
	rsp, err := c.GetDashboardIdRevisions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardIdRevisionsResponse(rsp)
}

// GetDatabaseWithResponse request returning *GetDatabaseResponse
func (c *ClientWithResponses) GetDatabaseWithResponse(ctx context.Context, params *GetDatabaseParams, reqEditors ...RequestEditorFn) (*GetDatabaseResponse, error) {
	rsp, err := c.GetDatabase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseResponse(rsp)
}

// PostDatabaseWithBodyWithResponse request with arbitrary body returning *PostDatabaseResponse
func (c *ClientWithResponses) PostDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabaseResponse, error) {
	rsp, err := c.PostDatabaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseResponse(rsp)
}

func (c *ClientWithResponses) PostDatabaseWithResponse(ctx context.Context, body PostDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabaseResponse, error) {
	rsp, err := c.PostDatabase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseResponse(rsp)
}

// PostDatabaseSampleDatabaseWithResponse request returning *PostDatabaseSampleDatabaseResponse
func (c *ClientWithResponses) PostDatabaseSampleDatabaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDatabaseSampleDatabaseResponse, error) {
	rsp, err := c.PostDatabaseSampleDatabase(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseSampleDatabaseResponse(rsp)
}

// PostDatabaseValidateWithBodyWithResponse request with arbitrary body returning *PostDatabaseValidateResponse
func (c *ClientWithResponses) PostDatabaseValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabaseValidateResponse, error) {
	rsp, err := c.PostDatabaseValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseValidateResponse(rsp)
}

func (c *ClientWithResponses) PostDatabaseValidateWithResponse(ctx context.Context, body PostDatabaseValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabaseValidateResponse, error) {
	rsp, err := c.PostDatabaseValidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseValidateResponse(rsp)
}

// DeleteDatabaseIdWithResponse request returning *DeleteDatabaseIdResponse
func (c *ClientWithResponses) DeleteDatabaseIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteDatabaseIdResponse, error) {
	rsp, err := c.DeleteDatabaseId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseIdResponse(rsp)
}

// GetDatabaseIdWithResponse request returning *GetDatabaseIdResponse
func (c *ClientWithResponses) GetDatabaseIdWithResponse(ctx context.Context, id int, params *GetDatabaseIdParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdResponse, error) {
	rsp, err := c.GetDatabaseId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdResponse(rsp)
}

// PutDatabaseIdWithBodyWithResponse request with arbitrary body returning *PutDatabaseIdResponse
func (c *ClientWithResponses) PutDatabaseIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDatabaseIdResponse, error) {
	rsp, err := c.PutDatabaseIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDatabaseIdResponse(rsp)
}

func (c *ClientWithResponses) PutDatabaseIdWithResponse(ctx context.Context, id int, body PutDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDatabaseIdResponse, error) {
	rsp, err := c.PutDatabaseId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDatabaseIdResponse(rsp)
}

// GetDatabaseIdAutocompleteSuggestionsWithResponse request returning *GetDatabaseIdAutocompleteSuggestionsResponse
func (c *ClientWithResponses) GetDatabaseIdAutocompleteSuggestionsWithResponse(ctx context.Context, id int, params *GetDatabaseIdAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdAutocompleteSuggestionsResponse, error) {
	rsp, err := c.GetDatabaseIdAutocompleteSuggestions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdAutocompleteSuggestionsResponse(rsp)
}

// GetDatabaseIdCardAutocompleteSuggestionsWithResponse request returning *GetDatabaseIdCardAutocompleteSuggestionsResponse
func (c *ClientWithResponses) GetDatabaseIdCardAutocompleteSuggestionsWithResponse(ctx context.Context, id int, params *GetDatabaseIdCardAutocompleteSuggestionsParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdCardAutocompleteSuggestionsResponse, error) {
	rsp, err := c.GetDatabaseIdCardAutocompleteSuggestions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdCardAutocompleteSuggestionsResponse(rsp)
}

// PostDatabaseIdDiscardValuesWithResponse request returning *PostDatabaseIdDiscardValuesResponse
func (c *ClientWithResponses) PostDatabaseIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdDiscardValuesResponse, error) {
	rsp, err := c.PostDatabaseIdDiscardValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdDiscardValuesResponse(rsp)
}

// PostDatabaseIdDismissSpinnerWithResponse request returning *PostDatabaseIdDismissSpinnerResponse
func (c *ClientWithResponses) PostDatabaseIdDismissSpinnerWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdDismissSpinnerResponse, error) {
	rsp, err := c.PostDatabaseIdDismissSpinner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdDismissSpinnerResponse(rsp)
}

// GetDatabaseIdFieldsWithResponse request returning *GetDatabaseIdFieldsResponse
func (c *ClientWithResponses) GetDatabaseIdFieldsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdFieldsResponse, error) {
	rsp, err := c.GetDatabaseIdFields(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdFieldsResponse(rsp)
}

// GetDatabaseIdIdfieldsWithResponse request returning *GetDatabaseIdIdfieldsResponse
func (c *ClientWithResponses) GetDatabaseIdIdfieldsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdIdfieldsResponse, error) {
	rsp, err := c.GetDatabaseIdIdfields(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdIdfieldsResponse(rsp)
}

// GetDatabaseIdMetadataWithResponse request returning *GetDatabaseIdMetadataResponse
func (c *ClientWithResponses) GetDatabaseIdMetadataWithResponse(ctx context.Context, id int, params *GetDatabaseIdMetadataParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdMetadataResponse, error) {
	rsp, err := c.GetDatabaseIdMetadata(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdMetadataResponse(rsp)
}

// PostDatabaseIdPersistWithResponse request returning *PostDatabaseIdPersistResponse
func (c *ClientWithResponses) PostDatabaseIdPersistWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdPersistResponse, error) {
	rsp, err := c.PostDatabaseIdPersist(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdPersistResponse(rsp)
}

// PostDatabaseIdRescanValuesWithResponse request returning *PostDatabaseIdRescanValuesResponse
func (c *ClientWithResponses) PostDatabaseIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdRescanValuesResponse, error) {
	rsp, err := c.PostDatabaseIdRescanValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdRescanValuesResponse(rsp)
}

// GetDatabaseIdSchemaWithResponse request returning *GetDatabaseIdSchemaResponse
func (c *ClientWithResponses) GetDatabaseIdSchemaWithResponse(ctx context.Context, id int, params *GetDatabaseIdSchemaParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemaResponse, error) {
	rsp, err := c.GetDatabaseIdSchema(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdSchemaResponse(rsp)
}

// GetDatabaseIdSchemaSchemaWithResponse request returning *GetDatabaseIdSchemaSchemaResponse
func (c *ClientWithResponses) GetDatabaseIdSchemaSchemaWithResponse(ctx context.Context, id int, schema string, params *GetDatabaseIdSchemaSchemaParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemaSchemaResponse, error) {
	rsp, err := c.GetDatabaseIdSchemaSchema(ctx, id, schema, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdSchemaSchemaResponse(rsp)
}

// GetDatabaseIdSchemasWithResponse request returning *GetDatabaseIdSchemasResponse
func (c *ClientWithResponses) GetDatabaseIdSchemasWithResponse(ctx context.Context, id int, params *GetDatabaseIdSchemasParams, reqEditors ...RequestEditorFn) (*GetDatabaseIdSchemasResponse, error) {
	rsp, err := c.GetDatabaseIdSchemas(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdSchemasResponse(rsp)
}

// PostDatabaseIdSyncSchemaWithResponse request returning *PostDatabaseIdSyncSchemaResponse
func (c *ClientWithResponses) PostDatabaseIdSyncSchemaWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdSyncSchemaResponse, error) {
	rsp, err := c.PostDatabaseIdSyncSchema(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdSyncSchemaResponse(rsp)
}

// GetDatabaseIdSyncableSchemasWithResponse request returning *GetDatabaseIdSyncableSchemasResponse
func (c *ClientWithResponses) GetDatabaseIdSyncableSchemasWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdSyncableSchemasResponse, error) {
	rsp, err := c.GetDatabaseIdSyncableSchemas(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdSyncableSchemasResponse(rsp)
}

// PostDatabaseIdUnpersistWithResponse request returning *PostDatabaseIdUnpersistResponse
func (c *ClientWithResponses) PostDatabaseIdUnpersistWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostDatabaseIdUnpersistResponse, error) {
	rsp, err := c.PostDatabaseIdUnpersist(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabaseIdUnpersistResponse(rsp)
}

// GetDatabaseIdUsageInfoWithResponse request returning *GetDatabaseIdUsageInfoResponse
func (c *ClientWithResponses) GetDatabaseIdUsageInfoWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetDatabaseIdUsageInfoResponse, error) {
	rsp, err := c.GetDatabaseIdUsageInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseIdUsageInfoResponse(rsp)
}

// GetDatabaseVirtualDbDatasetsWithResponse request returning *GetDatabaseVirtualDbDatasetsResponse
func (c *ClientWithResponses) GetDatabaseVirtualDbDatasetsWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbDatasetsResponse, error) {
	rsp, err := c.GetDatabaseVirtualDbDatasets(ctx, virtualDb, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseVirtualDbDatasetsResponse(rsp)
}

// GetDatabaseVirtualDbDatasetsSchemaWithResponse request returning *GetDatabaseVirtualDbDatasetsSchemaResponse
func (c *ClientWithResponses) GetDatabaseVirtualDbDatasetsSchemaWithResponse(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbDatasetsSchemaResponse, error) {
	rsp, err := c.GetDatabaseVirtualDbDatasetsSchema(ctx, virtualDb, schema, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseVirtualDbDatasetsSchemaResponse(rsp)
}

// GetDatabaseVirtualDbMetadataWithResponse request returning *GetDatabaseVirtualDbMetadataResponse
func (c *ClientWithResponses) GetDatabaseVirtualDbMetadataWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbMetadataResponse, error) {
	rsp, err := c.GetDatabaseVirtualDbMetadata(ctx, virtualDb, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseVirtualDbMetadataResponse(rsp)
}

// GetDatabaseVirtualDbSchemaSchemaWithResponse request returning *GetDatabaseVirtualDbSchemaSchemaResponse
func (c *ClientWithResponses) GetDatabaseVirtualDbSchemaSchemaWithResponse(ctx context.Context, virtualDb string, schema string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbSchemaSchemaResponse, error) {
	rsp, err := c.GetDatabaseVirtualDbSchemaSchema(ctx, virtualDb, schema, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseVirtualDbSchemaSchemaResponse(rsp)
}

// GetDatabaseVirtualDbSchemasWithResponse request returning *GetDatabaseVirtualDbSchemasResponse
func (c *ClientWithResponses) GetDatabaseVirtualDbSchemasWithResponse(ctx context.Context, virtualDb string, reqEditors ...RequestEditorFn) (*GetDatabaseVirtualDbSchemasResponse, error) {
	rsp, err := c.GetDatabaseVirtualDbSchemas(ctx, virtualDb, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseVirtualDbSchemasResponse(rsp)
}

// PostDatasetWithBodyWithResponse request with arbitrary body returning *PostDatasetResponse
func (c *ClientWithResponses) PostDatasetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetResponse, error) {
	rsp, err := c.PostDatasetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetWithResponse(ctx context.Context, body PostDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetResponse, error) {
	rsp, err := c.PostDataset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetResponse(rsp)
}

// PostDatasetNativeWithBodyWithResponse request with arbitrary body returning *PostDatasetNativeResponse
func (c *ClientWithResponses) PostDatasetNativeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetNativeResponse, error) {
	rsp, err := c.PostDatasetNativeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetNativeResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetNativeWithResponse(ctx context.Context, body PostDatasetNativeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetNativeResponse, error) {
	rsp, err := c.PostDatasetNative(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetNativeResponse(rsp)
}

// PostDatasetParameterSearchQueryWithBodyWithResponse request with arbitrary body returning *PostDatasetParameterSearchQueryResponse
func (c *ClientWithResponses) PostDatasetParameterSearchQueryWithBodyWithResponse(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetParameterSearchQueryResponse, error) {
	rsp, err := c.PostDatasetParameterSearchQueryWithBody(ctx, query, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetParameterSearchQueryResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetParameterSearchQueryWithResponse(ctx context.Context, query MetabaseLibSchemaCommonNonBlankString, body PostDatasetParameterSearchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetParameterSearchQueryResponse, error) {
	rsp, err := c.PostDatasetParameterSearchQuery(ctx, query, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetParameterSearchQueryResponse(rsp)
}

// PostDatasetParameterValuesWithBodyWithResponse request with arbitrary body returning *PostDatasetParameterValuesResponse
func (c *ClientWithResponses) PostDatasetParameterValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetParameterValuesResponse, error) {
	rsp, err := c.PostDatasetParameterValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetParameterValuesResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetParameterValuesWithResponse(ctx context.Context, body PostDatasetParameterValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetParameterValuesResponse, error) {
	rsp, err := c.PostDatasetParameterValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetParameterValuesResponse(rsp)
}

// PostDatasetPivotWithBodyWithResponse request with arbitrary body returning *PostDatasetPivotResponse
func (c *ClientWithResponses) PostDatasetPivotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetPivotResponse, error) {
	rsp, err := c.PostDatasetPivotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetPivotResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetPivotWithResponse(ctx context.Context, body PostDatasetPivotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetPivotResponse, error) {
	rsp, err := c.PostDatasetPivot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetPivotResponse(rsp)
}

// PostDatasetQueryMetadataWithBodyWithResponse request with arbitrary body returning *PostDatasetQueryMetadataResponse
func (c *ClientWithResponses) PostDatasetQueryMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetQueryMetadataResponse, error) {
	rsp, err := c.PostDatasetQueryMetadataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetQueryMetadataResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetQueryMetadataWithResponse(ctx context.Context, body PostDatasetQueryMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetQueryMetadataResponse, error) {
	rsp, err := c.PostDatasetQueryMetadata(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetQueryMetadataResponse(rsp)
}

// PostDatasetExportFormatWithBodyWithResponse request with arbitrary body returning *PostDatasetExportFormatResponse
func (c *ClientWithResponses) PostDatasetExportFormatWithBodyWithResponse(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatasetExportFormatResponse, error) {
	rsp, err := c.PostDatasetExportFormatWithBody(ctx, exportFormat, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetExportFormatResponse(rsp)
}

func (c *ClientWithResponses) PostDatasetExportFormatWithResponse(ctx context.Context, exportFormat PostDatasetExportFormatParamsExportFormat, body PostDatasetExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatasetExportFormatResponse, error) {
	rsp, err := c.PostDatasetExportFormat(ctx, exportFormat, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatasetExportFormatResponse(rsp)
}

// GetDocsWithResponse request returning *GetDocsResponse
func (c *ClientWithResponses) GetDocsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocsResponse, error) {
	rsp, err := c.GetDocs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocsResponse(rsp)
}

// DeleteEmailWithResponse request returning *DeleteEmailResponse
func (c *ClientWithResponses) DeleteEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteEmailResponse, error) {
	rsp, err := c.DeleteEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmailResponse(rsp)
}

// PutEmailWithBodyWithResponse request with arbitrary body returning *PutEmailResponse
func (c *ClientWithResponses) PutEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmailResponse, error) {
	rsp, err := c.PutEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmailResponse(rsp)
}

func (c *ClientWithResponses) PutEmailWithResponse(ctx context.Context, body PutEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmailResponse, error) {
	rsp, err := c.PutEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmailResponse(rsp)
}

// PostEmailTestWithResponse request returning *PostEmailTestResponse
func (c *ClientWithResponses) PostEmailTestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostEmailTestResponse, error) {
	rsp, err := c.PostEmailTest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmailTestResponse(rsp)
}

// GetEmbedCardTokenWithResponse request returning *GetEmbedCardTokenResponse
func (c *ClientWithResponses) GetEmbedCardTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenResponse, error) {
	rsp, err := c.GetEmbedCardToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenResponse(rsp)
}

// GetEmbedCardTokenFieldFieldIdRemappingRemappedIdWithResponse request returning *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse
func (c *ClientWithResponses) GetEmbedCardTokenFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedCardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse, error) {
	rsp, err := c.GetEmbedCardTokenFieldFieldIdRemappingRemappedId(ctx, token, fieldId, remappedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse(rsp)
}

// GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdWithResponse request returning *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse
func (c *ClientWithResponses) GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse, error) {
	rsp, err := c.GetEmbedCardTokenFieldFieldIdSearchSearchFieldId(ctx, token, fieldId, searchFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse(rsp)
}

// GetEmbedCardTokenFieldFieldIdValuesWithResponse request returning *GetEmbedCardTokenFieldFieldIdValuesResponse
func (c *ClientWithResponses) GetEmbedCardTokenFieldFieldIdValuesWithResponse(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenFieldFieldIdValuesResponse, error) {
	rsp, err := c.GetEmbedCardTokenFieldFieldIdValues(ctx, token, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenFieldFieldIdValuesResponse(rsp)
}

// GetEmbedCardTokenParamsParamKeySearchPrefixWithResponse request returning *GetEmbedCardTokenParamsParamKeySearchPrefixResponse
func (c *ClientWithResponses) GetEmbedCardTokenParamsParamKeySearchPrefixWithResponse(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenParamsParamKeySearchPrefixResponse, error) {
	rsp, err := c.GetEmbedCardTokenParamsParamKeySearchPrefix(ctx, token, paramKey, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenParamsParamKeySearchPrefixResponse(rsp)
}

// GetEmbedCardTokenParamsParamKeyValuesWithResponse request returning *GetEmbedCardTokenParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetEmbedCardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetEmbedCardTokenParamsParamKeyValues(ctx, token, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenParamsParamKeyValuesResponse(rsp)
}

// GetEmbedCardTokenQueryWithResponse request returning *GetEmbedCardTokenQueryResponse
func (c *ClientWithResponses) GetEmbedCardTokenQueryWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenQueryResponse, error) {
	rsp, err := c.GetEmbedCardTokenQuery(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenQueryResponse(rsp)
}

// GetEmbedCardTokenQueryExportFormatWithResponse request returning *GetEmbedCardTokenQueryExportFormatResponse
func (c *ClientWithResponses) GetEmbedCardTokenQueryExportFormatWithResponse(ctx context.Context, token string, exportFormat GetEmbedCardTokenQueryExportFormatParamsExportFormat, params *GetEmbedCardTokenQueryExportFormatParams, reqEditors ...RequestEditorFn) (*GetEmbedCardTokenQueryExportFormatResponse, error) {
	rsp, err := c.GetEmbedCardTokenQueryExportFormat(ctx, token, exportFormat, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedCardTokenQueryExportFormatResponse(rsp)
}

// GetEmbedDashboardTokenWithResponse request returning *GetEmbedDashboardTokenResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenResponse, error) {
	rsp, err := c.GetEmbedDashboardToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenResponse(rsp)
}

// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse request returning *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx, token, dashcardId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp)
}

// GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatWithResponse request returning *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatWithResponse(ctx context.Context, token string, dashcardId int, cardId int, exportFormat GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormat(ctx, token, dashcardId, cardId, exportFormat, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse(rsp)
}

// GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdWithResponse request returning *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, token string, fieldId int, remappedId int, params *GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenFieldFieldIdRemappingRemappedId(ctx, token, fieldId, remappedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse(rsp)
}

// GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdWithResponse request returning *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, token string, fieldId int, searchFieldId int, params *GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldId(ctx, token, fieldId, searchFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse(rsp)
}

// GetEmbedDashboardTokenFieldFieldIdValuesWithResponse request returning *GetEmbedDashboardTokenFieldFieldIdValuesResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenFieldFieldIdValuesWithResponse(ctx context.Context, token string, fieldId int, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenFieldFieldIdValuesResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenFieldFieldIdValues(ctx, token, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenFieldFieldIdValuesResponse(rsp)
}

// GetEmbedDashboardTokenParamsParamKeySearchPrefixWithResponse request returning *GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenParamsParamKeySearchPrefixWithResponse(ctx context.Context, token string, paramKey string, prefix string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenParamsParamKeySearchPrefix(ctx, token, paramKey, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenParamsParamKeySearchPrefixResponse(rsp)
}

// GetEmbedDashboardTokenParamsParamKeyValuesWithResponse request returning *GetEmbedDashboardTokenParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetEmbedDashboardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetEmbedDashboardTokenParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetEmbedDashboardTokenParamsParamKeyValues(ctx, token, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedDashboardTokenParamsParamKeyValuesResponse(rsp)
}

// GetEmbedPivotCardTokenQueryWithResponse request returning *GetEmbedPivotCardTokenQueryResponse
func (c *ClientWithResponses) GetEmbedPivotCardTokenQueryWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetEmbedPivotCardTokenQueryResponse, error) {
	rsp, err := c.GetEmbedPivotCardTokenQuery(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedPivotCardTokenQueryResponse(rsp)
}

// GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse request returning *GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token string, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx, token, dashcardId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp)
}

// GetFieldIdWithResponse request returning *GetFieldIdResponse
func (c *ClientWithResponses) GetFieldIdWithResponse(ctx context.Context, id int, params *GetFieldIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdResponse, error) {
	rsp, err := c.GetFieldId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdResponse(rsp)
}

// PutFieldIdWithBodyWithResponse request with arbitrary body returning *PutFieldIdResponse
func (c *ClientWithResponses) PutFieldIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFieldIdResponse, error) {
	rsp, err := c.PutFieldIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFieldIdResponse(rsp)
}

func (c *ClientWithResponses) PutFieldIdWithResponse(ctx context.Context, id int, body PutFieldIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFieldIdResponse, error) {
	rsp, err := c.PutFieldId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFieldIdResponse(rsp)
}

// DeleteFieldIdDimensionWithResponse request returning *DeleteFieldIdDimensionResponse
func (c *ClientWithResponses) DeleteFieldIdDimensionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFieldIdDimensionResponse, error) {
	rsp, err := c.DeleteFieldIdDimension(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFieldIdDimensionResponse(rsp)
}

// PostFieldIdDimensionWithBodyWithResponse request with arbitrary body returning *PostFieldIdDimensionResponse
func (c *ClientWithResponses) PostFieldIdDimensionWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFieldIdDimensionResponse, error) {
	rsp, err := c.PostFieldIdDimensionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdDimensionResponse(rsp)
}

func (c *ClientWithResponses) PostFieldIdDimensionWithResponse(ctx context.Context, id int, body PostFieldIdDimensionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFieldIdDimensionResponse, error) {
	rsp, err := c.PostFieldIdDimension(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdDimensionResponse(rsp)
}

// PostFieldIdDiscardValuesWithResponse request returning *PostFieldIdDiscardValuesResponse
func (c *ClientWithResponses) PostFieldIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostFieldIdDiscardValuesResponse, error) {
	rsp, err := c.PostFieldIdDiscardValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdDiscardValuesResponse(rsp)
}

// GetFieldIdRelatedWithResponse request returning *GetFieldIdRelatedResponse
func (c *ClientWithResponses) GetFieldIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdRelatedResponse, error) {
	rsp, err := c.GetFieldIdRelated(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdRelatedResponse(rsp)
}

// GetFieldIdRemappingRemappedIdWithResponse request returning *GetFieldIdRemappingRemappedIdResponse
func (c *ClientWithResponses) GetFieldIdRemappingRemappedIdWithResponse(ctx context.Context, id int, remappedId int, params *GetFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdRemappingRemappedIdResponse, error) {
	rsp, err := c.GetFieldIdRemappingRemappedId(ctx, id, remappedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdRemappingRemappedIdResponse(rsp)
}

// PostFieldIdRescanValuesWithResponse request returning *PostFieldIdRescanValuesResponse
func (c *ClientWithResponses) PostFieldIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostFieldIdRescanValuesResponse, error) {
	rsp, err := c.PostFieldIdRescanValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdRescanValuesResponse(rsp)
}

// GetFieldIdSearchSearchIdWithResponse request returning *GetFieldIdSearchSearchIdResponse
func (c *ClientWithResponses) GetFieldIdSearchSearchIdWithResponse(ctx context.Context, id int, searchId int, params *GetFieldIdSearchSearchIdParams, reqEditors ...RequestEditorFn) (*GetFieldIdSearchSearchIdResponse, error) {
	rsp, err := c.GetFieldIdSearchSearchId(ctx, id, searchId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdSearchSearchIdResponse(rsp)
}

// GetFieldIdSummaryWithResponse request returning *GetFieldIdSummaryResponse
func (c *ClientWithResponses) GetFieldIdSummaryWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdSummaryResponse, error) {
	rsp, err := c.GetFieldIdSummary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdSummaryResponse(rsp)
}

// GetFieldIdValuesWithResponse request returning *GetFieldIdValuesResponse
func (c *ClientWithResponses) GetFieldIdValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetFieldIdValuesResponse, error) {
	rsp, err := c.GetFieldIdValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldIdValuesResponse(rsp)
}

// PostFieldIdValuesWithBodyWithResponse request with arbitrary body returning *PostFieldIdValuesResponse
func (c *ClientWithResponses) PostFieldIdValuesWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFieldIdValuesResponse, error) {
	rsp, err := c.PostFieldIdValuesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostFieldIdValuesWithResponse(ctx context.Context, id int, body PostFieldIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFieldIdValuesResponse, error) {
	rsp, err := c.PostFieldIdValues(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFieldIdValuesResponse(rsp)
}

// GetGeojsonWithResponse request returning *GetGeojsonResponse
func (c *ClientWithResponses) GetGeojsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGeojsonResponse, error) {
	rsp, err := c.GetGeojson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeojsonResponse(rsp)
}

// GetGeojsonKeyWithResponse request returning *GetGeojsonKeyResponse
func (c *ClientWithResponses) GetGeojsonKeyWithResponse(ctx context.Context, key MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetGeojsonKeyResponse, error) {
	rsp, err := c.GetGeojsonKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeojsonKeyResponse(rsp)
}

// PutGoogleSettingsWithBodyWithResponse request with arbitrary body returning *PutGoogleSettingsResponse
func (c *ClientWithResponses) PutGoogleSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGoogleSettingsResponse, error) {
	rsp, err := c.PutGoogleSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGoogleSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutGoogleSettingsWithResponse(ctx context.Context, body PutGoogleSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGoogleSettingsResponse, error) {
	rsp, err := c.PutGoogleSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGoogleSettingsResponse(rsp)
}

// PutLdapSettingsWithBodyWithResponse request with arbitrary body returning *PutLdapSettingsResponse
func (c *ClientWithResponses) PutLdapSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLdapSettingsResponse, error) {
	rsp, err := c.PutLdapSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutLdapSettingsWithResponse(ctx context.Context, body PutLdapSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLdapSettingsResponse, error) {
	rsp, err := c.PutLdapSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLdapSettingsResponse(rsp)
}

// GetLoginHistoryCurrentWithResponse request returning *GetLoginHistoryCurrentResponse
func (c *ClientWithResponses) GetLoginHistoryCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginHistoryCurrentResponse, error) {
	rsp, err := c.GetLoginHistoryCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginHistoryCurrentResponse(rsp)
}

// PostMetabotDatabaseDatabaseIdWithBodyWithResponse request with arbitrary body returning *PostMetabotDatabaseDatabaseIdResponse
func (c *ClientWithResponses) PostMetabotDatabaseDatabaseIdWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdResponse, error) {
	rsp, err := c.PostMetabotDatabaseDatabaseIdWithBody(ctx, databaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotDatabaseDatabaseIdResponse(rsp)
}

func (c *ClientWithResponses) PostMetabotDatabaseDatabaseIdWithResponse(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdResponse, error) {
	rsp, err := c.PostMetabotDatabaseDatabaseId(ctx, databaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotDatabaseDatabaseIdResponse(rsp)
}

// PostMetabotDatabaseDatabaseIdQueryWithBodyWithResponse request with arbitrary body returning *PostMetabotDatabaseDatabaseIdQueryResponse
func (c *ClientWithResponses) PostMetabotDatabaseDatabaseIdQueryWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdQueryResponse, error) {
	rsp, err := c.PostMetabotDatabaseDatabaseIdQueryWithBody(ctx, databaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotDatabaseDatabaseIdQueryResponse(rsp)
}

func (c *ClientWithResponses) PostMetabotDatabaseDatabaseIdQueryWithResponse(ctx context.Context, databaseId int, body PostMetabotDatabaseDatabaseIdQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotDatabaseDatabaseIdQueryResponse, error) {
	rsp, err := c.PostMetabotDatabaseDatabaseIdQuery(ctx, databaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotDatabaseDatabaseIdQueryResponse(rsp)
}

// PostMetabotFeedbackWithResponse request returning *PostMetabotFeedbackResponse
func (c *ClientWithResponses) PostMetabotFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMetabotFeedbackResponse, error) {
	rsp, err := c.PostMetabotFeedback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotFeedbackResponse(rsp)
}

// PostMetabotModelModelIdWithBodyWithResponse request with arbitrary body returning *PostMetabotModelModelIdResponse
func (c *ClientWithResponses) PostMetabotModelModelIdWithBodyWithResponse(ctx context.Context, modelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetabotModelModelIdResponse, error) {
	rsp, err := c.PostMetabotModelModelIdWithBody(ctx, modelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotModelModelIdResponse(rsp)
}

func (c *ClientWithResponses) PostMetabotModelModelIdWithResponse(ctx context.Context, modelId int, body PostMetabotModelModelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetabotModelModelIdResponse, error) {
	rsp, err := c.PostMetabotModelModelId(ctx, modelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetabotModelModelIdResponse(rsp)
}

// GetModelIndexWithResponse request returning *GetModelIndexResponse
func (c *ClientWithResponses) GetModelIndexWithResponse(ctx context.Context, params *GetModelIndexParams, reqEditors ...RequestEditorFn) (*GetModelIndexResponse, error) {
	rsp, err := c.GetModelIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelIndexResponse(rsp)
}

// PostModelIndexWithBodyWithResponse request with arbitrary body returning *PostModelIndexResponse
func (c *ClientWithResponses) PostModelIndexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostModelIndexResponse, error) {
	rsp, err := c.PostModelIndexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostModelIndexResponse(rsp)
}

func (c *ClientWithResponses) PostModelIndexWithResponse(ctx context.Context, body PostModelIndexJSONRequestBody, reqEditors ...RequestEditorFn) (*PostModelIndexResponse, error) {
	rsp, err := c.PostModelIndex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostModelIndexResponse(rsp)
}

// DeleteModelIndexIdWithResponse request returning *DeleteModelIndexIdResponse
func (c *ClientWithResponses) DeleteModelIndexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteModelIndexIdResponse, error) {
	rsp, err := c.DeleteModelIndexId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelIndexIdResponse(rsp)
}

// GetModelIndexIdWithResponse request returning *GetModelIndexIdResponse
func (c *ClientWithResponses) GetModelIndexIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetModelIndexIdResponse, error) {
	rsp, err := c.GetModelIndexId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelIndexIdResponse(rsp)
}

// GetNativeQuerySnippetWithResponse request returning *GetNativeQuerySnippetResponse
func (c *ClientWithResponses) GetNativeQuerySnippetWithResponse(ctx context.Context, params *GetNativeQuerySnippetParams, reqEditors ...RequestEditorFn) (*GetNativeQuerySnippetResponse, error) {
	rsp, err := c.GetNativeQuerySnippet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNativeQuerySnippetResponse(rsp)
}

// PostNativeQuerySnippetWithBodyWithResponse request with arbitrary body returning *PostNativeQuerySnippetResponse
func (c *ClientWithResponses) PostNativeQuerySnippetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNativeQuerySnippetResponse, error) {
	rsp, err := c.PostNativeQuerySnippetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNativeQuerySnippetResponse(rsp)
}

func (c *ClientWithResponses) PostNativeQuerySnippetWithResponse(ctx context.Context, body PostNativeQuerySnippetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNativeQuerySnippetResponse, error) {
	rsp, err := c.PostNativeQuerySnippet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNativeQuerySnippetResponse(rsp)
}

// GetNativeQuerySnippetIdWithResponse request returning *GetNativeQuerySnippetIdResponse
func (c *ClientWithResponses) GetNativeQuerySnippetIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetNativeQuerySnippetIdResponse, error) {
	rsp, err := c.GetNativeQuerySnippetId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNativeQuerySnippetIdResponse(rsp)
}

// PutNativeQuerySnippetIdWithBodyWithResponse request with arbitrary body returning *PutNativeQuerySnippetIdResponse
func (c *ClientWithResponses) PutNativeQuerySnippetIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNativeQuerySnippetIdResponse, error) {
	rsp, err := c.PutNativeQuerySnippetIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNativeQuerySnippetIdResponse(rsp)
}

func (c *ClientWithResponses) PutNativeQuerySnippetIdWithResponse(ctx context.Context, id int, body PutNativeQuerySnippetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNativeQuerySnippetIdResponse, error) {
	rsp, err := c.PutNativeQuerySnippetId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNativeQuerySnippetIdResponse(rsp)
}

// PostNotifyDbIdWithBodyWithResponse request with arbitrary body returning *PostNotifyDbIdResponse
func (c *ClientWithResponses) PostNotifyDbIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifyDbIdResponse, error) {
	rsp, err := c.PostNotifyDbIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifyDbIdResponse(rsp)
}

func (c *ClientWithResponses) PostNotifyDbIdWithResponse(ctx context.Context, id int, body PostNotifyDbIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifyDbIdResponse, error) {
	rsp, err := c.PostNotifyDbId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifyDbIdResponse(rsp)
}

// PostNotifyDbIdNewTableWithBodyWithResponse request with arbitrary body returning *PostNotifyDbIdNewTableResponse
func (c *ClientWithResponses) PostNotifyDbIdNewTableWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotifyDbIdNewTableResponse, error) {
	rsp, err := c.PostNotifyDbIdNewTableWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifyDbIdNewTableResponse(rsp)
}

func (c *ClientWithResponses) PostNotifyDbIdNewTableWithResponse(ctx context.Context, id int, body PostNotifyDbIdNewTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotifyDbIdNewTableResponse, error) {
	rsp, err := c.PostNotifyDbIdNewTable(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotifyDbIdNewTableResponse(rsp)
}

// GetPermissionsGraphWithResponse request returning *GetPermissionsGraphResponse
func (c *ClientWithResponses) GetPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGraphResponse, error) {
	rsp, err := c.GetPermissionsGraph(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGraphResponse(rsp)
}

// PutPermissionsGraphWithBodyWithResponse request with arbitrary body returning *PutPermissionsGraphResponse
func (c *ClientWithResponses) PutPermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsGraphResponse, error) {
	rsp, err := c.PutPermissionsGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsGraphResponse(rsp)
}

func (c *ClientWithResponses) PutPermissionsGraphWithResponse(ctx context.Context, body PutPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsGraphResponse, error) {
	rsp, err := c.PutPermissionsGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsGraphResponse(rsp)
}

// GetPermissionsGraphDbDbIdWithResponse request returning *GetPermissionsGraphDbDbIdResponse
func (c *ClientWithResponses) GetPermissionsGraphDbDbIdWithResponse(ctx context.Context, dbId int, reqEditors ...RequestEditorFn) (*GetPermissionsGraphDbDbIdResponse, error) {
	rsp, err := c.GetPermissionsGraphDbDbId(ctx, dbId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGraphDbDbIdResponse(rsp)
}

// GetPermissionsGraphGroupGroupIdWithResponse request returning *GetPermissionsGraphGroupGroupIdResponse
func (c *ClientWithResponses) GetPermissionsGraphGroupGroupIdWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetPermissionsGraphGroupGroupIdResponse, error) {
	rsp, err := c.GetPermissionsGraphGroupGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGraphGroupGroupIdResponse(rsp)
}

// GetPermissionsGroupWithResponse request returning *GetPermissionsGroupResponse
func (c *ClientWithResponses) GetPermissionsGroupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGroupResponse, error) {
	rsp, err := c.GetPermissionsGroup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGroupResponse(rsp)
}

// PostPermissionsGroupWithBodyWithResponse request with arbitrary body returning *PostPermissionsGroupResponse
func (c *ClientWithResponses) PostPermissionsGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsGroupResponse, error) {
	rsp, err := c.PostPermissionsGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsGroupResponse(rsp)
}

func (c *ClientWithResponses) PostPermissionsGroupWithResponse(ctx context.Context, body PostPermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsGroupResponse, error) {
	rsp, err := c.PostPermissionsGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsGroupResponse(rsp)
}

// DeletePermissionsGroupGroupIdWithResponse request returning *DeletePermissionsGroupGroupIdResponse
func (c *ClientWithResponses) DeletePermissionsGroupGroupIdWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*DeletePermissionsGroupGroupIdResponse, error) {
	rsp, err := c.DeletePermissionsGroupGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionsGroupGroupIdResponse(rsp)
}

// PutPermissionsGroupGroupIdWithBodyWithResponse request with arbitrary body returning *PutPermissionsGroupGroupIdResponse
func (c *ClientWithResponses) PutPermissionsGroupGroupIdWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsGroupGroupIdResponse, error) {
	rsp, err := c.PutPermissionsGroupGroupIdWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsGroupGroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutPermissionsGroupGroupIdWithResponse(ctx context.Context, groupId int, body PutPermissionsGroupGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsGroupGroupIdResponse, error) {
	rsp, err := c.PutPermissionsGroupGroupId(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsGroupGroupIdResponse(rsp)
}

// GetPermissionsGroupIdWithResponse request returning *GetPermissionsGroupIdResponse
func (c *ClientWithResponses) GetPermissionsGroupIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPermissionsGroupIdResponse, error) {
	rsp, err := c.GetPermissionsGroupId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGroupIdResponse(rsp)
}

// GetPermissionsMembershipWithResponse request returning *GetPermissionsMembershipResponse
func (c *ClientWithResponses) GetPermissionsMembershipWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsMembershipResponse, error) {
	rsp, err := c.GetPermissionsMembership(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsMembershipResponse(rsp)
}

// PostPermissionsMembershipWithBodyWithResponse request with arbitrary body returning *PostPermissionsMembershipResponse
func (c *ClientWithResponses) PostPermissionsMembershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsMembershipResponse, error) {
	rsp, err := c.PostPermissionsMembershipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsMembershipResponse(rsp)
}

func (c *ClientWithResponses) PostPermissionsMembershipWithResponse(ctx context.Context, body PostPermissionsMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsMembershipResponse, error) {
	rsp, err := c.PostPermissionsMembership(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsMembershipResponse(rsp)
}

// PutPermissionsMembershipGroupIdClearWithResponse request returning *PutPermissionsMembershipGroupIdClearResponse
func (c *ClientWithResponses) PutPermissionsMembershipGroupIdClearWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipGroupIdClearResponse, error) {
	rsp, err := c.PutPermissionsMembershipGroupIdClear(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsMembershipGroupIdClearResponse(rsp)
}

// DeletePermissionsMembershipIdWithResponse request returning *DeletePermissionsMembershipIdResponse
func (c *ClientWithResponses) DeletePermissionsMembershipIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePermissionsMembershipIdResponse, error) {
	rsp, err := c.DeletePermissionsMembershipId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionsMembershipIdResponse(rsp)
}

// PutPermissionsMembershipIdWithBodyWithResponse request with arbitrary body returning *PutPermissionsMembershipIdResponse
func (c *ClientWithResponses) PutPermissionsMembershipIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipIdResponse, error) {
	rsp, err := c.PutPermissionsMembershipIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsMembershipIdResponse(rsp)
}

func (c *ClientWithResponses) PutPermissionsMembershipIdWithResponse(ctx context.Context, id int, body PutPermissionsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsMembershipIdResponse, error) {
	rsp, err := c.PutPermissionsMembershipId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsMembershipIdResponse(rsp)
}

// GetPersistWithResponse request returning *GetPersistResponse
func (c *ClientWithResponses) GetPersistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPersistResponse, error) {
	rsp, err := c.GetPersist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersistResponse(rsp)
}

// GetPersistCardCardIdWithResponse request returning *GetPersistCardCardIdResponse
func (c *ClientWithResponses) GetPersistCardCardIdWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*GetPersistCardCardIdResponse, error) {
	rsp, err := c.GetPersistCardCardId(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersistCardCardIdResponse(rsp)
}

// PostPersistDisableWithResponse request returning *PostPersistDisableResponse
func (c *ClientWithResponses) PostPersistDisableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPersistDisableResponse, error) {
	rsp, err := c.PostPersistDisable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPersistDisableResponse(rsp)
}

// PostPersistEnableWithResponse request returning *PostPersistEnableResponse
func (c *ClientWithResponses) PostPersistEnableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPersistEnableResponse, error) {
	rsp, err := c.PostPersistEnable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPersistEnableResponse(rsp)
}

// PostPersistSetRefreshScheduleWithBodyWithResponse request with arbitrary body returning *PostPersistSetRefreshScheduleResponse
func (c *ClientWithResponses) PostPersistSetRefreshScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPersistSetRefreshScheduleResponse, error) {
	rsp, err := c.PostPersistSetRefreshScheduleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPersistSetRefreshScheduleResponse(rsp)
}

func (c *ClientWithResponses) PostPersistSetRefreshScheduleWithResponse(ctx context.Context, body PostPersistSetRefreshScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPersistSetRefreshScheduleResponse, error) {
	rsp, err := c.PostPersistSetRefreshSchedule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPersistSetRefreshScheduleResponse(rsp)
}

// GetPersistPersistedInfoIdWithResponse request returning *GetPersistPersistedInfoIdResponse
func (c *ClientWithResponses) GetPersistPersistedInfoIdWithResponse(ctx context.Context, persistedInfoId int, reqEditors ...RequestEditorFn) (*GetPersistPersistedInfoIdResponse, error) {
	rsp, err := c.GetPersistPersistedInfoId(ctx, persistedInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersistPersistedInfoIdResponse(rsp)
}

// GetPremiumFeaturesTokenStatusWithResponse request returning *GetPremiumFeaturesTokenStatusResponse
func (c *ClientWithResponses) GetPremiumFeaturesTokenStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPremiumFeaturesTokenStatusResponse, error) {
	rsp, err := c.GetPremiumFeaturesTokenStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPremiumFeaturesTokenStatusResponse(rsp)
}

// GetPreviewEmbedCardTokenWithResponse request returning *GetPreviewEmbedCardTokenResponse
func (c *ClientWithResponses) GetPreviewEmbedCardTokenWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedCardTokenResponse, error) {
	rsp, err := c.GetPreviewEmbedCardToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedCardTokenResponse(rsp)
}

// GetPreviewEmbedCardTokenQueryWithResponse request returning *GetPreviewEmbedCardTokenQueryResponse
func (c *ClientWithResponses) GetPreviewEmbedCardTokenQueryWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedCardTokenQueryResponse, error) {
	rsp, err := c.GetPreviewEmbedCardTokenQuery(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedCardTokenQueryResponse(rsp)
}

// GetPreviewEmbedDashboardTokenWithResponse request returning *GetPreviewEmbedDashboardTokenResponse
func (c *ClientWithResponses) GetPreviewEmbedDashboardTokenWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenResponse, error) {
	rsp, err := c.GetPreviewEmbedDashboardToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedDashboardTokenResponse(rsp)
}

// GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse request returning *GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardId(ctx, token, dashcardId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp)
}

// GetPreviewEmbedDashboardTokenParamsParamKeyValuesWithResponse request returning *GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetPreviewEmbedDashboardTokenParamsParamKeyValuesWithResponse(ctx context.Context, token string, paramKey string, reqEditors ...RequestEditorFn) (*GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetPreviewEmbedDashboardTokenParamsParamKeyValues(ctx, token, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse(rsp)
}

// GetPreviewEmbedPivotCardTokenQueryWithResponse request returning *GetPreviewEmbedPivotCardTokenQueryResponse
func (c *ClientWithResponses) GetPreviewEmbedPivotCardTokenQueryWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPreviewEmbedPivotCardTokenQueryResponse, error) {
	rsp, err := c.GetPreviewEmbedPivotCardTokenQuery(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedPivotCardTokenQueryResponse(rsp)
}

// GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse request returning *GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, token MetabaseLibSchemaCommonNonBlankString, dashcardId int, cardId int, reqEditors ...RequestEditorFn) (*GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardId(ctx, token, dashcardId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp)
}

// GetPublicActionUuidWithResponse request returning *GetPublicActionUuidResponse
func (c *ClientWithResponses) GetPublicActionUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicActionUuidResponse, error) {
	rsp, err := c.GetPublicActionUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicActionUuidResponse(rsp)
}

// PostPublicActionUuidExecuteWithBodyWithResponse request with arbitrary body returning *PostPublicActionUuidExecuteResponse
func (c *ClientWithResponses) PostPublicActionUuidExecuteWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicActionUuidExecuteResponse, error) {
	rsp, err := c.PostPublicActionUuidExecuteWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicActionUuidExecuteResponse(rsp)
}

func (c *ClientWithResponses) PostPublicActionUuidExecuteWithResponse(ctx context.Context, uuid string, body PostPublicActionUuidExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicActionUuidExecuteResponse, error) {
	rsp, err := c.PostPublicActionUuidExecute(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicActionUuidExecuteResponse(rsp)
}

// GetPublicCardUuidWithResponse request returning *GetPublicCardUuidResponse
func (c *ClientWithResponses) GetPublicCardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicCardUuidResponse, error) {
	rsp, err := c.GetPublicCardUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidResponse(rsp)
}

// GetPublicCardUuidFieldFieldIdRemappingRemappedIdWithResponse request returning *GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse
func (c *ClientWithResponses) GetPublicCardUuidFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicCardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse, error) {
	rsp, err := c.GetPublicCardUuidFieldFieldIdRemappingRemappedId(ctx, uuid, fieldId, remappedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse(rsp)
}

// GetPublicCardUuidFieldFieldIdSearchSearchFieldIdWithResponse request returning *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse
func (c *ClientWithResponses) GetPublicCardUuidFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicCardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse, error) {
	rsp, err := c.GetPublicCardUuidFieldFieldIdSearchSearchFieldId(ctx, uuid, fieldId, searchFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse(rsp)
}

// GetPublicCardUuidFieldFieldIdValuesWithResponse request returning *GetPublicCardUuidFieldFieldIdValuesResponse
func (c *ClientWithResponses) GetPublicCardUuidFieldFieldIdValuesWithResponse(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*GetPublicCardUuidFieldFieldIdValuesResponse, error) {
	rsp, err := c.GetPublicCardUuidFieldFieldIdValues(ctx, uuid, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidFieldFieldIdValuesResponse(rsp)
}

// GetPublicCardUuidParamsParamKeySearchQueryWithResponse request returning *GetPublicCardUuidParamsParamKeySearchQueryResponse
func (c *ClientWithResponses) GetPublicCardUuidParamsParamKeySearchQueryWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicCardUuidParamsParamKeySearchQueryResponse, error) {
	rsp, err := c.GetPublicCardUuidParamsParamKeySearchQuery(ctx, uuid, paramKey, query, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidParamsParamKeySearchQueryResponse(rsp)
}

// GetPublicCardUuidParamsParamKeyValuesWithResponse request returning *GetPublicCardUuidParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetPublicCardUuidParamsParamKeyValuesWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicCardUuidParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetPublicCardUuidParamsParamKeyValues(ctx, uuid, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidParamsParamKeyValuesResponse(rsp)
}

// GetPublicCardUuidQueryWithResponse request returning *GetPublicCardUuidQueryResponse
func (c *ClientWithResponses) GetPublicCardUuidQueryWithResponse(ctx context.Context, uuid string, params *GetPublicCardUuidQueryParams, reqEditors ...RequestEditorFn) (*GetPublicCardUuidQueryResponse, error) {
	rsp, err := c.GetPublicCardUuidQuery(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidQueryResponse(rsp)
}

// GetPublicCardUuidQueryExportFormatWithResponse request returning *GetPublicCardUuidQueryExportFormatResponse
func (c *ClientWithResponses) GetPublicCardUuidQueryExportFormatWithResponse(ctx context.Context, uuid string, exportFormat GetPublicCardUuidQueryExportFormatParamsExportFormat, reqEditors ...RequestEditorFn) (*GetPublicCardUuidQueryExportFormatResponse, error) {
	rsp, err := c.GetPublicCardUuidQueryExportFormat(ctx, uuid, exportFormat, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicCardUuidQueryExportFormatResponse(rsp)
}

// GetPublicDashboardUuidWithResponse request returning *GetPublicDashboardUuidResponse
func (c *ClientWithResponses) GetPublicDashboardUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidResponse, error) {
	rsp, err := c.GetPublicDashboardUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidResponse(rsp)
}

// GetPublicDashboardUuidDashcardDashcardIdCardCardIdWithResponse request returning *GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetPublicDashboardUuidDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetPublicDashboardUuidDashcardDashcardIdCardCardId(ctx, uuid, dashcardId, cardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse(rsp)
}

// PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBodyWithResponse request with arbitrary body returning *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse
func (c *ClientWithResponses) PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBodyWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse, error) {
	rsp, err := c.PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithBody(ctx, uuid, dashcardId, cardId, exportFormat, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse(rsp)
}

func (c *ClientWithResponses) PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, exportFormat PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParamsExportFormat, params *PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatParams, body PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse, error) {
	rsp, err := c.PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormat(ctx, uuid, dashcardId, cardId, exportFormat, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse(rsp)
}

// GetPublicDashboardUuidDashcardDashcardIdExecuteWithResponse request returning *GetPublicDashboardUuidDashcardDashcardIdExecuteResponse
func (c *ClientWithResponses) GetPublicDashboardUuidDashcardDashcardIdExecuteWithResponse(ctx context.Context, uuid string, dashcardId int, params *GetPublicDashboardUuidDashcardDashcardIdExecuteParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.GetPublicDashboardUuidDashcardDashcardIdExecute(ctx, uuid, dashcardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidDashcardDashcardIdExecuteResponse(rsp)
}

// PostPublicDashboardUuidDashcardDashcardIdExecuteWithBodyWithResponse request with arbitrary body returning *PostPublicDashboardUuidDashcardDashcardIdExecuteResponse
func (c *ClientWithResponses) PostPublicDashboardUuidDashcardDashcardIdExecuteWithBodyWithResponse(ctx context.Context, uuid string, dashcardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.PostPublicDashboardUuidDashcardDashcardIdExecuteWithBody(ctx, uuid, dashcardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicDashboardUuidDashcardDashcardIdExecuteResponse(rsp)
}

func (c *ClientWithResponses) PostPublicDashboardUuidDashcardDashcardIdExecuteWithResponse(ctx context.Context, uuid string, dashcardId int, body PostPublicDashboardUuidDashcardDashcardIdExecuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublicDashboardUuidDashcardDashcardIdExecuteResponse, error) {
	rsp, err := c.PostPublicDashboardUuidDashcardDashcardIdExecute(ctx, uuid, dashcardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublicDashboardUuidDashcardDashcardIdExecuteResponse(rsp)
}

// GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdWithResponse request returning *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse
func (c *ClientWithResponses) GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdWithResponse(ctx context.Context, uuid string, fieldId int, remappedId int, params *GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse, error) {
	rsp, err := c.GetPublicDashboardUuidFieldFieldIdRemappingRemappedId(ctx, uuid, fieldId, remappedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse(rsp)
}

// GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdWithResponse request returning *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse
func (c *ClientWithResponses) GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdWithResponse(ctx context.Context, uuid string, fieldId int, searchFieldId int, params *GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdParams, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse, error) {
	rsp, err := c.GetPublicDashboardUuidFieldFieldIdSearchSearchFieldId(ctx, uuid, fieldId, searchFieldId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse(rsp)
}

// GetPublicDashboardUuidFieldFieldIdValuesWithResponse request returning *GetPublicDashboardUuidFieldFieldIdValuesResponse
func (c *ClientWithResponses) GetPublicDashboardUuidFieldFieldIdValuesWithResponse(ctx context.Context, uuid string, fieldId int, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidFieldFieldIdValuesResponse, error) {
	rsp, err := c.GetPublicDashboardUuidFieldFieldIdValues(ctx, uuid, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidFieldFieldIdValuesResponse(rsp)
}

// GetPublicDashboardUuidParamsParamKeySearchQueryWithResponse request returning *GetPublicDashboardUuidParamsParamKeySearchQueryResponse
func (c *ClientWithResponses) GetPublicDashboardUuidParamsParamKeySearchQueryWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, query MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidParamsParamKeySearchQueryResponse, error) {
	rsp, err := c.GetPublicDashboardUuidParamsParamKeySearchQuery(ctx, uuid, paramKey, query, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidParamsParamKeySearchQueryResponse(rsp)
}

// GetPublicDashboardUuidParamsParamKeyValuesWithResponse request returning *GetPublicDashboardUuidParamsParamKeyValuesResponse
func (c *ClientWithResponses) GetPublicDashboardUuidParamsParamKeyValuesWithResponse(ctx context.Context, uuid string, paramKey MetabaseLibSchemaCommonNonBlankString, reqEditors ...RequestEditorFn) (*GetPublicDashboardUuidParamsParamKeyValuesResponse, error) {
	rsp, err := c.GetPublicDashboardUuidParamsParamKeyValues(ctx, uuid, paramKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDashboardUuidParamsParamKeyValuesResponse(rsp)
}

// GetPublicOembedWithResponse request returning *GetPublicOembedResponse
func (c *ClientWithResponses) GetPublicOembedWithResponse(ctx context.Context, params *GetPublicOembedParams, reqEditors ...RequestEditorFn) (*GetPublicOembedResponse, error) {
	rsp, err := c.GetPublicOembed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicOembedResponse(rsp)
}

// GetPublicPivotCardUuidQueryWithResponse request returning *GetPublicPivotCardUuidQueryResponse
func (c *ClientWithResponses) GetPublicPivotCardUuidQueryWithResponse(ctx context.Context, uuid string, params *GetPublicPivotCardUuidQueryParams, reqEditors ...RequestEditorFn) (*GetPublicPivotCardUuidQueryResponse, error) {
	rsp, err := c.GetPublicPivotCardUuidQuery(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicPivotCardUuidQueryResponse(rsp)
}

// GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdWithResponse request returning *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse
func (c *ClientWithResponses) GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdWithResponse(ctx context.Context, uuid string, dashcardId int, cardId int, params *GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdParams, reqEditors ...RequestEditorFn) (*GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse, error) {
	rsp, err := c.GetPublicPivotDashboardUuidDashcardDashcardIdCardCardId(ctx, uuid, dashcardId, cardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse(rsp)
}

// GetPulseWithResponse request returning *GetPulseResponse
func (c *ClientWithResponses) GetPulseWithResponse(ctx context.Context, params *GetPulseParams, reqEditors ...RequestEditorFn) (*GetPulseResponse, error) {
	rsp, err := c.GetPulse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseResponse(rsp)
}

// PostPulseWithBodyWithResponse request with arbitrary body returning *PostPulseResponse
func (c *ClientWithResponses) PostPulseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPulseResponse, error) {
	rsp, err := c.PostPulseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPulseResponse(rsp)
}

func (c *ClientWithResponses) PostPulseWithResponse(ctx context.Context, body PostPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPulseResponse, error) {
	rsp, err := c.PostPulse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPulseResponse(rsp)
}

// GetPulseFormInputWithResponse request returning *GetPulseFormInputResponse
func (c *ClientWithResponses) GetPulseFormInputWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPulseFormInputResponse, error) {
	rsp, err := c.GetPulseFormInput(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseFormInputResponse(rsp)
}

// GetPulsePreviewCardIdWithResponse request returning *GetPulsePreviewCardIdResponse
func (c *ClientWithResponses) GetPulsePreviewCardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardIdResponse, error) {
	rsp, err := c.GetPulsePreviewCardId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulsePreviewCardIdResponse(rsp)
}

// GetPulsePreviewCardInfoIdWithResponse request returning *GetPulsePreviewCardInfoIdResponse
func (c *ClientWithResponses) GetPulsePreviewCardInfoIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardInfoIdResponse, error) {
	rsp, err := c.GetPulsePreviewCardInfoId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulsePreviewCardInfoIdResponse(rsp)
}

// GetPulsePreviewCardPngIdWithResponse request returning *GetPulsePreviewCardPngIdResponse
func (c *ClientWithResponses) GetPulsePreviewCardPngIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewCardPngIdResponse, error) {
	rsp, err := c.GetPulsePreviewCardPngId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulsePreviewCardPngIdResponse(rsp)
}

// GetPulsePreviewDashboardIdWithResponse request returning *GetPulsePreviewDashboardIdResponse
func (c *ClientWithResponses) GetPulsePreviewDashboardIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulsePreviewDashboardIdResponse, error) {
	rsp, err := c.GetPulsePreviewDashboardId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulsePreviewDashboardIdResponse(rsp)
}

// PostPulseTestWithBodyWithResponse request with arbitrary body returning *PostPulseTestResponse
func (c *ClientWithResponses) PostPulseTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPulseTestResponse, error) {
	rsp, err := c.PostPulseTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPulseTestResponse(rsp)
}

func (c *ClientWithResponses) PostPulseTestWithResponse(ctx context.Context, body PostPulseTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPulseTestResponse, error) {
	rsp, err := c.PostPulseTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPulseTestResponse(rsp)
}

// GetPulseIdWithResponse request returning *GetPulseIdResponse
func (c *ClientWithResponses) GetPulseIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPulseIdResponse, error) {
	rsp, err := c.GetPulseId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPulseIdResponse(rsp)
}

// PutPulseIdWithBodyWithResponse request with arbitrary body returning *PutPulseIdResponse
func (c *ClientWithResponses) PutPulseIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPulseIdResponse, error) {
	rsp, err := c.PutPulseIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPulseIdResponse(rsp)
}

func (c *ClientWithResponses) PutPulseIdWithResponse(ctx context.Context, id int, body PutPulseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPulseIdResponse, error) {
	rsp, err := c.PutPulseId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPulseIdResponse(rsp)
}

// DeletePulseIdSubscriptionWithResponse request returning *DeletePulseIdSubscriptionResponse
func (c *ClientWithResponses) DeletePulseIdSubscriptionWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePulseIdSubscriptionResponse, error) {
	rsp, err := c.DeletePulseIdSubscription(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePulseIdSubscriptionResponse(rsp)
}

// GetRevisionWithResponse request returning *GetRevisionResponse
func (c *ClientWithResponses) GetRevisionWithResponse(ctx context.Context, params *GetRevisionParams, reqEditors ...RequestEditorFn) (*GetRevisionResponse, error) {
	rsp, err := c.GetRevision(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRevisionResponse(rsp)
}

// PostRevisionRevertWithBodyWithResponse request with arbitrary body returning *PostRevisionRevertResponse
func (c *ClientWithResponses) PostRevisionRevertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionRevertResponse, error) {
	rsp, err := c.PostRevisionRevertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionRevertResponse(rsp)
}

func (c *ClientWithResponses) PostRevisionRevertWithResponse(ctx context.Context, body PostRevisionRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionRevertResponse, error) {
	rsp, err := c.PostRevisionRevert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionRevertResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// PostSearchForceReindexWithResponse request returning *PostSearchForceReindexResponse
func (c *ClientWithResponses) PostSearchForceReindexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSearchForceReindexResponse, error) {
	rsp, err := c.PostSearchForceReindex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchForceReindexResponse(rsp)
}

// GetSearchModelsWithResponse request returning *GetSearchModelsResponse
func (c *ClientWithResponses) GetSearchModelsWithResponse(ctx context.Context, params *GetSearchModelsParams, reqEditors ...RequestEditorFn) (*GetSearchModelsResponse, error) {
	rsp, err := c.GetSearchModels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchModelsResponse(rsp)
}

// GetSegmentWithResponse request returning *GetSegmentResponse
func (c *ClientWithResponses) GetSegmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error) {
	rsp, err := c.GetSegment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentResponse(rsp)
}

// PostSegmentWithBodyWithResponse request with arbitrary body returning *PostSegmentResponse
func (c *ClientWithResponses) PostSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSegmentResponse, error) {
	rsp, err := c.PostSegmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSegmentResponse(rsp)
}

func (c *ClientWithResponses) PostSegmentWithResponse(ctx context.Context, body PostSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSegmentResponse, error) {
	rsp, err := c.PostSegment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSegmentResponse(rsp)
}

// DeleteSegmentIdWithResponse request returning *DeleteSegmentIdResponse
func (c *ClientWithResponses) DeleteSegmentIdWithResponse(ctx context.Context, id int, params *DeleteSegmentIdParams, reqEditors ...RequestEditorFn) (*DeleteSegmentIdResponse, error) {
	rsp, err := c.DeleteSegmentId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSegmentIdResponse(rsp)
}

// GetSegmentIdWithResponse request returning *GetSegmentIdResponse
func (c *ClientWithResponses) GetSegmentIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdResponse, error) {
	rsp, err := c.GetSegmentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentIdResponse(rsp)
}

// PutSegmentIdWithBodyWithResponse request with arbitrary body returning *PutSegmentIdResponse
func (c *ClientWithResponses) PutSegmentIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSegmentIdResponse, error) {
	rsp, err := c.PutSegmentIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSegmentIdResponse(rsp)
}

func (c *ClientWithResponses) PutSegmentIdWithResponse(ctx context.Context, id int, body PutSegmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSegmentIdResponse, error) {
	rsp, err := c.PutSegmentId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSegmentIdResponse(rsp)
}

// GetSegmentIdRelatedWithResponse request returning *GetSegmentIdRelatedResponse
func (c *ClientWithResponses) GetSegmentIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdRelatedResponse, error) {
	rsp, err := c.GetSegmentIdRelated(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentIdRelatedResponse(rsp)
}

// PostSegmentIdRevertWithBodyWithResponse request with arbitrary body returning *PostSegmentIdRevertResponse
func (c *ClientWithResponses) PostSegmentIdRevertWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSegmentIdRevertResponse, error) {
	rsp, err := c.PostSegmentIdRevertWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSegmentIdRevertResponse(rsp)
}

func (c *ClientWithResponses) PostSegmentIdRevertWithResponse(ctx context.Context, id int, body PostSegmentIdRevertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSegmentIdRevertResponse, error) {
	rsp, err := c.PostSegmentIdRevert(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSegmentIdRevertResponse(rsp)
}

// GetSegmentIdRevisionsWithResponse request returning *GetSegmentIdRevisionsResponse
func (c *ClientWithResponses) GetSegmentIdRevisionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSegmentIdRevisionsResponse, error) {
	rsp, err := c.GetSegmentIdRevisions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentIdRevisionsResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// PostSessionWithBodyWithResponse request with arbitrary body returning *PostSessionResponse
func (c *ClientWithResponses) PostSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

func (c *ClientWithResponses) PostSessionWithResponse(ctx context.Context, body PostSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResponse, error) {
	rsp, err := c.PostSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResponse(rsp)
}

// PostSessionForgotPasswordWithBodyWithResponse request with arbitrary body returning *PostSessionForgotPasswordResponse
func (c *ClientWithResponses) PostSessionForgotPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionForgotPasswordResponse, error) {
	rsp, err := c.PostSessionForgotPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionForgotPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostSessionForgotPasswordWithResponse(ctx context.Context, body PostSessionForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionForgotPasswordResponse, error) {
	rsp, err := c.PostSessionForgotPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionForgotPasswordResponse(rsp)
}

// PostSessionGoogleAuthWithBodyWithResponse request with arbitrary body returning *PostSessionGoogleAuthResponse
func (c *ClientWithResponses) PostSessionGoogleAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionGoogleAuthResponse, error) {
	rsp, err := c.PostSessionGoogleAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionGoogleAuthResponse(rsp)
}

func (c *ClientWithResponses) PostSessionGoogleAuthWithResponse(ctx context.Context, body PostSessionGoogleAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionGoogleAuthResponse, error) {
	rsp, err := c.PostSessionGoogleAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionGoogleAuthResponse(rsp)
}

// GetSessionPasswordResetTokenValidWithResponse request returning *GetSessionPasswordResetTokenValidResponse
func (c *ClientWithResponses) GetSessionPasswordResetTokenValidWithResponse(ctx context.Context, params *GetSessionPasswordResetTokenValidParams, reqEditors ...RequestEditorFn) (*GetSessionPasswordResetTokenValidResponse, error) {
	rsp, err := c.GetSessionPasswordResetTokenValid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionPasswordResetTokenValidResponse(rsp)
}

// GetSessionPropertiesWithResponse request returning *GetSessionPropertiesResponse
func (c *ClientWithResponses) GetSessionPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionPropertiesResponse, error) {
	rsp, err := c.GetSessionProperties(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionPropertiesResponse(rsp)
}

// PostSessionPulseUnsubscribeWithBodyWithResponse request with arbitrary body returning *PostSessionPulseUnsubscribeResponse
func (c *ClientWithResponses) PostSessionPulseUnsubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeResponse, error) {
	rsp, err := c.PostSessionPulseUnsubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionPulseUnsubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostSessionPulseUnsubscribeWithResponse(ctx context.Context, body PostSessionPulseUnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeResponse, error) {
	rsp, err := c.PostSessionPulseUnsubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionPulseUnsubscribeResponse(rsp)
}

// PostSessionPulseUnsubscribeUndoWithBodyWithResponse request with arbitrary body returning *PostSessionPulseUnsubscribeUndoResponse
func (c *ClientWithResponses) PostSessionPulseUnsubscribeUndoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeUndoResponse, error) {
	rsp, err := c.PostSessionPulseUnsubscribeUndoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionPulseUnsubscribeUndoResponse(rsp)
}

func (c *ClientWithResponses) PostSessionPulseUnsubscribeUndoWithResponse(ctx context.Context, body PostSessionPulseUnsubscribeUndoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionPulseUnsubscribeUndoResponse, error) {
	rsp, err := c.PostSessionPulseUnsubscribeUndo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionPulseUnsubscribeUndoResponse(rsp)
}

// PostSessionResetPasswordWithBodyWithResponse request with arbitrary body returning *PostSessionResetPasswordResponse
func (c *ClientWithResponses) PostSessionResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSessionResetPasswordResponse, error) {
	rsp, err := c.PostSessionResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostSessionResetPasswordWithResponse(ctx context.Context, body PostSessionResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSessionResetPasswordResponse, error) {
	rsp, err := c.PostSessionResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSessionResetPasswordResponse(rsp)
}

// GetSettingWithResponse request returning *GetSettingResponse
func (c *ClientWithResponses) GetSettingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingResponse, error) {
	rsp, err := c.GetSetting(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingResponse(rsp)
}

// PutSettingWithBodyWithResponse request with arbitrary body returning *PutSettingResponse
func (c *ClientWithResponses) PutSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingResponse, error) {
	rsp, err := c.PutSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingResponse(rsp)
}

func (c *ClientWithResponses) PutSettingWithResponse(ctx context.Context, body PutSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingResponse, error) {
	rsp, err := c.PutSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingResponse(rsp)
}

// GetSettingKeyWithResponse request returning *GetSettingKeyResponse
func (c *ClientWithResponses) GetSettingKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetSettingKeyResponse, error) {
	rsp, err := c.GetSettingKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingKeyResponse(rsp)
}

// PutSettingKeyWithResponse request returning *PutSettingKeyResponse
func (c *ClientWithResponses) PutSettingKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*PutSettingKeyResponse, error) {
	rsp, err := c.PutSettingKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingKeyResponse(rsp)
}

// PostSetupWithBodyWithResponse request with arbitrary body returning *PostSetupResponse
func (c *ClientWithResponses) PostSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetupResponse, error) {
	rsp, err := c.PostSetupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetupResponse(rsp)
}

func (c *ClientWithResponses) PostSetupWithResponse(ctx context.Context, body PostSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetupResponse, error) {
	rsp, err := c.PostSetup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetupResponse(rsp)
}

// GetSetupAdminChecklistWithResponse request returning *GetSetupAdminChecklistResponse
func (c *ClientWithResponses) GetSetupAdminChecklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupAdminChecklistResponse, error) {
	rsp, err := c.GetSetupAdminChecklist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSetupAdminChecklistResponse(rsp)
}

// GetSetupUserDefaultsWithResponse request returning *GetSetupUserDefaultsResponse
func (c *ClientWithResponses) GetSetupUserDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupUserDefaultsResponse, error) {
	rsp, err := c.GetSetupUserDefaults(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSetupUserDefaultsResponse(rsp)
}

// GetSlackManifestWithResponse request returning *GetSlackManifestResponse
func (c *ClientWithResponses) GetSlackManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSlackManifestResponse, error) {
	rsp, err := c.GetSlackManifest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlackManifestResponse(rsp)
}

// PutSlackSettingsWithBodyWithResponse request with arbitrary body returning *PutSlackSettingsResponse
func (c *ClientWithResponses) PutSlackSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlackSettingsResponse, error) {
	rsp, err := c.PutSlackSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlackSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutSlackSettingsWithResponse(ctx context.Context, body PutSlackSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlackSettingsResponse, error) {
	rsp, err := c.PutSlackSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlackSettingsResponse(rsp)
}

// GetTableWithResponse request returning *GetTableResponse
func (c *ClientWithResponses) GetTableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTableResponse, error) {
	rsp, err := c.GetTable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableResponse(rsp)
}

// PutTableWithBodyWithResponse request with arbitrary body returning *PutTableResponse
func (c *ClientWithResponses) PutTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableResponse, error) {
	rsp, err := c.PutTableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableResponse(rsp)
}

func (c *ClientWithResponses) PutTableWithResponse(ctx context.Context, body PutTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableResponse, error) {
	rsp, err := c.PutTable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableResponse(rsp)
}

// GetTableCardIdFksWithResponse request returning *GetTableCardIdFksResponse
func (c *ClientWithResponses) GetTableCardIdFksWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableCardIdFksResponse, error) {
	rsp, err := c.GetTableCardIdFks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableCardIdFksResponse(rsp)
}

// GetTableCardIdQueryMetadataWithResponse request returning *GetTableCardIdQueryMetadataResponse
func (c *ClientWithResponses) GetTableCardIdQueryMetadataWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableCardIdQueryMetadataResponse, error) {
	rsp, err := c.GetTableCardIdQueryMetadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableCardIdQueryMetadataResponse(rsp)
}

// GetTableIdWithResponse request returning *GetTableIdResponse
func (c *ClientWithResponses) GetTableIdWithResponse(ctx context.Context, id int, params *GetTableIdParams, reqEditors ...RequestEditorFn) (*GetTableIdResponse, error) {
	rsp, err := c.GetTableId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableIdResponse(rsp)
}

// PutTableIdWithBodyWithResponse request with arbitrary body returning *PutTableIdResponse
func (c *ClientWithResponses) PutTableIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableIdResponse, error) {
	rsp, err := c.PutTableIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableIdResponse(rsp)
}

func (c *ClientWithResponses) PutTableIdWithResponse(ctx context.Context, id int, body PutTableIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableIdResponse, error) {
	rsp, err := c.PutTableId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableIdResponse(rsp)
}

// PostTableIdAppendCsvWithResponse request returning *PostTableIdAppendCsvResponse
func (c *ClientWithResponses) PostTableIdAppendCsvWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdAppendCsvResponse, error) {
	rsp, err := c.PostTableIdAppendCsv(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTableIdAppendCsvResponse(rsp)
}

// PostTableIdDiscardValuesWithResponse request returning *PostTableIdDiscardValuesResponse
func (c *ClientWithResponses) PostTableIdDiscardValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdDiscardValuesResponse, error) {
	rsp, err := c.PostTableIdDiscardValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTableIdDiscardValuesResponse(rsp)
}

// PutTableIdFieldsOrderWithBodyWithResponse request with arbitrary body returning *PutTableIdFieldsOrderResponse
func (c *ClientWithResponses) PutTableIdFieldsOrderWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTableIdFieldsOrderResponse, error) {
	rsp, err := c.PutTableIdFieldsOrderWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableIdFieldsOrderResponse(rsp)
}

func (c *ClientWithResponses) PutTableIdFieldsOrderWithResponse(ctx context.Context, id int, body PutTableIdFieldsOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTableIdFieldsOrderResponse, error) {
	rsp, err := c.PutTableIdFieldsOrder(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTableIdFieldsOrderResponse(rsp)
}

// GetTableIdFksWithResponse request returning *GetTableIdFksResponse
func (c *ClientWithResponses) GetTableIdFksWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableIdFksResponse, error) {
	rsp, err := c.GetTableIdFks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableIdFksResponse(rsp)
}

// GetTableIdQueryMetadataWithResponse request returning *GetTableIdQueryMetadataResponse
func (c *ClientWithResponses) GetTableIdQueryMetadataWithResponse(ctx context.Context, id int, params *GetTableIdQueryMetadataParams, reqEditors ...RequestEditorFn) (*GetTableIdQueryMetadataResponse, error) {
	rsp, err := c.GetTableIdQueryMetadata(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableIdQueryMetadataResponse(rsp)
}

// GetTableIdRelatedWithResponse request returning *GetTableIdRelatedResponse
func (c *ClientWithResponses) GetTableIdRelatedWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTableIdRelatedResponse, error) {
	rsp, err := c.GetTableIdRelated(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableIdRelatedResponse(rsp)
}

// PostTableIdReplaceCsvWithResponse request returning *PostTableIdReplaceCsvResponse
func (c *ClientWithResponses) PostTableIdReplaceCsvWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdReplaceCsvResponse, error) {
	rsp, err := c.PostTableIdReplaceCsv(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTableIdReplaceCsvResponse(rsp)
}

// PostTableIdRescanValuesWithResponse request returning *PostTableIdRescanValuesResponse
func (c *ClientWithResponses) PostTableIdRescanValuesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostTableIdRescanValuesResponse, error) {
	rsp, err := c.PostTableIdRescanValues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTableIdRescanValuesResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// GetTaskInfoWithResponse request returning *GetTaskInfoResponse
func (c *ClientWithResponses) GetTaskInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskInfoResponse, error) {
	rsp, err := c.GetTaskInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskInfoResponse(rsp)
}

// GetTaskIdWithResponse request returning *GetTaskIdResponse
func (c *ClientWithResponses) GetTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error) {
	rsp, err := c.GetTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskIdResponse(rsp)
}

// GetTilesZoomXYLatFieldLonFieldWithResponse request returning *GetTilesZoomXYLatFieldLonFieldResponse
func (c *ClientWithResponses) GetTilesZoomXYLatFieldLonFieldWithResponse(ctx context.Context, zoom int, x int, y int, latField string, lonField string, params *GetTilesZoomXYLatFieldLonFieldParams, reqEditors ...RequestEditorFn) (*GetTilesZoomXYLatFieldLonFieldResponse, error) {
	rsp, err := c.GetTilesZoomXYLatFieldLonField(ctx, zoom, x, y, latField, lonField, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTilesZoomXYLatFieldLonFieldResponse(rsp)
}

// PostTimelineEventWithBodyWithResponse request with arbitrary body returning *PostTimelineEventResponse
func (c *ClientWithResponses) PostTimelineEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelineEventResponse, error) {
	rsp, err := c.PostTimelineEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelineEventResponse(rsp)
}

func (c *ClientWithResponses) PostTimelineEventWithResponse(ctx context.Context, body PostTimelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelineEventResponse, error) {
	rsp, err := c.PostTimelineEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelineEventResponse(rsp)
}

// DeleteTimelineEventIdWithResponse request returning *DeleteTimelineEventIdResponse
func (c *ClientWithResponses) DeleteTimelineEventIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTimelineEventIdResponse, error) {
	rsp, err := c.DeleteTimelineEventId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTimelineEventIdResponse(rsp)
}

// GetTimelineEventIdWithResponse request returning *GetTimelineEventIdResponse
func (c *ClientWithResponses) GetTimelineEventIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTimelineEventIdResponse, error) {
	rsp, err := c.GetTimelineEventId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelineEventIdResponse(rsp)
}

// PutTimelineEventIdWithBodyWithResponse request with arbitrary body returning *PutTimelineEventIdResponse
func (c *ClientWithResponses) PutTimelineEventIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimelineEventIdResponse, error) {
	rsp, err := c.PutTimelineEventIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimelineEventIdResponse(rsp)
}

func (c *ClientWithResponses) PutTimelineEventIdWithResponse(ctx context.Context, id int, body PutTimelineEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimelineEventIdResponse, error) {
	rsp, err := c.PutTimelineEventId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimelineEventIdResponse(rsp)
}

// GetTimelineWithResponse request returning *GetTimelineResponse
func (c *ClientWithResponses) GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error) {
	rsp, err := c.GetTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelineResponse(rsp)
}

// PostTimelineWithBodyWithResponse request with arbitrary body returning *PostTimelineResponse
func (c *ClientWithResponses) PostTimelineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimelineResponse, error) {
	rsp, err := c.PostTimelineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelineResponse(rsp)
}

func (c *ClientWithResponses) PostTimelineWithResponse(ctx context.Context, body PostTimelineJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimelineResponse, error) {
	rsp, err := c.PostTimeline(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimelineResponse(rsp)
}

// DeleteTimelineIdWithResponse request returning *DeleteTimelineIdResponse
func (c *ClientWithResponses) DeleteTimelineIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTimelineIdResponse, error) {
	rsp, err := c.DeleteTimelineId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTimelineIdResponse(rsp)
}

// GetTimelineIdWithResponse request returning *GetTimelineIdResponse
func (c *ClientWithResponses) GetTimelineIdWithResponse(ctx context.Context, id int, params *GetTimelineIdParams, reqEditors ...RequestEditorFn) (*GetTimelineIdResponse, error) {
	rsp, err := c.GetTimelineId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelineIdResponse(rsp)
}

// PutTimelineIdWithBodyWithResponse request with arbitrary body returning *PutTimelineIdResponse
func (c *ClientWithResponses) PutTimelineIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimelineIdResponse, error) {
	rsp, err := c.PutTimelineIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimelineIdResponse(rsp)
}

func (c *ClientWithResponses) PutTimelineIdWithResponse(ctx context.Context, id int, body PutTimelineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimelineIdResponse, error) {
	rsp, err := c.PutTimelineId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimelineIdResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// GetUserCurrentWithResponse request returning *GetUserCurrentResponse
func (c *ClientWithResponses) GetUserCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserCurrentResponse, error) {
	rsp, err := c.GetUserCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCurrentResponse(rsp)
}

// GetUserRecipientsWithResponse request returning *GetUserRecipientsResponse
func (c *ClientWithResponses) GetUserRecipientsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserRecipientsResponse, error) {
	rsp, err := c.GetUserRecipients(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRecipientsResponse(rsp)
}

// DeleteUserIdWithResponse request returning *DeleteUserIdResponse
func (c *ClientWithResponses) DeleteUserIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUserIdResponse, error) {
	rsp, err := c.DeleteUserId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserIdResponse(rsp)
}

// GetUserIdWithResponse request returning *GetUserIdResponse
func (c *ClientWithResponses) GetUserIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetUserIdResponse, error) {
	rsp, err := c.GetUserId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIdResponse(rsp)
}

// PutUserIdWithBodyWithResponse request with arbitrary body returning *PutUserIdResponse
func (c *ClientWithResponses) PutUserIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error) {
	rsp, err := c.PutUserIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutUserIdWithResponse(ctx context.Context, id int, body PutUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdResponse, error) {
	rsp, err := c.PutUserId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdResponse(rsp)
}

// PutUserIdModalModalWithResponse request returning *PutUserIdModalModalResponse
func (c *ClientWithResponses) PutUserIdModalModalWithResponse(ctx context.Context, id int, modal string, reqEditors ...RequestEditorFn) (*PutUserIdModalModalResponse, error) {
	rsp, err := c.PutUserIdModalModal(ctx, id, modal, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdModalModalResponse(rsp)
}

// PutUserIdPasswordWithBodyWithResponse request with arbitrary body returning *PutUserIdPasswordResponse
func (c *ClientWithResponses) PutUserIdPasswordWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserIdPasswordResponse, error) {
	rsp, err := c.PutUserIdPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutUserIdPasswordWithResponse(ctx context.Context, id int, body PutUserIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserIdPasswordResponse, error) {
	rsp, err := c.PutUserIdPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdPasswordResponse(rsp)
}

// PutUserIdReactivateWithResponse request returning *PutUserIdReactivateResponse
func (c *ClientWithResponses) PutUserIdReactivateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutUserIdReactivateResponse, error) {
	rsp, err := c.PutUserIdReactivate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserIdReactivateResponse(rsp)
}

// PostUserIdSendInviteWithResponse request returning *PostUserIdSendInviteResponse
func (c *ClientWithResponses) PostUserIdSendInviteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUserIdSendInviteResponse, error) {
	rsp, err := c.PostUserIdSendInvite(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserIdSendInviteResponse(rsp)
}

// GetUtilBugReportDetailsWithResponse request returning *GetUtilBugReportDetailsResponse
func (c *ClientWithResponses) GetUtilBugReportDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilBugReportDetailsResponse, error) {
	rsp, err := c.GetUtilBugReportDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUtilBugReportDetailsResponse(rsp)
}

// GetUtilDiagnosticInfoConnectionPoolInfoWithResponse request returning *GetUtilDiagnosticInfoConnectionPoolInfoResponse
func (c *ClientWithResponses) GetUtilDiagnosticInfoConnectionPoolInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilDiagnosticInfoConnectionPoolInfoResponse, error) {
	rsp, err := c.GetUtilDiagnosticInfoConnectionPoolInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUtilDiagnosticInfoConnectionPoolInfoResponse(rsp)
}

// PostUtilEntityIdWithBodyWithResponse request with arbitrary body returning *PostUtilEntityIdResponse
func (c *ClientWithResponses) PostUtilEntityIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilEntityIdResponse, error) {
	rsp, err := c.PostUtilEntityIdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilEntityIdResponse(rsp)
}

func (c *ClientWithResponses) PostUtilEntityIdWithResponse(ctx context.Context, body PostUtilEntityIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilEntityIdResponse, error) {
	rsp, err := c.PostUtilEntityId(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilEntityIdResponse(rsp)
}

// GetUtilLogsWithResponse request returning *GetUtilLogsResponse
func (c *ClientWithResponses) GetUtilLogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilLogsResponse, error) {
	rsp, err := c.GetUtilLogs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUtilLogsResponse(rsp)
}

// PostUtilPasswordCheckWithBodyWithResponse request with arbitrary body returning *PostUtilPasswordCheckResponse
func (c *ClientWithResponses) PostUtilPasswordCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilPasswordCheckResponse, error) {
	rsp, err := c.PostUtilPasswordCheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilPasswordCheckResponse(rsp)
}

func (c *ClientWithResponses) PostUtilPasswordCheckWithResponse(ctx context.Context, body PostUtilPasswordCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilPasswordCheckResponse, error) {
	rsp, err := c.PostUtilPasswordCheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilPasswordCheckResponse(rsp)
}

// PostUtilProductFeedbackWithBodyWithResponse request with arbitrary body returning *PostUtilProductFeedbackResponse
func (c *ClientWithResponses) PostUtilProductFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUtilProductFeedbackResponse, error) {
	rsp, err := c.PostUtilProductFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilProductFeedbackResponse(rsp)
}

func (c *ClientWithResponses) PostUtilProductFeedbackWithResponse(ctx context.Context, body PostUtilProductFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUtilProductFeedbackResponse, error) {
	rsp, err := c.PostUtilProductFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUtilProductFeedbackResponse(rsp)
}

// GetUtilRandomTokenWithResponse request returning *GetUtilRandomTokenResponse
func (c *ClientWithResponses) GetUtilRandomTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilRandomTokenResponse, error) {
	rsp, err := c.GetUtilRandomToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUtilRandomTokenResponse(rsp)
}

// GetUtilStatsWithResponse request returning *GetUtilStatsResponse
func (c *ClientWithResponses) GetUtilStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUtilStatsResponse, error) {
	rsp, err := c.GetUtilStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUtilStatsResponse(rsp)
}

// ParseGetActionResponse parses an HTTP response from a GetActionWithResponse call
func ParseGetActionResponse(rsp *http.Response) (*GetActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActionResponse parses an HTTP response from a PostActionWithResponse call
func ParsePostActionResponse(rsp *http.Response) (*PostActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActionPublicResponse parses an HTTP response from a GetActionPublicWithResponse call
func ParseGetActionPublicResponse(rsp *http.Response) (*GetActionPublicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActionPublicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActionActionIdResponse parses an HTTP response from a DeleteActionActionIdWithResponse call
func ParseDeleteActionActionIdResponse(rsp *http.Response) (*DeleteActionActionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActionActionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActionActionIdResponse parses an HTTP response from a GetActionActionIdWithResponse call
func ParseGetActionActionIdResponse(rsp *http.Response) (*GetActionActionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActionActionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActionActionIdExecuteResponse parses an HTTP response from a GetActionActionIdExecuteWithResponse call
func ParseGetActionActionIdExecuteResponse(rsp *http.Response) (*GetActionActionIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActionActionIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutActionIdResponse parses an HTTP response from a PutActionIdWithResponse call
func ParsePutActionIdResponse(rsp *http.Response) (*PutActionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutActionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActionIdExecuteResponse parses an HTTP response from a PostActionIdExecuteWithResponse call
func ParsePostActionIdExecuteResponse(rsp *http.Response) (*PostActionIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActionIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActionIdPublicLinkResponse parses an HTTP response from a DeleteActionIdPublicLinkWithResponse call
func ParseDeleteActionIdPublicLinkResponse(rsp *http.Response) (*DeleteActionIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActionIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActionIdPublicLinkResponse parses an HTTP response from a PostActionIdPublicLinkWithResponse call
func ParsePostActionIdPublicLinkResponse(rsp *http.Response) (*PostActionIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActionIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityMostRecentlyViewedDashboardResponse parses an HTTP response from a GetActivityMostRecentlyViewedDashboardWithResponse call
func ParseGetActivityMostRecentlyViewedDashboardResponse(rsp *http.Response) (*GetActivityMostRecentlyViewedDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityMostRecentlyViewedDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityPopularItemsResponse parses an HTTP response from a GetActivityPopularItemsWithResponse call
func ParseGetActivityPopularItemsResponse(rsp *http.Response) (*GetActivityPopularItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityPopularItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityRecentViewsResponse parses an HTTP response from a GetActivityRecentViewsWithResponse call
func ParseGetActivityRecentViewsResponse(rsp *http.Response) (*GetActivityRecentViewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityRecentViewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityRecentsResponse parses an HTTP response from a GetActivityRecentsWithResponse call
func ParseGetActivityRecentsResponse(rsp *http.Response) (*GetActivityRecentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityRecentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActivityRecentsResponse parses an HTTP response from a PostActivityRecentsWithResponse call
func ParsePostActivityRecentsResponse(rsp *http.Response) (*PostActivityRecentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActivityRecentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertResponse parses an HTTP response from a GetAlertWithResponse call
func ParseGetAlertResponse(rsp *http.Response) (*GetAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertResponse parses an HTTP response from a PostAlertWithResponse call
func ParsePostAlertResponse(rsp *http.Response) (*PostAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertQuestionIdResponse parses an HTTP response from a GetAlertQuestionIdWithResponse call
func ParseGetAlertQuestionIdResponse(rsp *http.Response) (*GetAlertQuestionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertQuestionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertIdResponse parses an HTTP response from a GetAlertIdWithResponse call
func ParseGetAlertIdResponse(rsp *http.Response) (*GetAlertIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAlertIdResponse parses an HTTP response from a PutAlertIdWithResponse call
func ParsePutAlertIdResponse(rsp *http.Response) (*PutAlertIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlertIdSubscriptionResponse parses an HTTP response from a DeleteAlertIdSubscriptionWithResponse call
func ParseDeleteAlertIdSubscriptionResponse(rsp *http.Response) (*DeleteAlertIdSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertIdSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiKeyResponse parses an HTTP response from a PostApiKeyWithResponse call
func ParsePostApiKeyResponse(rsp *http.Response) (*PostApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKeyCountResponse parses an HTTP response from a GetApiKeyCountWithResponse call
func ParseGetApiKeyCountResponse(rsp *http.Response) (*GetApiKeyCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyIdResponse parses an HTTP response from a DeleteApiKeyIdWithResponse call
func ParseDeleteApiKeyIdResponse(rsp *http.Response) (*DeleteApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiKeyIdResponse parses an HTTP response from a PutApiKeyIdWithResponse call
func ParsePutApiKeyIdResponse(rsp *http.Response) (*PutApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiKeyIdRegenerateResponse parses an HTTP response from a PutApiKeyIdRegenerateWithResponse call
func ParsePutApiKeyIdRegenerateResponse(rsp *http.Response) (*PutApiKeyIdRegenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiKeyIdRegenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsDatabaseIdCandidatesResponse parses an HTTP response from a GetAutomagicDashboardsDatabaseIdCandidatesWithResponse call
func ParseGetAutomagicDashboardsDatabaseIdCandidatesResponse(rsp *http.Response) (*GetAutomagicDashboardsDatabaseIdCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsDatabaseIdCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse parses an HTTP response from a GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdWithResponse call
func ParseGetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse(rsp *http.Response) (*GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse parses an HTTP response from a GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryWithResponse call
func ParseGetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse(rsp *http.Response) (*GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBookmarkResponse parses an HTTP response from a GetBookmarkWithResponse call
func ParseGetBookmarkResponse(rsp *http.Response) (*GetBookmarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBookmarkOrderingResponse parses an HTTP response from a PutBookmarkOrderingWithResponse call
func ParsePutBookmarkOrderingResponse(rsp *http.Response) (*PutBookmarkOrderingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBookmarkOrderingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarkModelIdResponse parses an HTTP response from a DeleteBookmarkModelIdWithResponse call
func ParseDeleteBookmarkModelIdResponse(rsp *http.Response) (*DeleteBookmarkModelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarkModelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBookmarkModelIdResponse parses an HTTP response from a PostBookmarkModelIdWithResponse call
func ParsePostBookmarkModelIdResponse(rsp *http.Response) (*PostBookmarkModelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarkModelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCacheResponse parses an HTTP response from a DeleteCacheWithResponse call
func ParseDeleteCacheResponse(rsp *http.Response) (*DeleteCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCacheResponse parses an HTTP response from a GetCacheWithResponse call
func ParseGetCacheResponse(rsp *http.Response) (*GetCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCacheResponse parses an HTTP response from a PutCacheWithResponse call
func ParsePutCacheResponse(rsp *http.Response) (*PutCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCacheInvalidateResponse parses an HTTP response from a PostCacheInvalidateWithResponse call
func ParsePostCacheInvalidateResponse(rsp *http.Response) (*PostCacheInvalidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCacheInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardResponse parses an HTTP response from a GetCardWithResponse call
func ParseGetCardResponse(rsp *http.Response) (*GetCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardResponse parses an HTTP response from a PostCardWithResponse call
func ParsePostCardResponse(rsp *http.Response) (*PostCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCollectionsResponse parses an HTTP response from a PostCardCollectionsWithResponse call
func ParsePostCardCollectionsResponse(rsp *http.Response) (*PostCardCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardEmbeddableResponse parses an HTTP response from a GetCardEmbeddableWithResponse call
func ParseGetCardEmbeddableResponse(rsp *http.Response) (*GetCardEmbeddableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardEmbeddableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardFromCsvResponse parses an HTTP response from a PostCardFromCsvWithResponse call
func ParsePostCardFromCsvResponse(rsp *http.Response) (*PostCardFromCsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardFromCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardPivotCardIdQueryResponse parses an HTTP response from a PostCardPivotCardIdQueryWithResponse call
func ParsePostCardPivotCardIdQueryResponse(rsp *http.Response) (*PostCardPivotCardIdQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardPivotCardIdQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardPublicResponse parses an HTTP response from a GetCardPublicWithResponse call
func ParseGetCardPublicResponse(rsp *http.Response) (*GetCardPublicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardPublicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardCardIdParamsParamKeySearchQueryResponse parses an HTTP response from a GetCardCardIdParamsParamKeySearchQueryWithResponse call
func ParseGetCardCardIdParamsParamKeySearchQueryResponse(rsp *http.Response) (*GetCardCardIdParamsParamKeySearchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardCardIdParamsParamKeySearchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardCardIdParamsParamKeyValuesResponse parses an HTTP response from a GetCardCardIdParamsParamKeyValuesWithResponse call
func ParseGetCardCardIdParamsParamKeyValuesResponse(rsp *http.Response) (*GetCardCardIdParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardCardIdParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdPersistResponse parses an HTTP response from a PostCardCardIdPersistWithResponse call
func ParsePostCardCardIdPersistResponse(rsp *http.Response) (*PostCardCardIdPersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdPersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCardCardIdPublicLinkResponse parses an HTTP response from a DeleteCardCardIdPublicLinkWithResponse call
func ParseDeleteCardCardIdPublicLinkResponse(rsp *http.Response) (*DeleteCardCardIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCardCardIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdPublicLinkResponse parses an HTTP response from a PostCardCardIdPublicLinkWithResponse call
func ParsePostCardCardIdPublicLinkResponse(rsp *http.Response) (*PostCardCardIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdQueryResponse parses an HTTP response from a PostCardCardIdQueryWithResponse call
func ParsePostCardCardIdQueryResponse(rsp *http.Response) (*PostCardCardIdQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdQueryExportFormatResponse parses an HTTP response from a PostCardCardIdQueryExportFormatWithResponse call
func ParsePostCardCardIdQueryExportFormatResponse(rsp *http.Response) (*PostCardCardIdQueryExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdQueryExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdRefreshResponse parses an HTTP response from a PostCardCardIdRefreshWithResponse call
func ParsePostCardCardIdRefreshResponse(rsp *http.Response) (*PostCardCardIdRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardCardIdUnpersistResponse parses an HTTP response from a PostCardCardIdUnpersistWithResponse call
func ParsePostCardCardIdUnpersistResponse(rsp *http.Response) (*PostCardCardIdUnpersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardCardIdUnpersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCardIdResponse parses an HTTP response from a DeleteCardIdWithResponse call
func ParseDeleteCardIdResponse(rsp *http.Response) (*DeleteCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardIdResponse parses an HTTP response from a GetCardIdWithResponse call
func ParseGetCardIdResponse(rsp *http.Response) (*GetCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCardIdResponse parses an HTTP response from a PutCardIdWithResponse call
func ParsePutCardIdResponse(rsp *http.Response) (*PutCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardIdCopyResponse parses an HTTP response from a PostCardIdCopyWithResponse call
func ParsePostCardIdCopyResponse(rsp *http.Response) (*PostCardIdCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardIdCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardIdQueryMetadataResponse parses an HTTP response from a GetCardIdQueryMetadataWithResponse call
func ParseGetCardIdQueryMetadataResponse(rsp *http.Response) (*GetCardIdQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardIdQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardIdSeriesResponse parses an HTTP response from a GetCardIdSeriesWithResponse call
func ParseGetCardIdSeriesResponse(rsp *http.Response) (*GetCardIdSeriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardIdSeriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardIdTimelinesResponse parses an HTTP response from a GetCardIdTimelinesWithResponse call
func ParseGetCardIdTimelinesResponse(rsp *http.Response) (*GetCardIdTimelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardIdTimelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelResponse parses an HTTP response from a GetChannelWithResponse call
func ParseGetChannelResponse(rsp *http.Response) (*GetChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChannelResponse parses an HTTP response from a PostChannelWithResponse call
func ParsePostChannelResponse(rsp *http.Response) (*PostChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChannelTestResponse parses an HTTP response from a PostChannelTestWithResponse call
func ParsePostChannelTestResponse(rsp *http.Response) (*PostChannelTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelIdResponse parses an HTTP response from a GetChannelIdWithResponse call
func ParseGetChannelIdResponse(rsp *http.Response) (*GetChannelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChannelIdResponse parses an HTTP response from a PutChannelIdWithResponse call
func ParsePutChannelIdResponse(rsp *http.Response) (*PutChannelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCloudMigrationResponse parses an HTTP response from a GetCloudMigrationWithResponse call
func ParseGetCloudMigrationResponse(rsp *http.Response) (*GetCloudMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCloudMigrationResponse parses an HTTP response from a PostCloudMigrationWithResponse call
func ParsePostCloudMigrationResponse(rsp *http.Response) (*PostCloudMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloudMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCloudMigrationCancelResponse parses an HTTP response from a PutCloudMigrationCancelWithResponse call
func ParsePutCloudMigrationCancelResponse(rsp *http.Response) (*PutCloudMigrationCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCloudMigrationCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionResponse parses an HTTP response from a GetCollectionWithResponse call
func ParseGetCollectionResponse(rsp *http.Response) (*GetCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCollectionResponse parses an HTTP response from a PostCollectionWithResponse call
func ParsePostCollectionResponse(rsp *http.Response) (*PostCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionGraphResponse parses an HTTP response from a GetCollectionGraphWithResponse call
func ParseGetCollectionGraphResponse(rsp *http.Response) (*GetCollectionGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCollectionGraphResponse parses an HTTP response from a PutCollectionGraphWithResponse call
func ParsePutCollectionGraphResponse(rsp *http.Response) (*PutCollectionGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCollectionGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionRootResponse parses an HTTP response from a GetCollectionRootWithResponse call
func ParseGetCollectionRootResponse(rsp *http.Response) (*GetCollectionRootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionRootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionRootItemsResponse parses an HTTP response from a GetCollectionRootItemsWithResponse call
func ParseGetCollectionRootItemsResponse(rsp *http.Response) (*GetCollectionRootItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionRootItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionRootTimelinesResponse parses an HTTP response from a GetCollectionRootTimelinesWithResponse call
func ParseGetCollectionRootTimelinesResponse(rsp *http.Response) (*GetCollectionRootTimelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionRootTimelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionTrashResponse parses an HTTP response from a GetCollectionTrashWithResponse call
func ParseGetCollectionTrashResponse(rsp *http.Response) (*GetCollectionTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionTreeResponse parses an HTTP response from a GetCollectionTreeWithResponse call
func ParseGetCollectionTreeResponse(rsp *http.Response) (*GetCollectionTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionIdResponse parses an HTTP response from a GetCollectionIdWithResponse call
func ParseGetCollectionIdResponse(rsp *http.Response) (*GetCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCollectionIdResponse parses an HTTP response from a PutCollectionIdWithResponse call
func ParsePutCollectionIdResponse(rsp *http.Response) (*PutCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionIdItemsResponse parses an HTTP response from a GetCollectionIdItemsWithResponse call
func ParseGetCollectionIdItemsResponse(rsp *http.Response) (*GetCollectionIdItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionIdItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionIdTimelinesResponse parses an HTTP response from a GetCollectionIdTimelinesWithResponse call
func ParseGetCollectionIdTimelinesResponse(rsp *http.Response) (*GetCollectionIdTimelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionIdTimelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardResponse parses an HTTP response from a PostDashboardWithResponse call
func ParsePostDashboardResponse(rsp *http.Response) (*PostDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardEmbeddableResponse parses an HTTP response from a GetDashboardEmbeddableWithResponse call
func ParseGetDashboardEmbeddableResponse(rsp *http.Response) (*GetDashboardEmbeddableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardEmbeddableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardParamsValidFilterFieldsResponse parses an HTTP response from a GetDashboardParamsValidFilterFieldsWithResponse call
func ParseGetDashboardParamsValidFilterFieldsResponse(rsp *http.Response) (*GetDashboardParamsValidFilterFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardParamsValidFilterFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse parses an HTTP response from a PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse call
func ParsePostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp *http.Response) (*PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardPublicResponse parses an HTTP response from a GetDashboardPublicWithResponse call
func ParseGetDashboardPublicResponse(rsp *http.Response) (*GetDashboardPublicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardPublicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardSaveResponse parses an HTTP response from a PostDashboardSaveWithResponse call
func ParsePostDashboardSaveResponse(rsp *http.Response) (*PostDashboardSaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardSaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardSaveCollectionParentCollectionIdResponse parses an HTTP response from a PostDashboardSaveCollectionParentCollectionIdWithResponse call
func ParsePostDashboardSaveCollectionParentCollectionIdResponse(rsp *http.Response) (*PostDashboardSaveCollectionParentCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardSaveCollectionParentCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse parses an HTTP response from a PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryWithResponse call
func ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse(rsp *http.Response) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse parses an HTTP response from a PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatWithResponse call
func ParsePostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse(rsp *http.Response) (*PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardDashboardIdDashcardDashcardIdExecuteResponse parses an HTTP response from a GetDashboardDashboardIdDashcardDashcardIdExecuteWithResponse call
func ParseGetDashboardDashboardIdDashcardDashcardIdExecuteResponse(rsp *http.Response) (*GetDashboardDashboardIdDashcardDashcardIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardDashboardIdDashcardDashcardIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardDashboardIdDashcardDashcardIdExecuteResponse parses an HTTP response from a PostDashboardDashboardIdDashcardDashcardIdExecuteWithResponse call
func ParsePostDashboardDashboardIdDashcardDashcardIdExecuteResponse(rsp *http.Response) (*PostDashboardDashboardIdDashcardDashcardIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardDashboardIdDashcardDashcardIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardDashboardIdPublicLinkResponse parses an HTTP response from a DeleteDashboardDashboardIdPublicLinkWithResponse call
func ParseDeleteDashboardDashboardIdPublicLinkResponse(rsp *http.Response) (*DeleteDashboardDashboardIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardDashboardIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardDashboardIdPublicLinkResponse parses an HTTP response from a PostDashboardDashboardIdPublicLinkWithResponse call
func ParsePostDashboardDashboardIdPublicLinkResponse(rsp *http.Response) (*PostDashboardDashboardIdPublicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardDashboardIdPublicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardFromDashboardIdCopyResponse parses an HTTP response from a PostDashboardFromDashboardIdCopyWithResponse call
func ParsePostDashboardFromDashboardIdCopyResponse(rsp *http.Response) (*PostDashboardFromDashboardIdCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardFromDashboardIdCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardIdResponse parses an HTTP response from a DeleteDashboardIdWithResponse call
func ParseDeleteDashboardIdResponse(rsp *http.Response) (*DeleteDashboardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdResponse parses an HTTP response from a GetDashboardIdWithResponse call
func ParseGetDashboardIdResponse(rsp *http.Response) (*GetDashboardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDashboardIdResponse parses an HTTP response from a PutDashboardIdWithResponse call
func ParsePutDashboardIdResponse(rsp *http.Response) (*PutDashboardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDashboardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDashboardIdCardsResponse parses an HTTP response from a PutDashboardIdCardsWithResponse call
func ParsePutDashboardIdCardsResponse(rsp *http.Response) (*PutDashboardIdCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDashboardIdCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdParamsParamKeySearchQueryResponse parses an HTTP response from a GetDashboardIdParamsParamKeySearchQueryWithResponse call
func ParseGetDashboardIdParamsParamKeySearchQueryResponse(rsp *http.Response) (*GetDashboardIdParamsParamKeySearchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdParamsParamKeySearchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdParamsParamKeyValuesResponse parses an HTTP response from a GetDashboardIdParamsParamKeyValuesWithResponse call
func ParseGetDashboardIdParamsParamKeyValuesResponse(rsp *http.Response) (*GetDashboardIdParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdQueryMetadataResponse parses an HTTP response from a GetDashboardIdQueryMetadataWithResponse call
func ParseGetDashboardIdQueryMetadataResponse(rsp *http.Response) (*GetDashboardIdQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdRelatedResponse parses an HTTP response from a GetDashboardIdRelatedWithResponse call
func ParseGetDashboardIdRelatedResponse(rsp *http.Response) (*GetDashboardIdRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardIdRevertResponse parses an HTTP response from a PostDashboardIdRevertWithResponse call
func ParsePostDashboardIdRevertResponse(rsp *http.Response) (*PostDashboardIdRevertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardIdRevertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardIdRevisionsResponse parses an HTTP response from a GetDashboardIdRevisionsWithResponse call
func ParseGetDashboardIdRevisionsResponse(rsp *http.Response) (*GetDashboardIdRevisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardIdRevisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseResponse parses an HTTP response from a GetDatabaseWithResponse call
func ParseGetDatabaseResponse(rsp *http.Response) (*GetDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseResponse parses an HTTP response from a PostDatabaseWithResponse call
func ParsePostDatabaseResponse(rsp *http.Response) (*PostDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseSampleDatabaseResponse parses an HTTP response from a PostDatabaseSampleDatabaseWithResponse call
func ParsePostDatabaseSampleDatabaseResponse(rsp *http.Response) (*PostDatabaseSampleDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseSampleDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseValidateResponse parses an HTTP response from a PostDatabaseValidateWithResponse call
func ParsePostDatabaseValidateResponse(rsp *http.Response) (*PostDatabaseValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseIdResponse parses an HTTP response from a DeleteDatabaseIdWithResponse call
func ParseDeleteDatabaseIdResponse(rsp *http.Response) (*DeleteDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdResponse parses an HTTP response from a GetDatabaseIdWithResponse call
func ParseGetDatabaseIdResponse(rsp *http.Response) (*GetDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDatabaseIdResponse parses an HTTP response from a PutDatabaseIdWithResponse call
func ParsePutDatabaseIdResponse(rsp *http.Response) (*PutDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdAutocompleteSuggestionsResponse parses an HTTP response from a GetDatabaseIdAutocompleteSuggestionsWithResponse call
func ParseGetDatabaseIdAutocompleteSuggestionsResponse(rsp *http.Response) (*GetDatabaseIdAutocompleteSuggestionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdAutocompleteSuggestionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdCardAutocompleteSuggestionsResponse parses an HTTP response from a GetDatabaseIdCardAutocompleteSuggestionsWithResponse call
func ParseGetDatabaseIdCardAutocompleteSuggestionsResponse(rsp *http.Response) (*GetDatabaseIdCardAutocompleteSuggestionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdCardAutocompleteSuggestionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdDiscardValuesResponse parses an HTTP response from a PostDatabaseIdDiscardValuesWithResponse call
func ParsePostDatabaseIdDiscardValuesResponse(rsp *http.Response) (*PostDatabaseIdDiscardValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdDiscardValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdDismissSpinnerResponse parses an HTTP response from a PostDatabaseIdDismissSpinnerWithResponse call
func ParsePostDatabaseIdDismissSpinnerResponse(rsp *http.Response) (*PostDatabaseIdDismissSpinnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdDismissSpinnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdFieldsResponse parses an HTTP response from a GetDatabaseIdFieldsWithResponse call
func ParseGetDatabaseIdFieldsResponse(rsp *http.Response) (*GetDatabaseIdFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdIdfieldsResponse parses an HTTP response from a GetDatabaseIdIdfieldsWithResponse call
func ParseGetDatabaseIdIdfieldsResponse(rsp *http.Response) (*GetDatabaseIdIdfieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdIdfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdMetadataResponse parses an HTTP response from a GetDatabaseIdMetadataWithResponse call
func ParseGetDatabaseIdMetadataResponse(rsp *http.Response) (*GetDatabaseIdMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdPersistResponse parses an HTTP response from a PostDatabaseIdPersistWithResponse call
func ParsePostDatabaseIdPersistResponse(rsp *http.Response) (*PostDatabaseIdPersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdPersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdRescanValuesResponse parses an HTTP response from a PostDatabaseIdRescanValuesWithResponse call
func ParsePostDatabaseIdRescanValuesResponse(rsp *http.Response) (*PostDatabaseIdRescanValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdRescanValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdSchemaResponse parses an HTTP response from a GetDatabaseIdSchemaWithResponse call
func ParseGetDatabaseIdSchemaResponse(rsp *http.Response) (*GetDatabaseIdSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdSchemaSchemaResponse parses an HTTP response from a GetDatabaseIdSchemaSchemaWithResponse call
func ParseGetDatabaseIdSchemaSchemaResponse(rsp *http.Response) (*GetDatabaseIdSchemaSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdSchemaSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdSchemasResponse parses an HTTP response from a GetDatabaseIdSchemasWithResponse call
func ParseGetDatabaseIdSchemasResponse(rsp *http.Response) (*GetDatabaseIdSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdSyncSchemaResponse parses an HTTP response from a PostDatabaseIdSyncSchemaWithResponse call
func ParsePostDatabaseIdSyncSchemaResponse(rsp *http.Response) (*PostDatabaseIdSyncSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdSyncSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdSyncableSchemasResponse parses an HTTP response from a GetDatabaseIdSyncableSchemasWithResponse call
func ParseGetDatabaseIdSyncableSchemasResponse(rsp *http.Response) (*GetDatabaseIdSyncableSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdSyncableSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatabaseIdUnpersistResponse parses an HTTP response from a PostDatabaseIdUnpersistWithResponse call
func ParsePostDatabaseIdUnpersistResponse(rsp *http.Response) (*PostDatabaseIdUnpersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabaseIdUnpersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseIdUsageInfoResponse parses an HTTP response from a GetDatabaseIdUsageInfoWithResponse call
func ParseGetDatabaseIdUsageInfoResponse(rsp *http.Response) (*GetDatabaseIdUsageInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseIdUsageInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseVirtualDbDatasetsResponse parses an HTTP response from a GetDatabaseVirtualDbDatasetsWithResponse call
func ParseGetDatabaseVirtualDbDatasetsResponse(rsp *http.Response) (*GetDatabaseVirtualDbDatasetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseVirtualDbDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseVirtualDbDatasetsSchemaResponse parses an HTTP response from a GetDatabaseVirtualDbDatasetsSchemaWithResponse call
func ParseGetDatabaseVirtualDbDatasetsSchemaResponse(rsp *http.Response) (*GetDatabaseVirtualDbDatasetsSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseVirtualDbDatasetsSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseVirtualDbMetadataResponse parses an HTTP response from a GetDatabaseVirtualDbMetadataWithResponse call
func ParseGetDatabaseVirtualDbMetadataResponse(rsp *http.Response) (*GetDatabaseVirtualDbMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseVirtualDbMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseVirtualDbSchemaSchemaResponse parses an HTTP response from a GetDatabaseVirtualDbSchemaSchemaWithResponse call
func ParseGetDatabaseVirtualDbSchemaSchemaResponse(rsp *http.Response) (*GetDatabaseVirtualDbSchemaSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseVirtualDbSchemaSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatabaseVirtualDbSchemasResponse parses an HTTP response from a GetDatabaseVirtualDbSchemasWithResponse call
func ParseGetDatabaseVirtualDbSchemasResponse(rsp *http.Response) (*GetDatabaseVirtualDbSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseVirtualDbSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetResponse parses an HTTP response from a PostDatasetWithResponse call
func ParsePostDatasetResponse(rsp *http.Response) (*PostDatasetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetNativeResponse parses an HTTP response from a PostDatasetNativeWithResponse call
func ParsePostDatasetNativeResponse(rsp *http.Response) (*PostDatasetNativeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetNativeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetParameterSearchQueryResponse parses an HTTP response from a PostDatasetParameterSearchQueryWithResponse call
func ParsePostDatasetParameterSearchQueryResponse(rsp *http.Response) (*PostDatasetParameterSearchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetParameterSearchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetParameterValuesResponse parses an HTTP response from a PostDatasetParameterValuesWithResponse call
func ParsePostDatasetParameterValuesResponse(rsp *http.Response) (*PostDatasetParameterValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetParameterValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetPivotResponse parses an HTTP response from a PostDatasetPivotWithResponse call
func ParsePostDatasetPivotResponse(rsp *http.Response) (*PostDatasetPivotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetPivotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetQueryMetadataResponse parses an HTTP response from a PostDatasetQueryMetadataWithResponse call
func ParsePostDatasetQueryMetadataResponse(rsp *http.Response) (*PostDatasetQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDatasetExportFormatResponse parses an HTTP response from a PostDatasetExportFormatWithResponse call
func ParsePostDatasetExportFormatResponse(rsp *http.Response) (*PostDatasetExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatasetExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDocsResponse parses an HTTP response from a GetDocsWithResponse call
func ParseGetDocsResponse(rsp *http.Response) (*GetDocsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEmailResponse parses an HTTP response from a DeleteEmailWithResponse call
func ParseDeleteEmailResponse(rsp *http.Response) (*DeleteEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEmailResponse parses an HTTP response from a PutEmailWithResponse call
func ParsePutEmailResponse(rsp *http.Response) (*PutEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEmailTestResponse parses an HTTP response from a PostEmailTestWithResponse call
func ParsePostEmailTestResponse(rsp *http.Response) (*PostEmailTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmailTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenResponse parses an HTTP response from a GetEmbedCardTokenWithResponse call
func ParseGetEmbedCardTokenResponse(rsp *http.Response) (*GetEmbedCardTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse parses an HTTP response from a GetEmbedCardTokenFieldFieldIdRemappingRemappedIdWithResponse call
func ParseGetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse(rsp *http.Response) (*GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenFieldFieldIdRemappingRemappedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse parses an HTTP response from a GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdWithResponse call
func ParseGetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse(rsp *http.Response) (*GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenFieldFieldIdSearchSearchFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenFieldFieldIdValuesResponse parses an HTTP response from a GetEmbedCardTokenFieldFieldIdValuesWithResponse call
func ParseGetEmbedCardTokenFieldFieldIdValuesResponse(rsp *http.Response) (*GetEmbedCardTokenFieldFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenFieldFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenParamsParamKeySearchPrefixResponse parses an HTTP response from a GetEmbedCardTokenParamsParamKeySearchPrefixWithResponse call
func ParseGetEmbedCardTokenParamsParamKeySearchPrefixResponse(rsp *http.Response) (*GetEmbedCardTokenParamsParamKeySearchPrefixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenParamsParamKeySearchPrefixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenParamsParamKeyValuesResponse parses an HTTP response from a GetEmbedCardTokenParamsParamKeyValuesWithResponse call
func ParseGetEmbedCardTokenParamsParamKeyValuesResponse(rsp *http.Response) (*GetEmbedCardTokenParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenQueryResponse parses an HTTP response from a GetEmbedCardTokenQueryWithResponse call
func ParseGetEmbedCardTokenQueryResponse(rsp *http.Response) (*GetEmbedCardTokenQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedCardTokenQueryExportFormatResponse parses an HTTP response from a GetEmbedCardTokenQueryExportFormatWithResponse call
func ParseGetEmbedCardTokenQueryExportFormatResponse(rsp *http.Response) (*GetEmbedCardTokenQueryExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedCardTokenQueryExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenResponse parses an HTTP response from a GetEmbedDashboardTokenWithResponse call
func ParseGetEmbedDashboardTokenResponse(rsp *http.Response) (*GetEmbedDashboardTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse call
func ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse parses an HTTP response from a GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatWithResponse call
func ParseGetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse(rsp *http.Response) (*GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse parses an HTTP response from a GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdWithResponse call
func ParseGetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse(rsp *http.Response) (*GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenFieldFieldIdRemappingRemappedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse parses an HTTP response from a GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdWithResponse call
func ParseGetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse(rsp *http.Response) (*GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenFieldFieldIdValuesResponse parses an HTTP response from a GetEmbedDashboardTokenFieldFieldIdValuesWithResponse call
func ParseGetEmbedDashboardTokenFieldFieldIdValuesResponse(rsp *http.Response) (*GetEmbedDashboardTokenFieldFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenFieldFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenParamsParamKeySearchPrefixResponse parses an HTTP response from a GetEmbedDashboardTokenParamsParamKeySearchPrefixWithResponse call
func ParseGetEmbedDashboardTokenParamsParamKeySearchPrefixResponse(rsp *http.Response) (*GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenParamsParamKeySearchPrefixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedDashboardTokenParamsParamKeyValuesResponse parses an HTTP response from a GetEmbedDashboardTokenParamsParamKeyValuesWithResponse call
func ParseGetEmbedDashboardTokenParamsParamKeyValuesResponse(rsp *http.Response) (*GetEmbedDashboardTokenParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedDashboardTokenParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedPivotCardTokenQueryResponse parses an HTTP response from a GetEmbedPivotCardTokenQueryWithResponse call
func ParseGetEmbedPivotCardTokenQueryResponse(rsp *http.Response) (*GetEmbedPivotCardTokenQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedPivotCardTokenQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse call
func ParseGetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdResponse parses an HTTP response from a GetFieldIdWithResponse call
func ParseGetFieldIdResponse(rsp *http.Response) (*GetFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFieldIdResponse parses an HTTP response from a PutFieldIdWithResponse call
func ParsePutFieldIdResponse(rsp *http.Response) (*PutFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFieldIdDimensionResponse parses an HTTP response from a DeleteFieldIdDimensionWithResponse call
func ParseDeleteFieldIdDimensionResponse(rsp *http.Response) (*DeleteFieldIdDimensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFieldIdDimensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFieldIdDimensionResponse parses an HTTP response from a PostFieldIdDimensionWithResponse call
func ParsePostFieldIdDimensionResponse(rsp *http.Response) (*PostFieldIdDimensionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFieldIdDimensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFieldIdDiscardValuesResponse parses an HTTP response from a PostFieldIdDiscardValuesWithResponse call
func ParsePostFieldIdDiscardValuesResponse(rsp *http.Response) (*PostFieldIdDiscardValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFieldIdDiscardValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdRelatedResponse parses an HTTP response from a GetFieldIdRelatedWithResponse call
func ParseGetFieldIdRelatedResponse(rsp *http.Response) (*GetFieldIdRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdRemappingRemappedIdResponse parses an HTTP response from a GetFieldIdRemappingRemappedIdWithResponse call
func ParseGetFieldIdRemappingRemappedIdResponse(rsp *http.Response) (*GetFieldIdRemappingRemappedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdRemappingRemappedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFieldIdRescanValuesResponse parses an HTTP response from a PostFieldIdRescanValuesWithResponse call
func ParsePostFieldIdRescanValuesResponse(rsp *http.Response) (*PostFieldIdRescanValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFieldIdRescanValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdSearchSearchIdResponse parses an HTTP response from a GetFieldIdSearchSearchIdWithResponse call
func ParseGetFieldIdSearchSearchIdResponse(rsp *http.Response) (*GetFieldIdSearchSearchIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdSearchSearchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdSummaryResponse parses an HTTP response from a GetFieldIdSummaryWithResponse call
func ParseGetFieldIdSummaryResponse(rsp *http.Response) (*GetFieldIdSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldIdValuesResponse parses an HTTP response from a GetFieldIdValuesWithResponse call
func ParseGetFieldIdValuesResponse(rsp *http.Response) (*GetFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFieldIdValuesResponse parses an HTTP response from a PostFieldIdValuesWithResponse call
func ParsePostFieldIdValuesResponse(rsp *http.Response) (*PostFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeojsonResponse parses an HTTP response from a GetGeojsonWithResponse call
func ParseGetGeojsonResponse(rsp *http.Response) (*GetGeojsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeojsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeojsonKeyResponse parses an HTTP response from a GetGeojsonKeyWithResponse call
func ParseGetGeojsonKeyResponse(rsp *http.Response) (*GetGeojsonKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeojsonKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGoogleSettingsResponse parses an HTTP response from a PutGoogleSettingsWithResponse call
func ParsePutGoogleSettingsResponse(rsp *http.Response) (*PutGoogleSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGoogleSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutLdapSettingsResponse parses an HTTP response from a PutLdapSettingsWithResponse call
func ParsePutLdapSettingsResponse(rsp *http.Response) (*PutLdapSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLdapSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLoginHistoryCurrentResponse parses an HTTP response from a GetLoginHistoryCurrentWithResponse call
func ParseGetLoginHistoryCurrentResponse(rsp *http.Response) (*GetLoginHistoryCurrentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginHistoryCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetabotDatabaseDatabaseIdResponse parses an HTTP response from a PostMetabotDatabaseDatabaseIdWithResponse call
func ParsePostMetabotDatabaseDatabaseIdResponse(rsp *http.Response) (*PostMetabotDatabaseDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetabotDatabaseDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetabotDatabaseDatabaseIdQueryResponse parses an HTTP response from a PostMetabotDatabaseDatabaseIdQueryWithResponse call
func ParsePostMetabotDatabaseDatabaseIdQueryResponse(rsp *http.Response) (*PostMetabotDatabaseDatabaseIdQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetabotDatabaseDatabaseIdQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetabotFeedbackResponse parses an HTTP response from a PostMetabotFeedbackWithResponse call
func ParsePostMetabotFeedbackResponse(rsp *http.Response) (*PostMetabotFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetabotFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetabotModelModelIdResponse parses an HTTP response from a PostMetabotModelModelIdWithResponse call
func ParsePostMetabotModelModelIdResponse(rsp *http.Response) (*PostMetabotModelModelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetabotModelModelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelIndexResponse parses an HTTP response from a GetModelIndexWithResponse call
func ParseGetModelIndexResponse(rsp *http.Response) (*GetModelIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostModelIndexResponse parses an HTTP response from a PostModelIndexWithResponse call
func ParsePostModelIndexResponse(rsp *http.Response) (*PostModelIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostModelIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelIndexIdResponse parses an HTTP response from a DeleteModelIndexIdWithResponse call
func ParseDeleteModelIndexIdResponse(rsp *http.Response) (*DeleteModelIndexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelIndexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetModelIndexIdResponse parses an HTTP response from a GetModelIndexIdWithResponse call
func ParseGetModelIndexIdResponse(rsp *http.Response) (*GetModelIndexIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelIndexIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNativeQuerySnippetResponse parses an HTTP response from a GetNativeQuerySnippetWithResponse call
func ParseGetNativeQuerySnippetResponse(rsp *http.Response) (*GetNativeQuerySnippetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNativeQuerySnippetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNativeQuerySnippetResponse parses an HTTP response from a PostNativeQuerySnippetWithResponse call
func ParsePostNativeQuerySnippetResponse(rsp *http.Response) (*PostNativeQuerySnippetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNativeQuerySnippetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNativeQuerySnippetIdResponse parses an HTTP response from a GetNativeQuerySnippetIdWithResponse call
func ParseGetNativeQuerySnippetIdResponse(rsp *http.Response) (*GetNativeQuerySnippetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNativeQuerySnippetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutNativeQuerySnippetIdResponse parses an HTTP response from a PutNativeQuerySnippetIdWithResponse call
func ParsePutNativeQuerySnippetIdResponse(rsp *http.Response) (*PutNativeQuerySnippetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNativeQuerySnippetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNotifyDbIdResponse parses an HTTP response from a PostNotifyDbIdWithResponse call
func ParsePostNotifyDbIdResponse(rsp *http.Response) (*PostNotifyDbIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotifyDbIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNotifyDbIdNewTableResponse parses an HTTP response from a PostNotifyDbIdNewTableWithResponse call
func ParsePostNotifyDbIdNewTableResponse(rsp *http.Response) (*PostNotifyDbIdNewTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotifyDbIdNewTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGraphResponse parses an HTTP response from a GetPermissionsGraphWithResponse call
func ParseGetPermissionsGraphResponse(rsp *http.Response) (*GetPermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPermissionsGraphResponse parses an HTTP response from a PutPermissionsGraphWithResponse call
func ParsePutPermissionsGraphResponse(rsp *http.Response) (*PutPermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGraphDbDbIdResponse parses an HTTP response from a GetPermissionsGraphDbDbIdWithResponse call
func ParseGetPermissionsGraphDbDbIdResponse(rsp *http.Response) (*GetPermissionsGraphDbDbIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGraphDbDbIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGraphGroupGroupIdResponse parses an HTTP response from a GetPermissionsGraphGroupGroupIdWithResponse call
func ParseGetPermissionsGraphGroupGroupIdResponse(rsp *http.Response) (*GetPermissionsGraphGroupGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGraphGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGroupResponse parses an HTTP response from a GetPermissionsGroupWithResponse call
func ParseGetPermissionsGroupResponse(rsp *http.Response) (*GetPermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPermissionsGroupResponse parses an HTTP response from a PostPermissionsGroupWithResponse call
func ParsePostPermissionsGroupResponse(rsp *http.Response) (*PostPermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePermissionsGroupGroupIdResponse parses an HTTP response from a DeletePermissionsGroupGroupIdWithResponse call
func ParseDeletePermissionsGroupGroupIdResponse(rsp *http.Response) (*DeletePermissionsGroupGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionsGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPermissionsGroupGroupIdResponse parses an HTTP response from a PutPermissionsGroupGroupIdWithResponse call
func ParsePutPermissionsGroupGroupIdResponse(rsp *http.Response) (*PutPermissionsGroupGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPermissionsGroupGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGroupIdResponse parses an HTTP response from a GetPermissionsGroupIdWithResponse call
func ParseGetPermissionsGroupIdResponse(rsp *http.Response) (*GetPermissionsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsMembershipResponse parses an HTTP response from a GetPermissionsMembershipWithResponse call
func ParseGetPermissionsMembershipResponse(rsp *http.Response) (*GetPermissionsMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPermissionsMembershipResponse parses an HTTP response from a PostPermissionsMembershipWithResponse call
func ParsePostPermissionsMembershipResponse(rsp *http.Response) (*PostPermissionsMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPermissionsMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPermissionsMembershipGroupIdClearResponse parses an HTTP response from a PutPermissionsMembershipGroupIdClearWithResponse call
func ParsePutPermissionsMembershipGroupIdClearResponse(rsp *http.Response) (*PutPermissionsMembershipGroupIdClearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPermissionsMembershipGroupIdClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePermissionsMembershipIdResponse parses an HTTP response from a DeletePermissionsMembershipIdWithResponse call
func ParseDeletePermissionsMembershipIdResponse(rsp *http.Response) (*DeletePermissionsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPermissionsMembershipIdResponse parses an HTTP response from a PutPermissionsMembershipIdWithResponse call
func ParsePutPermissionsMembershipIdResponse(rsp *http.Response) (*PutPermissionsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPermissionsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersistResponse parses an HTTP response from a GetPersistWithResponse call
func ParseGetPersistResponse(rsp *http.Response) (*GetPersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersistCardCardIdResponse parses an HTTP response from a GetPersistCardCardIdWithResponse call
func ParseGetPersistCardCardIdResponse(rsp *http.Response) (*GetPersistCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersistCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPersistDisableResponse parses an HTTP response from a PostPersistDisableWithResponse call
func ParsePostPersistDisableResponse(rsp *http.Response) (*PostPersistDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPersistDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPersistEnableResponse parses an HTTP response from a PostPersistEnableWithResponse call
func ParsePostPersistEnableResponse(rsp *http.Response) (*PostPersistEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPersistEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPersistSetRefreshScheduleResponse parses an HTTP response from a PostPersistSetRefreshScheduleWithResponse call
func ParsePostPersistSetRefreshScheduleResponse(rsp *http.Response) (*PostPersistSetRefreshScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPersistSetRefreshScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersistPersistedInfoIdResponse parses an HTTP response from a GetPersistPersistedInfoIdWithResponse call
func ParseGetPersistPersistedInfoIdResponse(rsp *http.Response) (*GetPersistPersistedInfoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersistPersistedInfoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPremiumFeaturesTokenStatusResponse parses an HTTP response from a GetPremiumFeaturesTokenStatusWithResponse call
func ParseGetPremiumFeaturesTokenStatusResponse(rsp *http.Response) (*GetPremiumFeaturesTokenStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPremiumFeaturesTokenStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedCardTokenResponse parses an HTTP response from a GetPreviewEmbedCardTokenWithResponse call
func ParseGetPreviewEmbedCardTokenResponse(rsp *http.Response) (*GetPreviewEmbedCardTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedCardTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedCardTokenQueryResponse parses an HTTP response from a GetPreviewEmbedCardTokenQueryWithResponse call
func ParseGetPreviewEmbedCardTokenQueryResponse(rsp *http.Response) (*GetPreviewEmbedCardTokenQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedCardTokenQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedDashboardTokenResponse parses an HTTP response from a GetPreviewEmbedDashboardTokenWithResponse call
func ParseGetPreviewEmbedDashboardTokenResponse(rsp *http.Response) (*GetPreviewEmbedDashboardTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedDashboardTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdWithResponse call
func ParseGetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse parses an HTTP response from a GetPreviewEmbedDashboardTokenParamsParamKeyValuesWithResponse call
func ParseGetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse(rsp *http.Response) (*GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedDashboardTokenParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedPivotCardTokenQueryResponse parses an HTTP response from a GetPreviewEmbedPivotCardTokenQueryWithResponse call
func ParseGetPreviewEmbedPivotCardTokenQueryResponse(rsp *http.Response) (*GetPreviewEmbedPivotCardTokenQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedPivotCardTokenQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdWithResponse call
func ParseGetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicActionUuidResponse parses an HTTP response from a GetPublicActionUuidWithResponse call
func ParseGetPublicActionUuidResponse(rsp *http.Response) (*GetPublicActionUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicActionUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublicActionUuidExecuteResponse parses an HTTP response from a PostPublicActionUuidExecuteWithResponse call
func ParsePostPublicActionUuidExecuteResponse(rsp *http.Response) (*PostPublicActionUuidExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublicActionUuidExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidResponse parses an HTTP response from a GetPublicCardUuidWithResponse call
func ParseGetPublicCardUuidResponse(rsp *http.Response) (*GetPublicCardUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse parses an HTTP response from a GetPublicCardUuidFieldFieldIdRemappingRemappedIdWithResponse call
func ParseGetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse(rsp *http.Response) (*GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidFieldFieldIdRemappingRemappedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse parses an HTTP response from a GetPublicCardUuidFieldFieldIdSearchSearchFieldIdWithResponse call
func ParseGetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse(rsp *http.Response) (*GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidFieldFieldIdSearchSearchFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidFieldFieldIdValuesResponse parses an HTTP response from a GetPublicCardUuidFieldFieldIdValuesWithResponse call
func ParseGetPublicCardUuidFieldFieldIdValuesResponse(rsp *http.Response) (*GetPublicCardUuidFieldFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidFieldFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidParamsParamKeySearchQueryResponse parses an HTTP response from a GetPublicCardUuidParamsParamKeySearchQueryWithResponse call
func ParseGetPublicCardUuidParamsParamKeySearchQueryResponse(rsp *http.Response) (*GetPublicCardUuidParamsParamKeySearchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidParamsParamKeySearchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidParamsParamKeyValuesResponse parses an HTTP response from a GetPublicCardUuidParamsParamKeyValuesWithResponse call
func ParseGetPublicCardUuidParamsParamKeyValuesResponse(rsp *http.Response) (*GetPublicCardUuidParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidQueryResponse parses an HTTP response from a GetPublicCardUuidQueryWithResponse call
func ParseGetPublicCardUuidQueryResponse(rsp *http.Response) (*GetPublicCardUuidQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicCardUuidQueryExportFormatResponse parses an HTTP response from a GetPublicCardUuidQueryExportFormatWithResponse call
func ParseGetPublicCardUuidQueryExportFormatResponse(rsp *http.Response) (*GetPublicCardUuidQueryExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicCardUuidQueryExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidResponse parses an HTTP response from a GetPublicDashboardUuidWithResponse call
func ParseGetPublicDashboardUuidResponse(rsp *http.Response) (*GetPublicDashboardUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetPublicDashboardUuidDashcardDashcardIdCardCardIdWithResponse call
func ParseGetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse parses an HTTP response from a PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatWithResponse call
func ParsePostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse(rsp *http.Response) (*PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidDashcardDashcardIdExecuteResponse parses an HTTP response from a GetPublicDashboardUuidDashcardDashcardIdExecuteWithResponse call
func ParseGetPublicDashboardUuidDashcardDashcardIdExecuteResponse(rsp *http.Response) (*GetPublicDashboardUuidDashcardDashcardIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidDashcardDashcardIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPublicDashboardUuidDashcardDashcardIdExecuteResponse parses an HTTP response from a PostPublicDashboardUuidDashcardDashcardIdExecuteWithResponse call
func ParsePostPublicDashboardUuidDashcardDashcardIdExecuteResponse(rsp *http.Response) (*PostPublicDashboardUuidDashcardDashcardIdExecuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublicDashboardUuidDashcardDashcardIdExecuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse parses an HTTP response from a GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdWithResponse call
func ParseGetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse(rsp *http.Response) (*GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidFieldFieldIdRemappingRemappedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse parses an HTTP response from a GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdWithResponse call
func ParseGetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse(rsp *http.Response) (*GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidFieldFieldIdSearchSearchFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidFieldFieldIdValuesResponse parses an HTTP response from a GetPublicDashboardUuidFieldFieldIdValuesWithResponse call
func ParseGetPublicDashboardUuidFieldFieldIdValuesResponse(rsp *http.Response) (*GetPublicDashboardUuidFieldFieldIdValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidFieldFieldIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidParamsParamKeySearchQueryResponse parses an HTTP response from a GetPublicDashboardUuidParamsParamKeySearchQueryWithResponse call
func ParseGetPublicDashboardUuidParamsParamKeySearchQueryResponse(rsp *http.Response) (*GetPublicDashboardUuidParamsParamKeySearchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidParamsParamKeySearchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicDashboardUuidParamsParamKeyValuesResponse parses an HTTP response from a GetPublicDashboardUuidParamsParamKeyValuesWithResponse call
func ParseGetPublicDashboardUuidParamsParamKeyValuesResponse(rsp *http.Response) (*GetPublicDashboardUuidParamsParamKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDashboardUuidParamsParamKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicOembedResponse parses an HTTP response from a GetPublicOembedWithResponse call
func ParseGetPublicOembedResponse(rsp *http.Response) (*GetPublicOembedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicOembedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicPivotCardUuidQueryResponse parses an HTTP response from a GetPublicPivotCardUuidQueryWithResponse call
func ParseGetPublicPivotCardUuidQueryResponse(rsp *http.Response) (*GetPublicPivotCardUuidQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicPivotCardUuidQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse parses an HTTP response from a GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdWithResponse call
func ParseGetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse(rsp *http.Response) (*GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicPivotDashboardUuidDashcardDashcardIdCardCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulseResponse parses an HTTP response from a GetPulseWithResponse call
func ParseGetPulseResponse(rsp *http.Response) (*GetPulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPulseResponse parses an HTTP response from a PostPulseWithResponse call
func ParsePostPulseResponse(rsp *http.Response) (*PostPulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulseFormInputResponse parses an HTTP response from a GetPulseFormInputWithResponse call
func ParseGetPulseFormInputResponse(rsp *http.Response) (*GetPulseFormInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseFormInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulsePreviewCardIdResponse parses an HTTP response from a GetPulsePreviewCardIdWithResponse call
func ParseGetPulsePreviewCardIdResponse(rsp *http.Response) (*GetPulsePreviewCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulsePreviewCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulsePreviewCardInfoIdResponse parses an HTTP response from a GetPulsePreviewCardInfoIdWithResponse call
func ParseGetPulsePreviewCardInfoIdResponse(rsp *http.Response) (*GetPulsePreviewCardInfoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulsePreviewCardInfoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulsePreviewCardPngIdResponse parses an HTTP response from a GetPulsePreviewCardPngIdWithResponse call
func ParseGetPulsePreviewCardPngIdResponse(rsp *http.Response) (*GetPulsePreviewCardPngIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulsePreviewCardPngIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulsePreviewDashboardIdResponse parses an HTTP response from a GetPulsePreviewDashboardIdWithResponse call
func ParseGetPulsePreviewDashboardIdResponse(rsp *http.Response) (*GetPulsePreviewDashboardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulsePreviewDashboardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPulseTestResponse parses an HTTP response from a PostPulseTestWithResponse call
func ParsePostPulseTestResponse(rsp *http.Response) (*PostPulseTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPulseTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPulseIdResponse parses an HTTP response from a GetPulseIdWithResponse call
func ParseGetPulseIdResponse(rsp *http.Response) (*GetPulseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPulseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPulseIdResponse parses an HTTP response from a PutPulseIdWithResponse call
func ParsePutPulseIdResponse(rsp *http.Response) (*PutPulseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPulseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePulseIdSubscriptionResponse parses an HTTP response from a DeletePulseIdSubscriptionWithResponse call
func ParseDeletePulseIdSubscriptionResponse(rsp *http.Response) (*DeletePulseIdSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePulseIdSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRevisionResponse parses an HTTP response from a GetRevisionWithResponse call
func ParseGetRevisionResponse(rsp *http.Response) (*GetRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRevisionRevertResponse parses an HTTP response from a PostRevisionRevertWithResponse call
func ParsePostRevisionRevertResponse(rsp *http.Response) (*PostRevisionRevertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRevisionRevertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSearchForceReindexResponse parses an HTTP response from a PostSearchForceReindexWithResponse call
func ParsePostSearchForceReindexResponse(rsp *http.Response) (*PostSearchForceReindexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchForceReindexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchModelsResponse parses an HTTP response from a GetSearchModelsWithResponse call
func ParseGetSearchModelsResponse(rsp *http.Response) (*GetSearchModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSegmentResponse parses an HTTP response from a GetSegmentWithResponse call
func ParseGetSegmentResponse(rsp *http.Response) (*GetSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSegmentResponse parses an HTTP response from a PostSegmentWithResponse call
func ParsePostSegmentResponse(rsp *http.Response) (*PostSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSegmentIdResponse parses an HTTP response from a DeleteSegmentIdWithResponse call
func ParseDeleteSegmentIdResponse(rsp *http.Response) (*DeleteSegmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSegmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSegmentIdResponse parses an HTTP response from a GetSegmentIdWithResponse call
func ParseGetSegmentIdResponse(rsp *http.Response) (*GetSegmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSegmentIdResponse parses an HTTP response from a PutSegmentIdWithResponse call
func ParsePutSegmentIdResponse(rsp *http.Response) (*PutSegmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSegmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSegmentIdRelatedResponse parses an HTTP response from a GetSegmentIdRelatedWithResponse call
func ParseGetSegmentIdRelatedResponse(rsp *http.Response) (*GetSegmentIdRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentIdRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSegmentIdRevertResponse parses an HTTP response from a PostSegmentIdRevertWithResponse call
func ParsePostSegmentIdRevertResponse(rsp *http.Response) (*PostSegmentIdRevertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSegmentIdRevertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSegmentIdRevisionsResponse parses an HTTP response from a GetSegmentIdRevisionsWithResponse call
func ParseGetSegmentIdRevisionsResponse(rsp *http.Response) (*GetSegmentIdRevisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentIdRevisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionResponse parses an HTTP response from a PostSessionWithResponse call
func ParsePostSessionResponse(rsp *http.Response) (*PostSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionForgotPasswordResponse parses an HTTP response from a PostSessionForgotPasswordWithResponse call
func ParsePostSessionForgotPasswordResponse(rsp *http.Response) (*PostSessionForgotPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionForgotPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionGoogleAuthResponse parses an HTTP response from a PostSessionGoogleAuthWithResponse call
func ParsePostSessionGoogleAuthResponse(rsp *http.Response) (*PostSessionGoogleAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionGoogleAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionPasswordResetTokenValidResponse parses an HTTP response from a GetSessionPasswordResetTokenValidWithResponse call
func ParseGetSessionPasswordResetTokenValidResponse(rsp *http.Response) (*GetSessionPasswordResetTokenValidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionPasswordResetTokenValidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionPropertiesResponse parses an HTTP response from a GetSessionPropertiesWithResponse call
func ParseGetSessionPropertiesResponse(rsp *http.Response) (*GetSessionPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionPulseUnsubscribeResponse parses an HTTP response from a PostSessionPulseUnsubscribeWithResponse call
func ParsePostSessionPulseUnsubscribeResponse(rsp *http.Response) (*PostSessionPulseUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionPulseUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionPulseUnsubscribeUndoResponse parses an HTTP response from a PostSessionPulseUnsubscribeUndoWithResponse call
func ParsePostSessionPulseUnsubscribeUndoResponse(rsp *http.Response) (*PostSessionPulseUnsubscribeUndoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionPulseUnsubscribeUndoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSessionResetPasswordResponse parses an HTTP response from a PostSessionResetPasswordWithResponse call
func ParsePostSessionResetPasswordResponse(rsp *http.Response) (*PostSessionResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSessionResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingResponse parses an HTTP response from a GetSettingWithResponse call
func ParseGetSettingResponse(rsp *http.Response) (*GetSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingResponse parses an HTTP response from a PutSettingWithResponse call
func ParsePutSettingResponse(rsp *http.Response) (*PutSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSettingKeyResponse parses an HTTP response from a GetSettingKeyWithResponse call
func ParseGetSettingKeyResponse(rsp *http.Response) (*GetSettingKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingKeyResponse parses an HTTP response from a PutSettingKeyWithResponse call
func ParsePutSettingKeyResponse(rsp *http.Response) (*PutSettingKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSetupResponse parses an HTTP response from a PostSetupWithResponse call
func ParsePostSetupResponse(rsp *http.Response) (*PostSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSetupAdminChecklistResponse parses an HTTP response from a GetSetupAdminChecklistWithResponse call
func ParseGetSetupAdminChecklistResponse(rsp *http.Response) (*GetSetupAdminChecklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSetupAdminChecklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSetupUserDefaultsResponse parses an HTTP response from a GetSetupUserDefaultsWithResponse call
func ParseGetSetupUserDefaultsResponse(rsp *http.Response) (*GetSetupUserDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSetupUserDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSlackManifestResponse parses an HTTP response from a GetSlackManifestWithResponse call
func ParseGetSlackManifestResponse(rsp *http.Response) (*GetSlackManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlackManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSlackSettingsResponse parses an HTTP response from a PutSlackSettingsWithResponse call
func ParsePutSlackSettingsResponse(rsp *http.Response) (*PutSlackSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSlackSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableResponse parses an HTTP response from a GetTableWithResponse call
func ParseGetTableResponse(rsp *http.Response) (*GetTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTableResponse parses an HTTP response from a PutTableWithResponse call
func ParsePutTableResponse(rsp *http.Response) (*PutTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableCardIdFksResponse parses an HTTP response from a GetTableCardIdFksWithResponse call
func ParseGetTableCardIdFksResponse(rsp *http.Response) (*GetTableCardIdFksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableCardIdFksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableCardIdQueryMetadataResponse parses an HTTP response from a GetTableCardIdQueryMetadataWithResponse call
func ParseGetTableCardIdQueryMetadataResponse(rsp *http.Response) (*GetTableCardIdQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableCardIdQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableIdResponse parses an HTTP response from a GetTableIdWithResponse call
func ParseGetTableIdResponse(rsp *http.Response) (*GetTableIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTableIdResponse parses an HTTP response from a PutTableIdWithResponse call
func ParsePutTableIdResponse(rsp *http.Response) (*PutTableIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTableIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTableIdAppendCsvResponse parses an HTTP response from a PostTableIdAppendCsvWithResponse call
func ParsePostTableIdAppendCsvResponse(rsp *http.Response) (*PostTableIdAppendCsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTableIdAppendCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTableIdDiscardValuesResponse parses an HTTP response from a PostTableIdDiscardValuesWithResponse call
func ParsePostTableIdDiscardValuesResponse(rsp *http.Response) (*PostTableIdDiscardValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTableIdDiscardValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTableIdFieldsOrderResponse parses an HTTP response from a PutTableIdFieldsOrderWithResponse call
func ParsePutTableIdFieldsOrderResponse(rsp *http.Response) (*PutTableIdFieldsOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTableIdFieldsOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableIdFksResponse parses an HTTP response from a GetTableIdFksWithResponse call
func ParseGetTableIdFksResponse(rsp *http.Response) (*GetTableIdFksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableIdFksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableIdQueryMetadataResponse parses an HTTP response from a GetTableIdQueryMetadataWithResponse call
func ParseGetTableIdQueryMetadataResponse(rsp *http.Response) (*GetTableIdQueryMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableIdQueryMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableIdRelatedResponse parses an HTTP response from a GetTableIdRelatedWithResponse call
func ParseGetTableIdRelatedResponse(rsp *http.Response) (*GetTableIdRelatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableIdRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTableIdReplaceCsvResponse parses an HTTP response from a PostTableIdReplaceCsvWithResponse call
func ParsePostTableIdReplaceCsvResponse(rsp *http.Response) (*PostTableIdReplaceCsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTableIdReplaceCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTableIdRescanValuesResponse parses an HTTP response from a PostTableIdRescanValuesWithResponse call
func ParsePostTableIdRescanValuesResponse(rsp *http.Response) (*PostTableIdRescanValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTableIdRescanValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskInfoResponse parses an HTTP response from a GetTaskInfoWithResponse call
func ParseGetTaskInfoResponse(rsp *http.Response) (*GetTaskInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskIdResponse parses an HTTP response from a GetTaskIdWithResponse call
func ParseGetTaskIdResponse(rsp *http.Response) (*GetTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTilesZoomXYLatFieldLonFieldResponse parses an HTTP response from a GetTilesZoomXYLatFieldLonFieldWithResponse call
func ParseGetTilesZoomXYLatFieldLonFieldResponse(rsp *http.Response) (*GetTilesZoomXYLatFieldLonFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTilesZoomXYLatFieldLonFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTimelineEventResponse parses an HTTP response from a PostTimelineEventWithResponse call
func ParsePostTimelineEventResponse(rsp *http.Response) (*PostTimelineEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTimelineEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTimelineEventIdResponse parses an HTTP response from a DeleteTimelineEventIdWithResponse call
func ParseDeleteTimelineEventIdResponse(rsp *http.Response) (*DeleteTimelineEventIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTimelineEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimelineEventIdResponse parses an HTTP response from a GetTimelineEventIdWithResponse call
func ParseGetTimelineEventIdResponse(rsp *http.Response) (*GetTimelineEventIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelineEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTimelineEventIdResponse parses an HTTP response from a PutTimelineEventIdWithResponse call
func ParsePutTimelineEventIdResponse(rsp *http.Response) (*PutTimelineEventIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTimelineEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimelineResponse parses an HTTP response from a GetTimelineWithResponse call
func ParseGetTimelineResponse(rsp *http.Response) (*GetTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTimelineResponse parses an HTTP response from a PostTimelineWithResponse call
func ParsePostTimelineResponse(rsp *http.Response) (*PostTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTimelineIdResponse parses an HTTP response from a DeleteTimelineIdWithResponse call
func ParseDeleteTimelineIdResponse(rsp *http.Response) (*DeleteTimelineIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTimelineIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimelineIdResponse parses an HTTP response from a GetTimelineIdWithResponse call
func ParseGetTimelineIdResponse(rsp *http.Response) (*GetTimelineIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelineIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTimelineIdResponse parses an HTTP response from a PutTimelineIdWithResponse call
func ParsePutTimelineIdResponse(rsp *http.Response) (*PutTimelineIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTimelineIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserCurrentResponse parses an HTTP response from a GetUserCurrentWithResponse call
func ParseGetUserCurrentResponse(rsp *http.Response) (*GetUserCurrentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserRecipientsResponse parses an HTTP response from a GetUserRecipientsWithResponse call
func ParseGetUserRecipientsResponse(rsp *http.Response) (*GetUserRecipientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserIdResponse parses an HTTP response from a DeleteUserIdWithResponse call
func ParseDeleteUserIdResponse(rsp *http.Response) (*DeleteUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserIdResponse parses an HTTP response from a GetUserIdWithResponse call
func ParseGetUserIdResponse(rsp *http.Response) (*GetUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserIdResponse parses an HTTP response from a PutUserIdWithResponse call
func ParsePutUserIdResponse(rsp *http.Response) (*PutUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserIdModalModalResponse parses an HTTP response from a PutUserIdModalModalWithResponse call
func ParsePutUserIdModalModalResponse(rsp *http.Response) (*PutUserIdModalModalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdModalModalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserIdPasswordResponse parses an HTTP response from a PutUserIdPasswordWithResponse call
func ParsePutUserIdPasswordResponse(rsp *http.Response) (*PutUserIdPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserIdReactivateResponse parses an HTTP response from a PutUserIdReactivateWithResponse call
func ParsePutUserIdReactivateResponse(rsp *http.Response) (*PutUserIdReactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserIdReactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserIdSendInviteResponse parses an HTTP response from a PostUserIdSendInviteWithResponse call
func ParsePostUserIdSendInviteResponse(rsp *http.Response) (*PostUserIdSendInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserIdSendInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUtilBugReportDetailsResponse parses an HTTP response from a GetUtilBugReportDetailsWithResponse call
func ParseGetUtilBugReportDetailsResponse(rsp *http.Response) (*GetUtilBugReportDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUtilBugReportDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUtilDiagnosticInfoConnectionPoolInfoResponse parses an HTTP response from a GetUtilDiagnosticInfoConnectionPoolInfoWithResponse call
func ParseGetUtilDiagnosticInfoConnectionPoolInfoResponse(rsp *http.Response) (*GetUtilDiagnosticInfoConnectionPoolInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUtilDiagnosticInfoConnectionPoolInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUtilEntityIdResponse parses an HTTP response from a PostUtilEntityIdWithResponse call
func ParsePostUtilEntityIdResponse(rsp *http.Response) (*PostUtilEntityIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUtilEntityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUtilLogsResponse parses an HTTP response from a GetUtilLogsWithResponse call
func ParseGetUtilLogsResponse(rsp *http.Response) (*GetUtilLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUtilLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUtilPasswordCheckResponse parses an HTTP response from a PostUtilPasswordCheckWithResponse call
func ParsePostUtilPasswordCheckResponse(rsp *http.Response) (*PostUtilPasswordCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUtilPasswordCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUtilProductFeedbackResponse parses an HTTP response from a PostUtilProductFeedbackWithResponse call
func ParsePostUtilProductFeedbackResponse(rsp *http.Response) (*PostUtilProductFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUtilProductFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUtilRandomTokenResponse parses an HTTP response from a GetUtilRandomTokenWithResponse call
func ParseGetUtilRandomTokenResponse(rsp *http.Response) (*GetUtilRandomTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUtilRandomTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUtilStatsResponse parses an HTTP response from a GetUtilStatsWithResponse call
func ParseGetUtilStatsResponse(rsp *http.Response) (*GetUtilStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUtilStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
